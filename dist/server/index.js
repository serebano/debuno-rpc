var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __glob = (map) => (path5) => {
  var fn = map[path5];
  if (fn) return fn();
  throw new Error("Module not found in bundle: " + path5);
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// https://jsr.io/@std/path/1.0.8/_os.ts
var isWindows;
var init_os = __esm({
  "https://jsr.io/@std/path/1.0.8/_os.ts"() {
    isWindows = globalThis.Deno?.build.os === "windows" || globalThis.navigator?.platform?.startsWith("Win") || globalThis.process?.platform?.startsWith("win") || false;
  }
});

// https://jsr.io/@std/path/1.0.8/_common/assert_path.ts
function assertPath(path5) {
  if (typeof path5 !== "string") {
    throw new TypeError(
      `Path must be a string, received "${JSON.stringify(path5)}"`
    );
  }
}
var init_assert_path = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/assert_path.ts"() {
  }
});

// https://jsr.io/@std/path/1.0.8/_common/normalize.ts
function assertArg(path5) {
  assertPath(path5);
  if (path5.length === 0) return ".";
}
var init_normalize = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/normalize.ts"() {
    init_assert_path();
  }
});

// https://jsr.io/@std/path/1.0.8/_common/constants.ts
var CHAR_UPPERCASE_A, CHAR_LOWERCASE_A, CHAR_UPPERCASE_Z, CHAR_LOWERCASE_Z, CHAR_DOT, CHAR_FORWARD_SLASH, CHAR_BACKWARD_SLASH, CHAR_COLON;
var init_constants = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/constants.ts"() {
    CHAR_UPPERCASE_A = 65;
    CHAR_LOWERCASE_A = 97;
    CHAR_UPPERCASE_Z = 90;
    CHAR_LOWERCASE_Z = 122;
    CHAR_DOT = 46;
    CHAR_FORWARD_SLASH = 47;
    CHAR_BACKWARD_SLASH = 92;
    CHAR_COLON = 58;
  }
});

// https://jsr.io/@std/path/1.0.8/_common/normalize_string.ts
function normalizeString(path5, allowAboveRoot, separator, isPathSeparator2) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code2;
  for (let i2 = 0; i2 <= path5.length; ++i2) {
    if (i2 < path5.length) code2 = path5.charCodeAt(i2);
    else if (isPathSeparator2(code2)) break;
    else code2 = CHAR_FORWARD_SLASH;
    if (isPathSeparator2(code2)) {
      if (lastSlash === i2 - 1 || dots === 1) {
      } else if (lastSlash !== i2 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i2;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) res += `${separator}..`;
          else res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += separator + path5.slice(lastSlash + 1, i2);
        else res = path5.slice(lastSlash + 1, i2);
        lastSegmentLength = i2 - lastSlash - 1;
      }
      lastSlash = i2;
      dots = 0;
    } else if (code2 === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
var init_normalize_string = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/normalize_string.ts"() {
    init_constants();
  }
});

// https://jsr.io/@std/path/1.0.8/posix/_util.ts
function isPosixPathSeparator(code2) {
  return code2 === CHAR_FORWARD_SLASH;
}
var init_util = __esm({
  "https://jsr.io/@std/path/1.0.8/posix/_util.ts"() {
    init_constants();
  }
});

// https://jsr.io/@std/path/1.0.8/posix/normalize.ts
function normalize(path5) {
  assertArg(path5);
  const isAbsolute2 = isPosixPathSeparator(path5.charCodeAt(0));
  const trailingSeparator = isPosixPathSeparator(
    path5.charCodeAt(path5.length - 1)
  );
  path5 = normalizeString(path5, !isAbsolute2, "/", isPosixPathSeparator);
  if (path5.length === 0 && !isAbsolute2) path5 = ".";
  if (path5.length > 0 && trailingSeparator) path5 += "/";
  if (isAbsolute2) return `/${path5}`;
  return path5;
}
var init_normalize2 = __esm({
  "https://jsr.io/@std/path/1.0.8/posix/normalize.ts"() {
    init_normalize();
    init_normalize_string();
    init_util();
  }
});

// https://jsr.io/@std/path/1.0.8/posix/join.ts
function join2(...paths) {
  if (paths.length === 0) return ".";
  paths.forEach((path5) => assertPath(path5));
  const joined = paths.filter((path5) => path5.length > 0).join("/");
  return joined === "" ? "." : normalize(joined);
}
var init_join = __esm({
  "https://jsr.io/@std/path/1.0.8/posix/join.ts"() {
    init_assert_path();
    init_normalize2();
  }
});

// https://jsr.io/@std/path/1.0.8/windows/_util.ts
function isPathSeparator(code2) {
  return code2 === CHAR_FORWARD_SLASH || code2 === CHAR_BACKWARD_SLASH;
}
function isWindowsDeviceRoot(code2) {
  return code2 >= CHAR_LOWERCASE_A && code2 <= CHAR_LOWERCASE_Z || code2 >= CHAR_UPPERCASE_A && code2 <= CHAR_UPPERCASE_Z;
}
var init_util2 = __esm({
  "https://jsr.io/@std/path/1.0.8/windows/_util.ts"() {
    init_constants();
  }
});

// https://jsr.io/@std/path/1.0.8/windows/normalize.ts
function normalize2(path5) {
  assertArg(path5);
  const len = path5.length;
  let rootEnd = 0;
  let device;
  let isAbsolute2 = false;
  const code2 = path5.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code2)) {
      isAbsolute2 = true;
      if (isPathSeparator(path5.charCodeAt(1))) {
        let j4 = 2;
        let last = j4;
        for (; j4 < len; ++j4) {
          if (isPathSeparator(path5.charCodeAt(j4))) break;
        }
        if (j4 < len && j4 !== last) {
          const firstPart = path5.slice(last, j4);
          last = j4;
          for (; j4 < len; ++j4) {
            if (!isPathSeparator(path5.charCodeAt(j4))) break;
          }
          if (j4 < len && j4 !== last) {
            last = j4;
            for (; j4 < len; ++j4) {
              if (isPathSeparator(path5.charCodeAt(j4))) break;
            }
            if (j4 === len) {
              return `\\\\${firstPart}\\${path5.slice(last)}\\`;
            } else if (j4 !== last) {
              device = `\\\\${firstPart}\\${path5.slice(last, j4)}`;
              rootEnd = j4;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot(code2)) {
      if (path5.charCodeAt(1) === CHAR_COLON) {
        device = path5.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator(path5.charCodeAt(2))) {
            isAbsolute2 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator(code2)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString(
      path5.slice(rootEnd),
      !isAbsolute2,
      "\\",
      isPathSeparator
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute2) tail = ".";
  if (tail.length > 0 && isPathSeparator(path5.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute2) {
      if (tail.length > 0) return `\\${tail}`;
      else return "\\";
    }
    return tail;
  } else if (isAbsolute2) {
    if (tail.length > 0) return `${device}\\${tail}`;
    else return `${device}\\`;
  }
  return device + tail;
}
var init_normalize3 = __esm({
  "https://jsr.io/@std/path/1.0.8/windows/normalize.ts"() {
    init_normalize();
    init_constants();
    init_normalize_string();
    init_util2();
  }
});

// https://jsr.io/@std/path/1.0.8/windows/join.ts
function join3(...paths) {
  paths.forEach((path5) => assertPath(path5));
  paths = paths.filter((path5) => path5.length > 0);
  if (paths.length === 0) return ".";
  let needsReplace = true;
  let slashCount = 0;
  const firstPart = paths[0];
  if (isPathSeparator(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  let joined = paths.join("\\");
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
    }
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize2(joined);
}
var init_join2 = __esm({
  "https://jsr.io/@std/path/1.0.8/windows/join.ts"() {
    init_assert_path();
    init_util2();
    init_normalize3();
  }
});

// https://jsr.io/@std/path/1.0.8/join.ts
function join4(...paths) {
  return isWindows ? join3(...paths) : join2(...paths);
}
var init_join3 = __esm({
  "https://jsr.io/@std/path/1.0.8/join.ts"() {
    init_os();
    init_join();
    init_join2();
  }
});

// https://jsr.io/@std/path/1.0.8/_common/from_file_url.ts
function assertArg2(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol !== "file:") {
    throw new TypeError(
      `URL must be a file URL: received "${url.protocol}"`
    );
  }
  return url;
}
var init_from_file_url = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/from_file_url.ts"() {
  }
});

// https://jsr.io/@std/path/1.0.8/posix/from_file_url.ts
function fromFileUrl(url) {
  url = assertArg2(url);
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
var init_from_file_url2 = __esm({
  "https://jsr.io/@std/path/1.0.8/posix/from_file_url.ts"() {
    init_from_file_url();
  }
});

// https://jsr.io/@std/path/1.0.8/windows/from_file_url.ts
function fromFileUrl2(url) {
  url = assertArg2(url);
  let path5 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname !== "") {
    path5 = `\\\\${url.hostname}${path5}`;
  }
  return path5;
}
var init_from_file_url3 = __esm({
  "https://jsr.io/@std/path/1.0.8/windows/from_file_url.ts"() {
    init_from_file_url();
  }
});

// https://jsr.io/@std/path/1.0.8/from_file_url.ts
function fromFileUrl3(url) {
  return isWindows ? fromFileUrl2(url) : fromFileUrl(url);
}
var init_from_file_url4 = __esm({
  "https://jsr.io/@std/path/1.0.8/from_file_url.ts"() {
    init_os();
    init_from_file_url2();
    init_from_file_url3();
  }
});

// https://jsr.io/@std/path/1.0.8/_common/basename.ts
function stripSuffix(name, suffix) {
  if (suffix.length >= name.length) {
    return name;
  }
  const lenDiff = name.length - suffix.length;
  for (let i2 = suffix.length - 1; i2 >= 0; --i2) {
    if (name.charCodeAt(lenDiff + i2) !== suffix.charCodeAt(i2)) {
      return name;
    }
  }
  return name.slice(0, -suffix.length);
}
function lastPathSegment(path5, isSep, start2 = 0) {
  let matchedNonSeparator = false;
  let end = path5.length;
  for (let i2 = path5.length - 1; i2 >= start2; --i2) {
    if (isSep(path5.charCodeAt(i2))) {
      if (matchedNonSeparator) {
        start2 = i2 + 1;
        break;
      }
    } else if (!matchedNonSeparator) {
      matchedNonSeparator = true;
      end = i2 + 1;
    }
  }
  return path5.slice(start2, end);
}
function assertArgs(path5, suffix) {
  assertPath(path5);
  if (path5.length === 0) return path5;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string, received "${JSON.stringify(suffix)}"`
    );
  }
}
var init_basename = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/basename.ts"() {
    init_assert_path();
  }
});

// https://jsr.io/@std/path/1.0.8/_common/strip_trailing_separators.ts
function stripTrailingSeparators(segment, isSep) {
  if (segment.length <= 1) {
    return segment;
  }
  let end = segment.length;
  for (let i2 = segment.length - 1; i2 > 0; i2--) {
    if (isSep(segment.charCodeAt(i2))) {
      end = i2;
    } else {
      break;
    }
  }
  return segment.slice(0, end);
}
var init_strip_trailing_separators = __esm({
  "https://jsr.io/@std/path/1.0.8/_common/strip_trailing_separators.ts"() {
  }
});

// https://jsr.io/@std/path/1.0.8/posix/basename.ts
function basename2(path5, suffix = "") {
  assertArgs(path5, suffix);
  const lastSegment = lastPathSegment(path5, isPosixPathSeparator);
  const strippedSegment = stripTrailingSeparators(
    lastSegment,
    isPosixPathSeparator
  );
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
var init_basename2 = __esm({
  "https://jsr.io/@std/path/1.0.8/posix/basename.ts"() {
    init_basename();
    init_strip_trailing_separators();
    init_util();
  }
});

// https://jsr.io/@std/path/1.0.8/windows/basename.ts
function basename3(path5, suffix = "") {
  assertArgs(path5, suffix);
  let start2 = 0;
  if (path5.length >= 2) {
    const drive = path5.charCodeAt(0);
    if (isWindowsDeviceRoot(drive)) {
      if (path5.charCodeAt(1) === CHAR_COLON) start2 = 2;
    }
  }
  const lastSegment = lastPathSegment(path5, isPathSeparator, start2);
  const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator);
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
var init_basename3 = __esm({
  "https://jsr.io/@std/path/1.0.8/windows/basename.ts"() {
    init_basename();
    init_constants();
    init_strip_trailing_separators();
    init_util2();
  }
});

// https://jsr.io/@std/path/1.0.8/basename.ts
function basename4(path5, suffix = "") {
  return isWindows ? basename3(path5, suffix) : basename2(path5, suffix);
}
var init_basename4 = __esm({
  "https://jsr.io/@std/path/1.0.8/basename.ts"() {
    init_os();
    init_basename2();
    init_basename3();
  }
});

// https://jsr.io/@std/path/1.0.8/normalize.ts
function normalize3(path5) {
  return isWindows ? normalize2(path5) : normalize(path5);
}
var init_normalize4 = __esm({
  "https://jsr.io/@std/path/1.0.8/normalize.ts"() {
    init_os();
    init_normalize2();
    init_normalize3();
  }
});

// ../debuno-serve/src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  toLocalhost: () => toLocalhost
});
function toLocalhost(ip) {
  const ipv4LocalRegex = /^(127\.\d{1,3}\.\d{1,3}\.\d{1,3}|10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|172\.(1[6-9]|2\d|3[0-1])\.\d{1,3}\.\d{1,3}|0\.0\.0\.0)$/;
  const ipv6LocalRegex = /^(::1|fc00:|fd00:|::)$/;
  if (ipv4LocalRegex.test(ip) || ipv6LocalRegex.test(ip)) {
    return "localhost";
  }
  return ip;
}
var init_utils = __esm({
  "../debuno-serve/src/utils.ts"() {
  }
});

// ../debuno-serve/src/bun.ts
var bun_exports = {};
__export(bun_exports, {
  ENV: () => ENV,
  readDir: () => readDir2,
  readFile: () => readFile5,
  serve: () => serve,
  writeFile: () => writeFile3
});
function serve(options) {
  const { port, path: path5, hostname } = options;
  const server = Bun.serve({
    port,
    hostname,
    fetch: options.fetch,
    //createRequestHandler({ readFile, readDir, path }),
    error: (error) => {
      options.onError?.(error);
      return Response.json({ error: error.message }, { status: 500 });
    }
  });
  options.onListen?.({
    port: server.port,
    hostname: server.hostname,
    url: new URL(`http://${toLocalhost(server.hostname)}:${server.port}`)
  });
  return server;
}
function readFile5(filePath) {
  return Bun.file(filePath.replace("file://", "")).bytes();
}
function writeFile3(filePath, data) {
  return Bun.write(filePath.replace("file://", ""), data);
}
async function readDir2(dirPath) {
  return Array.fromAsync(new Bun.Glob("**/*").scan({ cwd: dirPath.replace("file://", "") }));
}
var ENV;
var init_bun = __esm({
  "../debuno-serve/src/bun.ts"() {
    init_utils();
    ENV = "bun";
  }
});

// https://jsr.io/@std/fs/1.0.8/_to_path_string.ts
function toPathString2(pathUrl) {
  return pathUrl instanceof URL ? fromFileUrl3(pathUrl) : pathUrl;
}
var init_to_path_string = __esm({
  "https://jsr.io/@std/fs/1.0.8/_to_path_string.ts"() {
    init_from_file_url4();
  }
});

// https://jsr.io/@std/fs/1.0.8/_create_walk_entry.ts
function createWalkEntrySync2(path5) {
  path5 = toPathString2(path5);
  path5 = normalize3(path5);
  const name = basename4(path5);
  const info = Deno.statSync(path5);
  return {
    path: path5,
    name,
    isFile: info.isFile,
    isDirectory: info.isDirectory,
    isSymlink: info.isSymlink
  };
}
async function createWalkEntry2(path5) {
  path5 = toPathString2(path5);
  path5 = normalize3(path5);
  const name = basename4(path5);
  const info = await Deno.stat(path5);
  return {
    path: path5,
    name,
    isFile: info.isFile,
    isDirectory: info.isDirectory,
    isSymlink: info.isSymlink
  };
}
var init_create_walk_entry = __esm({
  "https://jsr.io/@std/fs/1.0.8/_create_walk_entry.ts"() {
    init_basename4();
    init_normalize4();
    init_to_path_string();
  }
});

// https://jsr.io/@std/fs/1.0.8/walk.ts
var walk_exports = {};
__export(walk_exports, {
  walk: () => walk2,
  walkSync: () => walkSync
});
function include(path5, exts, match, skip) {
  if (exts && !exts.some((ext) => path5.endsWith(ext))) {
    return false;
  }
  if (match && !match.some((pattern) => !!path5.match(pattern))) {
    return false;
  }
  if (skip && skip.some((pattern) => !!path5.match(pattern))) {
    return false;
  }
  return true;
}
async function* walk2(root, options) {
  let {
    maxDepth = Infinity,
    includeFiles = true,
    includeDirs = true,
    includeSymlinks = true,
    followSymlinks = false,
    canonicalize = true,
    exts = void 0,
    match = void 0,
    skip = void 0
  } = options ?? {};
  if (maxDepth < 0) {
    return;
  }
  root = toPathString2(root);
  if (exts) {
    exts = exts.map((ext) => ext.startsWith(".") ? ext : `.${ext}`);
  }
  if (includeDirs && include(root, exts, match, skip)) {
    yield await createWalkEntry2(root);
  }
  if (maxDepth < 1 || !include(root, void 0, void 0, skip)) {
    return;
  }
  for await (const entry of Deno.readDir(root)) {
    let path5 = join4(root, entry.name);
    let { isSymlink, isDirectory } = entry;
    if (isSymlink) {
      if (!followSymlinks) {
        if (includeSymlinks && include(path5, exts, match, skip)) {
          yield { path: path5, ...entry };
        }
        continue;
      }
      const realPath = await Deno.realPath(path5);
      if (canonicalize) {
        path5 = realPath;
      }
      ({ isSymlink, isDirectory } = await Deno.lstat(realPath));
    }
    if (isSymlink || isDirectory) {
      const opts = {
        maxDepth: maxDepth - 1,
        includeFiles,
        includeDirs,
        includeSymlinks,
        followSymlinks
      };
      if (exts !== void 0) {
        opts.exts = exts;
      }
      if (match !== void 0) {
        opts.match = match;
      }
      if (skip !== void 0) {
        opts.skip = skip;
      }
      yield* walk2(path5, opts);
    } else if (includeFiles && include(path5, exts, match, skip)) {
      yield { path: path5, ...entry };
    }
  }
}
function* walkSync(root, options) {
  let {
    maxDepth = Infinity,
    includeFiles = true,
    includeDirs = true,
    includeSymlinks = true,
    followSymlinks = false,
    canonicalize = true,
    exts = void 0,
    match = void 0,
    skip = void 0
  } = options ?? {};
  root = toPathString2(root);
  if (exts) {
    exts = exts.map((ext) => ext.startsWith(".") ? ext : `.${ext}`);
  }
  if (maxDepth < 0) {
    return;
  }
  if (includeDirs && include(root, exts, match, skip)) {
    yield createWalkEntrySync2(root);
  }
  if (maxDepth < 1 || !include(root, void 0, void 0, skip)) {
    return;
  }
  const entries = Deno.readDirSync(root);
  for (const entry of entries) {
    let path5 = join4(root, entry.name);
    let { isSymlink, isDirectory } = entry;
    if (isSymlink) {
      if (!followSymlinks) {
        if (includeSymlinks && include(path5, exts, match, skip)) {
          yield { path: path5, ...entry };
        }
        continue;
      }
      const realPath = Deno.realPathSync(path5);
      if (canonicalize) {
        path5 = realPath;
      }
      ({ isSymlink, isDirectory } = Deno.lstatSync(realPath));
    }
    if (isSymlink || isDirectory) {
      const opts = {
        maxDepth: maxDepth - 1,
        includeFiles,
        includeDirs,
        includeSymlinks,
        followSymlinks
      };
      if (exts !== void 0) {
        opts.exts = exts;
      }
      if (match !== void 0) {
        opts.match = match;
      }
      if (skip !== void 0) {
        opts.skip = skip;
      }
      yield* walkSync(path5, opts);
    } else if (includeFiles && include(path5, exts, match, skip)) {
      yield { path: path5, ...entry };
    }
  }
}
var init_walk = __esm({
  "https://jsr.io/@std/fs/1.0.8/walk.ts"() {
    init_join3();
    init_to_path_string();
    init_create_walk_entry();
  }
});

// ../debuno-serve/src/deno.ts
var deno_exports = {};
__export(deno_exports, {
  ENV: () => ENV2,
  readDir: () => readDir3,
  readFile: () => readFile6,
  serve: () => serve2,
  symlink: () => symlink,
  writeFile: () => writeFile4
});
function serve2(options) {
  const { port, hostname } = options;
  const server = Deno.serve({
    port,
    hostname,
    handler: options.fetch,
    onListen: (addr) => options.onListen?.({
      port: addr.port,
      hostname: addr.hostname,
      url: new URL(`http://${toLocalhost(addr.hostname)}:${addr.port}`)
    }),
    onError(error) {
      options.onError?.(error);
      return Response.json({ error: error.message }, { status: 500 });
    },
    signal: options.signal
  });
  server.finished.then(() => {
    options.onClose?.();
  }).catch((error) => {
    options.onClose?.(error);
  });
  return server;
}
function symlink(target, path5) {
  return Deno.symlink(target, path5);
}
function readFile6(filePath) {
  return Deno.readFile(filePath.replace("file://", ""));
}
function writeFile4(filePath, data) {
  return Deno.writeFile(filePath.replace("file://", ""), typeof data === "string" ? new TextEncoder().encode(data) : data);
}
async function readDir3(dirPath) {
  const { walk: walk3 } = await Promise.resolve().then(() => (init_walk(), walk_exports));
  dirPath = dirPath.replace("file://", "");
  const dirs = await Array.fromAsync(walk3(dirPath));
  return dirs.filter((dir) => dir.isFile).map((file) => file.path.replace(dirPath, "")).map((filePath) => filePath.startsWith("/") ? filePath.slice(1) : filePath);
}
var ENV2;
var init_deno = __esm({
  "../debuno-serve/src/deno.ts"() {
    init_utils();
    ENV2 = "deno";
  }
});

// https://esm.sh/@whatwg-node/promise-helpers@1.2.1/denonext/promise-helpers.mjs
function a(e3) {
  return e3?.then != null;
}
function l(e3, t2, r3) {
  function f3() {
    let i2 = e3();
    return a(i2) ? i2.then(t2, r3) : t2(i2);
  }
  if (!r3) return f3();
  try {
    return f3();
  } catch (i2) {
    return r3(i2);
  }
}
function m(e3) {
  return a(e3) ? e3 : { then(t2) {
    if (t2) {
      let r3 = t2(e3);
      return a(r3) ? r3 : m(r3);
    }
    return this;
  }, catch() {
    return this;
  }, finally(t2) {
    if (t2) {
      let r3 = t2();
      return a(r3) ? r3.then(() => e3, () => e3) : m(e3);
    }
    return this;
  }, [Symbol.toStringTag]: "Promise" };
}
function P() {
  if (Promise.withResolvers) return Promise.withResolvers();
  let e3, t2;
  return { promise: new Promise(function(i2, o2) {
    e3 = i2, t2 = o2;
  }), get resolve() {
    return e3;
  }, get reject() {
    return t2;
  } };
}
function R(e3, t2, r3) {
  if (e3?.length === 0) return;
  let f3 = e3[Symbol.iterator](), i2 = 0;
  function o2() {
    let { done: s, value: h3 } = f3.next();
    if (s) return;
    let c3 = false;
    function n2() {
      c3 = true;
    }
    return l(() => t2(h3, n2, i2++), (u2) => {
      if (u2 && r3?.push(u2), !c3) return o2();
    });
  }
  return o2();
}
var init_promise_helpers = __esm({
  "https://esm.sh/@whatwg-node/promise-helpers@1.2.1/denonext/promise-helpers.mjs"() {
  }
});

// https://esm.sh/@whatwg-node/promise-helpers@1.2.1?target=denonext
var init_promise_helpers_1_2 = __esm({
  "https://esm.sh/@whatwg-node/promise-helpers@1.2.1?target=denonext"() {
    init_promise_helpers();
  }
});

// https://esm.sh/@whatwg-node/disposablestack@0.0.6/denonext/disposablestack.mjs
function i(e3) {
  return e3?.[o.dispose] != null;
}
function l2(e3) {
  return e3?.[o.asyncDispose] != null;
}
var t, o, b, a2, h, c, M, $, j;
var init_disposablestack = __esm({
  "https://esm.sh/@whatwg-node/disposablestack@0.0.6/denonext/disposablestack.mjs"() {
    init_promise_helpers_1_2();
    t = class extends Error {
      error;
      suppressed;
      constructor(s, r3, p3) {
        super(p3), this.error = s, this.suppressed = r3, this.name = "SuppressedError", Error.captureStackTrace(this, this.constructor);
      }
    };
    o = { get dispose() {
      return Symbol.dispose || Symbol.for("dispose");
    }, get asyncDispose() {
      return Symbol.asyncDispose || Symbol.for("asyncDispose");
    } };
    b = globalThis.SuppressedError || t;
    a2 = class e {
      callbacks = [];
      get disposed() {
        return this.callbacks.length === 0;
      }
      use(s) {
        return l2(s) ? this.callbacks.push(() => s[o.asyncDispose]()) : i(s) && this.callbacks.push(() => s[o.dispose]()), s;
      }
      adopt(s, r3) {
        return r3 && this.callbacks.push(() => r3(s)), s;
      }
      defer(s) {
        s && this.callbacks.push(s);
      }
      move() {
        let s = new e();
        return s.callbacks = this.callbacks, this.callbacks = [], s;
      }
      disposeAsync() {
        return this[o.asyncDispose]();
      }
      _error;
      _iterateCallbacks() {
        let s = this.callbacks.pop();
        if (s) return l(s, () => this._iterateCallbacks(), (r3) => (this._error = this._error ? new b(r3, this._error) : r3, this._iterateCallbacks()));
      }
      [o.asyncDispose]() {
        let s = this._iterateCallbacks();
        if (s?.then) return s.then(() => {
          if (this._error) {
            let r3 = this._error;
            throw this._error = void 0, r3;
          }
        });
        if (this._error) {
          let r3 = this._error;
          throw this._error = void 0, r3;
        }
      }
      [Symbol.toStringTag] = "AsyncDisposableStack";
    };
    h = globalThis.SuppressedError || t;
    c = class e2 {
      callbacks = [];
      get disposed() {
        return this.callbacks.length === 0;
      }
      use(s) {
        return i(s) && this.callbacks.push(() => s[o.dispose]()), s;
      }
      adopt(s, r3) {
        return r3 && this.callbacks.push(() => r3(s)), s;
      }
      defer(s) {
        s && this.callbacks.push(s);
      }
      move() {
        let s = new e2();
        return s.callbacks = this.callbacks, this.callbacks = [], s;
      }
      dispose() {
        return this[o.dispose]();
      }
      _error;
      _iterateCallbacks() {
        let s = this.callbacks.pop();
        if (s) {
          try {
            s();
          } catch (r3) {
            this._error = this._error ? new h(r3, this._error) : r3;
          }
          return this._iterateCallbacks();
        }
      }
      [o.dispose]() {
        if (this._iterateCallbacks(), this._error) {
          let s = this._error;
          throw this._error = void 0, s;
        }
      }
      [Symbol.toStringTag] = "DisposableStack";
    };
    M = globalThis.DisposableStack || c;
    $ = globalThis.AsyncDisposableStack || a2;
    j = globalThis.SuppressedError || t;
  }
});

// https://esm.sh/@whatwg-node/disposablestack@0.0.6?target=denonext
var init_disposablestack_0_0 = __esm({
  "https://esm.sh/@whatwg-node/disposablestack@0.0.6?target=denonext"() {
    init_promise_helpers_1_2();
    init_disposablestack();
  }
});

// https://esm.sh/streamsearch@1.1.0/denonext/streamsearch.mjs
import { Buffer as __Buffer$ } from "node:buffer";
var p, z, w, y, g, B, x, C, N, P2, f, M2;
var init_streamsearch = __esm({
  "https://esm.sh/streamsearch@1.1.0/denonext/streamsearch.mjs"() {
    p = Object.create;
    z = Object.defineProperty;
    w = Object.getOwnPropertyDescriptor;
    y = Object.getOwnPropertyNames;
    g = Object.getPrototypeOf;
    B = Object.prototype.hasOwnProperty;
    x = (o2, i2) => () => (i2 || o2((i2 = { exports: {} }).exports, i2), i2.exports);
    C = (o2, i2, n2, e3) => {
      if (i2 && typeof i2 == "object" || typeof i2 == "function") for (let h3 of y(i2)) !B.call(o2, h3) && h3 !== n2 && z(o2, h3, { get: () => i2[h3], enumerable: !(e3 = w(i2, h3)) || e3.enumerable });
      return o2;
    };
    N = (o2, i2, n2) => (n2 = o2 != null ? p(g(o2)) : {}, C(i2 || !o2 || !o2.__esModule ? z(n2, "default", { value: o2, enumerable: true }) : n2, o2));
    P2 = x((j4, a3) => {
      "use strict";
      function m3(o2, i2, n2, e3, h3) {
        for (let t2 = 0; t2 < h3; ++t2) if (o2[i2 + t2] !== n2[e3 + t2]) return false;
        return true;
      }
      var _3 = class {
        constructor(i2, n2) {
          if (typeof n2 != "function") throw new Error("Missing match callback");
          if (typeof i2 == "string") i2 = __Buffer$.from(i2);
          else if (!__Buffer$.isBuffer(i2)) throw new Error(`Expected Buffer for needle, got ${typeof i2}`);
          let e3 = i2.length;
          if (this.maxMatches = 1 / 0, this.matches = 0, this._cb = n2, this._lookbehindSize = 0, this._needle = i2, this._bufPos = 0, this._lookbehind = __Buffer$.allocUnsafe(e3), this._occ = [e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3, e3], e3 > 1) for (let h3 = 0; h3 < e3 - 1; ++h3) this._occ[i2[h3]] = e3 - 1 - h3;
        }
        reset() {
          this.matches = 0, this._lookbehindSize = 0, this._bufPos = 0;
        }
        push(i2, n2) {
          let e3;
          __Buffer$.isBuffer(i2) || (i2 = __Buffer$.from(i2, "latin1"));
          let h3 = i2.length;
          for (this._bufPos = n2 || 0; e3 !== h3 && this.matches < this.maxMatches; ) e3 = E2(this, i2);
          return e3;
        }
        destroy() {
          let i2 = this._lookbehindSize;
          i2 && this._cb(false, this._lookbehind, 0, i2, false), this.reset();
        }
      };
      function E2(o2, i2) {
        let n2 = i2.length, e3 = o2._needle, h3 = e3.length, t2 = -o2._lookbehindSize, s = h3 - 1, u2 = e3[s], b4 = n2 - h3, l3 = o2._occ, c3 = o2._lookbehind;
        if (t2 < 0) {
          for (; t2 < 0 && t2 <= b4; ) {
            let r3 = t2 + s, k3 = r3 < 0 ? c3[o2._lookbehindSize + r3] : i2[r3];
            if (k3 === u2 && S3(o2, i2, t2, s)) return o2._lookbehindSize = 0, ++o2.matches, t2 > -o2._lookbehindSize ? o2._cb(true, c3, 0, o2._lookbehindSize + t2, false) : o2._cb(true, void 0, 0, 0, true), o2._bufPos = t2 + h3;
            t2 += l3[k3];
          }
          for (; t2 < 0 && !S3(o2, i2, t2, n2 - t2); ) ++t2;
          if (t2 < 0) {
            let r3 = o2._lookbehindSize + t2;
            return r3 > 0 && o2._cb(false, c3, 0, r3, false), o2._lookbehindSize -= r3, c3.copy(c3, 0, r3, o2._lookbehindSize), c3.set(i2, o2._lookbehindSize), o2._lookbehindSize += n2, o2._bufPos = n2, n2;
          }
          o2._cb(false, c3, 0, o2._lookbehindSize, false), o2._lookbehindSize = 0;
        }
        t2 += o2._bufPos;
        let d3 = e3[0];
        for (; t2 <= b4; ) {
          let r3 = i2[t2 + s];
          if (r3 === u2 && i2[t2] === d3 && m3(e3, 0, i2, t2, s)) return ++o2.matches, t2 > 0 ? o2._cb(true, i2, o2._bufPos, t2, true) : o2._cb(true, void 0, 0, 0, true), o2._bufPos = t2 + h3;
          t2 += l3[r3];
        }
        for (; t2 < n2; ) {
          if (i2[t2] !== d3 || !m3(i2, t2, e3, 0, n2 - t2)) {
            ++t2;
            continue;
          }
          i2.copy(c3, 0, t2, n2), o2._lookbehindSize = n2 - t2;
          break;
        }
        return t2 > 0 && o2._cb(false, i2, o2._bufPos, t2 < n2 ? t2 : n2, true), o2._bufPos = n2, n2;
      }
      function S3(o2, i2, n2, e3) {
        let h3 = o2._lookbehind, t2 = o2._lookbehindSize, s = o2._needle;
        for (let u2 = 0; u2 < e3; ++u2, ++n2) if ((n2 < 0 ? h3[t2 + n2] : i2[n2]) !== s[u2]) return false;
        return true;
      }
      a3.exports = _3;
    });
    f = N(P2());
    M2 = f.default ?? f;
  }
});

// https://esm.sh/streamsearch@1.1.0?target=denonext
var streamsearch_1_1_exports = {};
__export(streamsearch_1_1_exports, {
  default: () => M2
});
var init_streamsearch_1_1 = __esm({
  "https://esm.sh/streamsearch@1.1.0?target=denonext"() {
    init_streamsearch();
    init_streamsearch();
  }
});

// https://esm.sh/busboy@1.6.0/denonext/busboy.mjs
import __Process$ from "node:process";
import { Buffer as __Buffer$2 } from "node:buffer";
import * as __0$ from "node:stream";
var require2, w1, e1, S1, g1, k1, P1, H, D, T1, v1, B2, m1, b1, C1, X, se;
var init_busboy = __esm({
  "https://esm.sh/busboy@1.6.0/denonext/busboy.mjs"() {
    init_streamsearch_1_1();
    require2 = (n2) => {
      const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3, c3 = (m3) => Object.assign({ __esModule: true }, m3);
      switch (n2) {
        case "node:stream":
          return e3(__0$);
        case "streamsearch":
          return e3(streamsearch_1_1_exports);
        default:
          console.error('module "' + n2 + '" not found');
          return null;
      }
    };
    w1 = Object.create;
    e1 = Object.defineProperty;
    S1 = Object.getOwnPropertyDescriptor;
    g1 = Object.getOwnPropertyNames;
    k1 = Object.getPrototypeOf;
    P1 = Object.prototype.hasOwnProperty;
    H = ((t2) => typeof require2 < "u" ? require2 : typeof Proxy < "u" ? new Proxy(t2, { get: (e3, i2) => (typeof require2 < "u" ? require2 : e3)[i2] }) : t2)(function(t2) {
      if (typeof require2 < "u") return require2.apply(this, arguments);
      throw Error('Dynamic require of "' + t2 + '" is not supported');
    });
    D = (t2, e3) => () => (e3 || t2((e3 = { exports: {} }).exports, e3), e3.exports);
    T1 = (t2, e3, i2, s) => {
      if (e3 && typeof e3 == "object" || typeof e3 == "function") for (let r3 of g1(e3)) !P1.call(t2, r3) && r3 !== i2 && e1(t2, r3, { get: () => e3[r3], enumerable: !(s = S1(e3, r3)) || s.enumerable });
      return t2;
    };
    v1 = (t2, e3, i2) => (i2 = t2 != null ? w1(k1(t2)) : {}, T1(e3 || !t2 || !t2.__esModule ? e1(i2, "default", { value: t2, enumerable: true }) : i2, t2));
    B2 = D((n1, a1) => {
      "use strict";
      function E1(t2) {
        if (t2.length === 0) return;
        let e3 = /* @__PURE__ */ Object.create(null), i2 = 0;
        for (; i2 < t2.length; ++i2) {
          let a3 = t2.charCodeAt(i2);
          if (S3[a3] !== 1) {
            if (a3 !== 47 || i2 === 0) return;
            break;
          }
        }
        if (i2 === t2.length) return;
        let s = t2.slice(0, i2).toLowerCase(), r3 = ++i2;
        for (; i2 < t2.length; ++i2) {
          let a3 = t2.charCodeAt(i2);
          if (S3[a3] !== 1) {
            if (i2 === r3 || L1(t2, i2, e3) === void 0) return;
            break;
          }
        }
        if (i2 === r3) return;
        let n2 = t2.slice(r3, i2).toLowerCase();
        return { type: s, subtype: n2, params: e3 };
      }
      function L1(t2, e3, i2) {
        for (; e3 < t2.length; ) {
          for (; e3 < t2.length; ++e3) {
            let l3 = t2.charCodeAt(e3);
            if (l3 !== 32 && l3 !== 9) break;
          }
          if (e3 === t2.length) break;
          if (t2.charCodeAt(e3++) !== 59) return;
          for (; e3 < t2.length; ++e3) {
            let l3 = t2.charCodeAt(e3);
            if (l3 !== 32 && l3 !== 9) break;
          }
          if (e3 === t2.length) return;
          let s, r3 = e3;
          for (; e3 < t2.length; ++e3) {
            let l3 = t2.charCodeAt(e3);
            if (S3[l3] !== 1) {
              if (l3 !== 61) return;
              break;
            }
          }
          if (e3 === t2.length || (s = t2.slice(r3, e3), ++e3, e3 === t2.length)) return;
          let n2 = "", a3;
          if (t2.charCodeAt(e3) === 34) {
            a3 = ++e3;
            let l3 = false;
            for (; e3 < t2.length; ++e3) {
              let c3 = t2.charCodeAt(e3);
              if (c3 === 92) {
                l3 ? (a3 = e3, l3 = false) : (n2 += t2.slice(a3, e3), l3 = true);
                continue;
              }
              if (c3 === 34) {
                if (l3) {
                  a3 = e3, l3 = false;
                  continue;
                }
                n2 += t2.slice(a3, e3);
                break;
              }
              if (l3 && (a3 = e3 - 1, l3 = false), s1[c3] !== 1) return;
            }
            if (e3 === t2.length) return;
            ++e3;
          } else {
            for (a3 = e3; e3 < t2.length; ++e3) {
              let l3 = t2.charCodeAt(e3);
              if (S3[l3] !== 1) {
                if (e3 === a3) return;
                break;
              }
            }
            n2 = t2.slice(a3, e3);
          }
          s = s.toLowerCase(), i2[s] === void 0 && (i2[s] = n2);
        }
        return i2;
      }
      function A1(t2, e3) {
        if (t2.length === 0) return;
        let i2 = /* @__PURE__ */ Object.create(null), s = 0;
        for (; s < t2.length; ++s) {
          let n2 = t2.charCodeAt(s);
          if (S3[n2] !== 1) {
            if (x1(t2, s, i2, e3) === void 0) return;
            break;
          }
        }
        return { type: t2.slice(0, s).toLowerCase(), params: i2 };
      }
      function x1(t2, e3, i2, s) {
        for (; e3 < t2.length; ) {
          for (; e3 < t2.length; ++e3) {
            let h3 = t2.charCodeAt(e3);
            if (h3 !== 32 && h3 !== 9) break;
          }
          if (e3 === t2.length) break;
          if (t2.charCodeAt(e3++) !== 59) return;
          for (; e3 < t2.length; ++e3) {
            let h3 = t2.charCodeAt(e3);
            if (h3 !== 32 && h3 !== 9) break;
          }
          if (e3 === t2.length) return;
          let r3, n2 = e3;
          for (; e3 < t2.length; ++e3) {
            let h3 = t2.charCodeAt(e3);
            if (S3[h3] !== 1) {
              if (h3 === 61) break;
              return;
            }
          }
          if (e3 === t2.length) return;
          let a3 = "", l3, c3;
          if (r3 = t2.slice(n2, e3), r3.charCodeAt(r3.length - 1) === 42) {
            let h3 = ++e3;
            for (; e3 < t2.length; ++e3) {
              let b4 = t2.charCodeAt(e3);
              if (K1[b4] !== 1) {
                if (b4 !== 39) return;
                break;
              }
            }
            if (e3 === t2.length) return;
            for (c3 = t2.slice(h3, e3), ++e3; e3 < t2.length && t2.charCodeAt(e3) !== 39; ++e3) ;
            if (e3 === t2.length || (++e3, e3 === t2.length)) return;
            l3 = e3;
            let _3 = 0;
            for (; e3 < t2.length; ++e3) {
              let b4 = t2.charCodeAt(e3);
              if (D1[b4] !== 1) {
                if (b4 === 37) {
                  let L5, P4;
                  if (e3 + 2 < t2.length && (L5 = t1[t2.charCodeAt(e3 + 1)]) !== -1 && (P4 = t1[t2.charCodeAt(e3 + 2)]) !== -1) {
                    let T2 = (L5 << 4) + P4;
                    a3 += t2.slice(l3, e3), a3 += String.fromCharCode(T2), e3 += 2, l3 = e3 + 1, T2 >= 128 ? _3 = 2 : _3 === 0 && (_3 = 1);
                    continue;
                  }
                  return;
                }
                break;
              }
            }
            if (a3 += t2.slice(l3, e3), a3 = r1(a3, c3, _3), a3 === void 0) return;
          } else {
            if (++e3, e3 === t2.length) return;
            if (t2.charCodeAt(e3) === 34) {
              l3 = ++e3;
              let h3 = false;
              for (; e3 < t2.length; ++e3) {
                let _3 = t2.charCodeAt(e3);
                if (_3 === 92) {
                  h3 ? (l3 = e3, h3 = false) : (a3 += t2.slice(l3, e3), h3 = true);
                  continue;
                }
                if (_3 === 34) {
                  if (h3) {
                    l3 = e3, h3 = false;
                    continue;
                  }
                  a3 += t2.slice(l3, e3);
                  break;
                }
                if (h3 && (l3 = e3 - 1, h3 = false), s1[_3] !== 1) return;
              }
              if (e3 === t2.length) return;
              ++e3;
            } else {
              for (l3 = e3; e3 < t2.length; ++e3) {
                let h3 = t2.charCodeAt(e3);
                if (S3[h3] !== 1) {
                  if (e3 === l3) return;
                  break;
                }
              }
              a3 = t2.slice(l3, e3);
            }
            if (a3 = s(a3, 2), a3 === void 0) return;
          }
          r3 = r3.toLowerCase(), i2[r3] === void 0 && (i2[r3] = a3);
        }
        return i2;
      }
      function i1(t2) {
        let e3;
        for (; ; ) switch (t2) {
          case "utf-8":
          case "utf8":
            return E2.utf8;
          case "latin1":
          case "ascii":
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return E2.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return E2.utf16le;
          case "base64":
            return E2.base64;
          default:
            if (e3 === void 0) {
              e3 = true, t2 = t2.toLowerCase();
              continue;
            }
            return E2.other.bind(t2);
        }
      }
      var E2 = { utf8: (t2, e3) => {
        if (t2.length === 0) return "";
        if (typeof t2 == "string") {
          if (e3 < 2) return t2;
          t2 = __Buffer$2.from(t2, "latin1");
        }
        return t2.utf8Slice(0, t2.length);
      }, latin1: (t2, e3) => t2.length === 0 ? "" : typeof t2 == "string" ? t2 : t2.latin1Slice(0, t2.length), utf16le: (t2, e3) => t2.length === 0 ? "" : (typeof t2 == "string" && (t2 = __Buffer$2.from(t2, "latin1")), t2.ucs2Slice(0, t2.length)), base64: (t2, e3) => t2.length === 0 ? "" : (typeof t2 == "string" && (t2 = __Buffer$2.from(t2, "latin1")), t2.base64Slice(0, t2.length)), other: (t2, e3) => {
        if (t2.length === 0) return "";
        typeof t2 == "string" && (t2 = __Buffer$2.from(t2, "latin1"));
        try {
          return new TextDecoder(n1).decode(t2);
        } catch {
        }
      } };
      function r1(t2, e3, i2) {
        let s = i1(e3);
        if (s) return s(t2, i2);
      }
      function M1(t2) {
        if (typeof t2 != "string") return "";
        for (let e3 = t2.length - 1; e3 >= 0; --e3) switch (t2.charCodeAt(e3)) {
          case 47:
          case 92:
            return t2 = t2.slice(e3 + 1), t2 === ".." || t2 === "." ? "" : t2;
        }
        return t2 === ".." || t2 === "." ? "" : t2;
      }
      var S3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], s1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], K1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], D1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], t1 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
      a1.exports = { basename: M1, convertToUTF8: r1, getDecoder: i1, parseContentType: E1, parseDisposition: A1 };
    });
    m1 = D((te4, _1) => {
      "use strict";
      var { Readable: B1, Writable: U1 } = H("node:stream"), V1 = H("streamsearch"), { basename: z1, convertToUTF8: l1, getDecoder: H1, parseContentType: R1, parseDisposition: W1 } = B2(), O1 = __Buffer$2.from(`\r
`), F1 = __Buffer$2.from("\r"), I1 = __Buffer$2.from("-");
      function f1() {
      }
      var N1 = 2e3, k3 = 16 * 1024, U3 = 0, o1 = 1, h1 = 2, R3 = class {
        constructor(e3) {
          this.header = /* @__PURE__ */ Object.create(null), this.pairCount = 0, this.byteCount = 0, this.state = U3, this.name = "", this.value = "", this.crlf = 0, this.cb = e3;
        }
        reset() {
          this.header = /* @__PURE__ */ Object.create(null), this.pairCount = 0, this.byteCount = 0, this.state = U3, this.name = "", this.value = "", this.crlf = 0;
        }
        push(e3, i2, s) {
          let r3 = i2;
          for (; i2 < s; ) switch (this.state) {
            case U3: {
              let n2 = false;
              for (; i2 < s; ++i2) {
                if (this.byteCount === k3) return -1;
                ++this.byteCount;
                let a3 = e3[i2];
                if (X1[a3] !== 1) {
                  if (a3 !== 58 || (this.name += e3.latin1Slice(r3, i2), this.name.length === 0)) return -1;
                  ++i2, n2 = true, this.state = o1;
                  break;
                }
              }
              if (!n2) {
                this.name += e3.latin1Slice(r3, i2);
                break;
              }
            }
            case o1: {
              let n2 = false;
              for (; i2 < s; ++i2) {
                if (this.byteCount === k3) return -1;
                ++this.byteCount;
                let a3 = e3[i2];
                if (a3 !== 32 && a3 !== 9) {
                  r3 = i2, n2 = true, this.state = h1;
                  break;
                }
              }
              if (!n2) break;
            }
            case h1:
              switch (this.crlf) {
                case 0:
                  for (; i2 < s; ++i2) {
                    if (this.byteCount === k3) return -1;
                    ++this.byteCount;
                    let n2 = e3[i2];
                    if ($1[n2] !== 1) {
                      if (n2 !== 13) return -1;
                      ++this.crlf;
                      break;
                    }
                  }
                  this.value += e3.latin1Slice(r3, i2++);
                  break;
                case 1:
                  if (this.byteCount === k3 || (++this.byteCount, e3[i2++] !== 10)) return -1;
                  ++this.crlf;
                  break;
                case 2: {
                  if (this.byteCount === k3) return -1;
                  ++this.byteCount;
                  let n2 = e3[i2];
                  n2 === 32 || n2 === 9 ? (r3 = i2, this.crlf = 0) : (++this.pairCount < N1 && (this.name = this.name.toLowerCase(), this.header[this.name] === void 0 ? this.header[this.name] = [this.value] : this.header[this.name].push(this.value)), n2 === 13 ? (++this.crlf, ++i2) : (r3 = i2, this.crlf = 0, this.state = U3, this.name = "", this.value = ""));
                  break;
                }
                case 3: {
                  if (this.byteCount === k3 || (++this.byteCount, e3[i2++] !== 10)) return -1;
                  let n2 = this.header;
                  return this.reset(), this.cb(n2), i2;
                }
              }
              break;
          }
          return i2;
        }
      }, W4 = class extends B1 {
        constructor(e3, i2) {
          super(e3), this.truncated = false, this._readcb = null, this.once("end", () => {
            if (this._read(), --i2._fileEndsLeft === 0 && i2._finalcb) {
              let s = i2._finalcb;
              i2._finalcb = null, __Process$.nextTick(s);
            }
          });
        }
        _read(e3) {
          let i2 = this._readcb;
          i2 && (this._readcb = null, i2());
        }
      }, c1 = { push: (t2, e3) => {
      }, destroy: () => {
      } };
      function j1(t2, e3) {
        let i2 = t2._writecb;
        t2._writecb = null, e3 ? t2.destroy(e3) : i2 && i2();
      }
      function q1(t2, e3) {
        return t2;
      }
      var O3 = class extends U1 {
        constructor(e3) {
          let i2 = { autoDestroy: true, emitClose: true, highWaterMark: typeof e3.highWaterMark == "number" ? e3.highWaterMark : void 0 };
          if (super(i2), !e3.conType.params || typeof e3.conType.params.boundary != "string") throw new Error("Multipart: Boundary not found");
          let s = e3.conType.params.boundary, r3 = typeof e3.defParamCharset == "string" && e3.defParamCharset ? H1(e3.defParamCharset) : q1, n2 = e3.defCharset || "utf8", a3 = e3.preservePath, l3 = { autoDestroy: true, emitClose: true, highWaterMark: typeof e3.fileHwm == "number" ? e3.fileHwm : void 0 }, c3 = e3.limits, h3 = c3 && typeof c3.fieldSize == "number" ? c3.fieldSize : 1 * 1024 * 1024, _3 = c3 && typeof c3.fileSize == "number" ? c3.fileSize : 1 / 0, b4 = c3 && typeof c3.files == "number" ? c3.files : 1 / 0, L5 = c3 && typeof c3.fields == "number" ? c3.fields : 1 / 0, P4 = c3 && typeof c3.parts == "number" ? c3.parts : 1 / 0, T2 = -1, $6 = 0, Q4 = 0, m3 = false;
          this._fileEndsLeft = 0, this._fileStream = void 0, this._complete = false;
          let A4 = 0, p3, g4 = 0, x5, M6, v3, K5, V4 = false, Y5 = false, Z4 = false;
          this._hparser = null;
          let G4 = new R3((C3) => {
            this._hparser = null, m3 = false, v3 = "text/plain", x5 = n2, M6 = "7bit", K5 = void 0, V4 = false;
            let u2;
            if (!C3["content-disposition"]) {
              m3 = true;
              return;
            }
            let f3 = W1(C3["content-disposition"][0], r3);
            if (!f3 || f3.type !== "form-data") {
              m3 = true;
              return;
            }
            if (f3.params && (f3.params.name && (K5 = f3.params.name), f3.params["filename*"] ? u2 = f3.params["filename*"] : f3.params.filename && (u2 = f3.params.filename), u2 !== void 0 && !a3 && (u2 = z1(u2))), C3["content-type"]) {
              let d3 = R1(C3["content-type"][0]);
              d3 && (v3 = `${d3.type}/${d3.subtype}`, d3.params && typeof d3.params.charset == "string" && (x5 = d3.params.charset.toLowerCase()));
            }
            if (C3["content-transfer-encoding"] && (M6 = C3["content-transfer-encoding"][0].toLowerCase()), v3 === "application/octet-stream" || u2 !== void 0) {
              if (Q4 === b4) {
                Y5 || (Y5 = true, this.emit("filesLimit")), m3 = true;
                return;
              }
              if (++Q4, this.listenerCount("file") === 0) {
                m3 = true;
                return;
              }
              A4 = 0, this._fileStream = new W4(l3, this), ++this._fileEndsLeft, this.emit("file", K5, this._fileStream, { filename: u2, encoding: M6, mimeType: v3 });
            } else {
              if ($6 === L5) {
                Z4 || (Z4 = true, this.emit("fieldsLimit")), m3 = true;
                return;
              }
              if (++$6, this.listenerCount("field") === 0) {
                m3 = true;
                return;
              }
              p3 = [], g4 = 0;
            }
          }), y4 = 0, z4 = (C3, u2, f3, d3, J4) => {
            e: for (; u2; ) {
              if (this._hparser !== null) {
                let o2 = this._hparser.push(u2, f3, d3);
                if (o2 === -1) {
                  this._hparser = null, G4.reset(), this.emit("error", new Error("Malformed part header"));
                  break;
                }
                f3 = o2;
              }
              if (f3 === d3) break;
              if (y4 !== 0) {
                if (y4 === 1) {
                  switch (u2[f3]) {
                    case 45:
                      y4 = 2, ++f3;
                      break;
                    case 13:
                      y4 = 3, ++f3;
                      break;
                    default:
                      y4 = 0;
                  }
                  if (f3 === d3) return;
                }
                if (y4 === 2) {
                  if (y4 = 0, u2[f3] === 45) {
                    this._complete = true, this._bparser = c1;
                    return;
                  }
                  let o2 = this._writecb;
                  this._writecb = f1, z4(false, I1, 0, 1, false), this._writecb = o2;
                } else if (y4 === 3) if (y4 = 0, u2[f3] === 10) {
                  if (++f3, T2 >= P4 || (this._hparser = G4, f3 === d3)) break;
                  continue e;
                } else {
                  let o2 = this._writecb;
                  this._writecb = f1, z4(false, F1, 0, 1, false), this._writecb = o2;
                }
              }
              if (!m3) {
                if (this._fileStream) {
                  let o2, w4 = Math.min(d3 - f3, _3 - A4);
                  J4 ? o2 = u2.slice(f3, f3 + w4) : (o2 = __Buffer$2.allocUnsafe(w4), u2.copy(o2, 0, f3, f3 + w4)), A4 += o2.length, A4 === _3 ? (o2.length > 0 && this._fileStream.push(o2), this._fileStream.emit("limit"), this._fileStream.truncated = true, m3 = true) : this._fileStream.push(o2) || (this._writecb && (this._fileStream._readcb = this._writecb), this._writecb = null);
                } else if (p3 !== void 0) {
                  let o2, w4 = Math.min(d3 - f3, h3 - g4);
                  J4 ? o2 = u2.slice(f3, f3 + w4) : (o2 = __Buffer$2.allocUnsafe(w4), u2.copy(o2, 0, f3, f3 + w4)), g4 += w4, p3.push(o2), g4 === h3 && (m3 = true, V4 = true);
                }
              }
              break;
            }
            if (C3) {
              if (y4 = 1, this._fileStream) this._fileStream.push(null), this._fileStream = null;
              else if (p3 !== void 0) {
                let o2;
                switch (p3.length) {
                  case 0:
                    o2 = "";
                    break;
                  case 1:
                    o2 = l1(p3[0], x5, 0);
                    break;
                  default:
                    o2 = l1(__Buffer$2.concat(p3, g4), x5, 0);
                }
                p3 = void 0, g4 = 0, this.emit("field", K5, o2, { nameTruncated: false, valueTruncated: V4, encoding: M6, mimeType: v3 });
              }
              ++T2 === P4 && this.emit("partsLimit");
            }
          };
          this._bparser = new V1(`\r
--${s}`, z4), this._writecb = null, this._finalcb = null, this.write(O1);
        }
        static detect(e3) {
          return e3.type === "multipart" && e3.subtype === "form-data";
        }
        _write(e3, i2, s) {
          this._writecb = s, this._bparser.push(e3, 0), this._writecb && j1(this);
        }
        _destroy(e3, i2) {
          this._hparser = null, this._bparser = c1, e3 || (e3 = d1(this));
          let s = this._fileStream;
          s && (this._fileStream = null, s.destroy(e3)), i2(e3);
        }
        _final(e3) {
          if (this._bparser.destroy(), !this._complete) return e3(new Error("Unexpected end of form"));
          this._fileEndsLeft ? this._finalcb = u1.bind(null, this, e3) : u1(this, e3);
        }
      };
      function u1(t2, e3, i2) {
        if (i2) return e3(i2);
        i2 = d1(t2), e3(i2);
      }
      function d1(t2) {
        if (t2._hparser) return new Error("Malformed part header");
        let e3 = t2._fileStream;
        if (e3 && (t2._fileStream = null, e3.destroy(new Error("Unexpected end of file"))), !t2._complete) return new Error("Unexpected end of form");
      }
      var X1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], $1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
      _1.exports = O3;
    });
    b1 = D((ie3, y1) => {
      "use strict";
      var { Writable: Q1 } = H("node:stream"), { getDecoder: Y1 } = B2(), q4 = class extends Q1 {
        constructor(e3) {
          let i2 = { autoDestroy: true, emitClose: true, highWaterMark: typeof e3.highWaterMark == "number" ? e3.highWaterMark : void 0 };
          super(i2);
          let s = e3.defCharset || "utf8";
          e3.conType.params && typeof e3.conType.params.charset == "string" && (s = e3.conType.params.charset), this.charset = s;
          let r3 = e3.limits;
          this.fieldSizeLimit = r3 && typeof r3.fieldSize == "number" ? r3.fieldSize : 1 * 1024 * 1024, this.fieldsLimit = r3 && typeof r3.fields == "number" ? r3.fields : 1 / 0, this.fieldNameSizeLimit = r3 && typeof r3.fieldNameSize == "number" ? r3.fieldNameSize : 100, this._inKey = true, this._keyTrunc = false, this._valTrunc = false, this._bytesKey = 0, this._bytesVal = 0, this._fields = 0, this._key = "", this._val = "", this._byte = -2, this._lastPos = 0, this._encode = 0, this._decoder = Y1(s);
        }
        static detect(e3) {
          return e3.type === "application" && e3.subtype === "x-www-form-urlencoded";
        }
        _write(e3, i2, s) {
          if (this._fields >= this.fieldsLimit) return s();
          let r3 = 0, n2 = e3.length;
          if (this._lastPos = 0, this._byte !== -2) {
            if (r3 = F3(this, e3, r3, n2), r3 === -1) return s(new Error("Malformed urlencoded form"));
            if (r3 >= n2) return s();
            this._inKey ? ++this._bytesKey : ++this._bytesVal;
          }
          e: for (; r3 < n2; ) if (this._inKey) {
            for (r3 = I4(this, e3, r3, n2); r3 < n2; ) {
              switch (e3[r3]) {
                case 61:
                  this._lastPos < r3 && (this._key += e3.latin1Slice(this._lastPos, r3)), this._lastPos = ++r3, this._key = this._decoder(this._key, this._encode), this._encode = 0, this._inKey = false;
                  continue e;
                case 38:
                  if (this._lastPos < r3 && (this._key += e3.latin1Slice(this._lastPos, r3)), this._lastPos = ++r3, this._key = this._decoder(this._key, this._encode), this._encode = 0, this._bytesKey > 0 && this.emit("field", this._key, "", { nameTruncated: this._keyTrunc, valueTruncated: false, encoding: this.charset, mimeType: "text/plain" }), this._key = "", this._val = "", this._keyTrunc = false, this._valTrunc = false, this._bytesKey = 0, this._bytesVal = 0, ++this._fields >= this.fieldsLimit) return this.emit("fieldsLimit"), s();
                  continue;
                case 43:
                  this._lastPos < r3 && (this._key += e3.latin1Slice(this._lastPos, r3)), this._key += " ", this._lastPos = r3 + 1;
                  break;
                case 37:
                  if (this._encode === 0 && (this._encode = 1), this._lastPos < r3 && (this._key += e3.latin1Slice(this._lastPos, r3)), this._lastPos = r3 + 1, this._byte = -1, r3 = F3(this, e3, r3 + 1, n2), r3 === -1) return s(new Error("Malformed urlencoded form"));
                  if (r3 >= n2) return s();
                  ++this._bytesKey, r3 = I4(this, e3, r3, n2);
                  continue;
              }
              ++r3, ++this._bytesKey, r3 = I4(this, e3, r3, n2);
            }
            this._lastPos < r3 && (this._key += e3.latin1Slice(this._lastPos, r3));
          } else {
            for (r3 = N5(this, e3, r3, n2); r3 < n2; ) {
              switch (e3[r3]) {
                case 38:
                  if (this._lastPos < r3 && (this._val += e3.latin1Slice(this._lastPos, r3)), this._lastPos = ++r3, this._inKey = true, this._val = this._decoder(this._val, this._encode), this._encode = 0, (this._bytesKey > 0 || this._bytesVal > 0) && this.emit("field", this._key, this._val, { nameTruncated: this._keyTrunc, valueTruncated: this._valTrunc, encoding: this.charset, mimeType: "text/plain" }), this._key = "", this._val = "", this._keyTrunc = false, this._valTrunc = false, this._bytesKey = 0, this._bytesVal = 0, ++this._fields >= this.fieldsLimit) return this.emit("fieldsLimit"), s();
                  continue e;
                case 43:
                  this._lastPos < r3 && (this._val += e3.latin1Slice(this._lastPos, r3)), this._val += " ", this._lastPos = r3 + 1;
                  break;
                case 37:
                  if (this._encode === 0 && (this._encode = 1), this._lastPos < r3 && (this._val += e3.latin1Slice(this._lastPos, r3)), this._lastPos = r3 + 1, this._byte = -1, r3 = F3(this, e3, r3 + 1, n2), r3 === -1) return s(new Error("Malformed urlencoded form"));
                  if (r3 >= n2) return s();
                  ++this._bytesVal, r3 = N5(this, e3, r3, n2);
                  continue;
              }
              ++r3, ++this._bytesVal, r3 = N5(this, e3, r3, n2);
            }
            this._lastPos < r3 && (this._val += e3.latin1Slice(this._lastPos, r3));
          }
          s();
        }
        _final(e3) {
          if (this._byte !== -2) return e3(new Error("Malformed urlencoded form"));
          (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) && (this._inKey ? this._key = this._decoder(this._key, this._encode) : this._val = this._decoder(this._val, this._encode), this.emit("field", this._key, this._val, { nameTruncated: this._keyTrunc, valueTruncated: this._valTrunc, encoding: this.charset, mimeType: "text/plain" })), e3();
        }
      };
      function F3(t2, e3, i2, s) {
        if (i2 >= s) return s;
        if (t2._byte === -1) {
          let r3 = j4[e3[i2++]];
          if (r3 === -1) return -1;
          if (r3 >= 8 && (t2._encode = 2), i2 < s) {
            let n2 = j4[e3[i2++]];
            if (n2 === -1) return -1;
            t2._inKey ? t2._key += String.fromCharCode((r3 << 4) + n2) : t2._val += String.fromCharCode((r3 << 4) + n2), t2._byte = -2, t2._lastPos = i2;
          } else t2._byte = r3;
        } else {
          let r3 = j4[e3[i2++]];
          if (r3 === -1) return -1;
          t2._inKey ? t2._key += String.fromCharCode((t2._byte << 4) + r3) : t2._val += String.fromCharCode((t2._byte << 4) + r3), t2._byte = -2, t2._lastPos = i2;
        }
        return i2;
      }
      function I4(t2, e3, i2, s) {
        if (t2._bytesKey > t2.fieldNameSizeLimit) {
          for (t2._keyTrunc || t2._lastPos < i2 && (t2._key += e3.latin1Slice(t2._lastPos, i2 - 1)), t2._keyTrunc = true; i2 < s; ++i2) {
            let r3 = e3[i2];
            if (r3 === 61 || r3 === 38) break;
            ++t2._bytesKey;
          }
          t2._lastPos = i2;
        }
        return i2;
      }
      function N5(t2, e3, i2, s) {
        if (t2._bytesVal > t2.fieldSizeLimit) {
          for (t2._valTrunc || t2._lastPos < i2 && (t2._val += e3.latin1Slice(t2._lastPos, i2 - 1)), t2._valTrunc = true; i2 < s && e3[i2] !== 38; ++i2) ++t2._bytesVal;
          t2._lastPos = i2;
        }
        return i2;
      }
      var j4 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
      y1.exports = q4;
    });
    C1 = D((re4, p1) => {
      "use strict";
      var { parseContentType: Z1 } = B2();
      function G1(t2) {
        let e3 = t2.headers, i2 = Z1(e3["content-type"]);
        if (!i2) throw new Error("Malformed content type");
        for (let s of J1) {
          if (!s.detect(i2)) continue;
          let n2 = { limits: t2.limits, headers: e3, conType: i2, highWaterMark: void 0, fileHwm: void 0, defCharset: void 0, defParamCharset: void 0, preservePath: false };
          return t2.highWaterMark && (n2.highWaterMark = t2.highWaterMark), t2.fileHwm && (n2.fileHwm = t2.fileHwm), n2.defCharset = t2.defCharset, n2.defParamCharset = t2.defParamCharset, n2.preservePath = t2.preservePath, new s(n2);
        }
        throw new Error(`Unsupported content type: ${e3["content-type"]}`);
      }
      var J1 = [m1(), b1()].filter(function(t2) {
        return typeof t2.detect == "function";
      });
      p1.exports = (t2) => {
        if ((typeof t2 != "object" || t2 === null) && (t2 = {}), typeof t2.headers != "object" || t2.headers === null || typeof t2.headers["content-type"] != "string") throw new Error("Missing Content-Type");
        return G1(t2);
      };
    });
    X = v1(C1());
    se = X.default ?? X;
  }
});

// https://esm.sh/busboy@1.6.0?target=denonext
var init_busboy_1_6 = __esm({
  "https://esm.sh/busboy@1.6.0?target=denonext"() {
    init_streamsearch_1_1();
    init_busboy();
    init_busboy();
  }
});

// https://esm.sh/@whatwg-node/node-fetch@0.7.12/denonext/node-fetch.mjs
import __Process$2 from "node:process";
import { Buffer as nt } from "node:buffer";
import { createReadStream as it, promises as X2 } from "node:fs";
import { fileURLToPath as ot } from "node:url";
import { PassThrough as ze, Readable as Ae } from "node:stream";
import { pipeline as ve } from "node:stream/promises";
import { rootCertificates as Ne } from "node:tls";
import { STATUS_CODES as Ue } from "node:http";
import { Buffer as k } from "node:buffer";
import { Readable as E } from "node:stream";
import { Buffer as m2 } from "node:buffer";
import { Buffer as ie } from "node:buffer";
import { Readable as G } from "node:stream";
import { Buffer as x2 } from "node:buffer";
import { inspect as le } from "node:util";
import { inspect as Re } from "node:util";
import { request as Ge, STATUS_CODES as Je } from "node:http";
import { request as Xe } from "node:https";
import { PassThrough as Ye, Readable as Ze } from "node:stream";
import { pipeline as Qe } from "node:stream/promises";
import { createBrotliDecompress as qe, createGunzip as et, createInflate as tt, createInflateRaw as rt } from "node:zlib";
import { Agent as We } from "node:http";
import { Agent as je } from "node:https";
import Me from "node:buffer";
import { randomUUID as $e } from "node:crypto";
import { Buffer as H2 } from "node:buffer";
import { Writable as Y } from "node:stream";
import { Transform as Z } from "node:stream";
import { createBrotliCompress as dt, createDeflate as mt, createDeflateRaw as pt, createGzip as bt } from "node:zlib";
import { createBrotliDecompress as yt, createGunzip as gt, createInflate as _t, createInflateRaw as wt } from "node:zlib";
function ye(r3) {
  return r3?.forEach != null;
}
function re(r3) {
  return r3 == null || !ye(r3) ? r3 : Object.fromEntries(r3.entries());
}
function se2(r3, e3) {
  let t2 = [];
  return r3.forEach((s, n2) => {
    e3 && n2 === "content-length" && e3(s), t2.push(`${n2}: ${s}`);
  }), t2;
}
function C2(r3) {
  return r3 != null && r3.buffer != null && r3.byteLength != null && r3.byteOffset != null;
}
function j2(r3) {
  return r3 != null && r3.pipe != null;
}
function ne(r3) {
  return r3?.[Symbol.iterator] != null;
}
function K(r3) {
  return r3 === 301 || r3 === 302 || r3 === 303 || r3 === 307 || r3 === 308;
}
function oe(r3, e3) {
  let t2 = [], s = false, n2 = false;
  return { desiredSize: r3, enqueue(i2) {
    let o2 = typeof i2 == "string" ? ie.from(i2) : i2;
    n2 ? e3.push(o2) : t2.push(o2);
  }, close() {
    t2.length > 0 && this._flush(), e3.push(null), s = true;
  }, error(i2) {
    t2.length > 0 && this._flush(), e3.destroy(i2);
  }, get _closed() {
    return s;
  }, _flush() {
    if (n2 = true, t2.length > 0) {
      let i2 = t2.length > 1 ? ie.concat(t2) : t2[0];
      e3.push(i2), t2 = [];
    }
  } };
}
function ge(r3) {
  return r3?.read != null;
}
function ae(r3) {
  return r3?.getReader != null;
}
function _e(r3) {
  return r3?.readable != null;
}
function we(r3) {
  return r3?.writable != null;
}
function A(r3) {
  return typeof r3 == "string" ? m2.from(r3) : m2.isBuffer(r3) ? r3 : C2(r3) ? m2.from(r3.buffer, r3.byteOffset, r3.byteLength) : m2.from(r3);
}
function R2(r3) {
  return r3 != null && r3.buffer != null && typeof r3.buffer == "function";
}
function U(r3) {
  return r3 != null && r3.arrayBuffer != null && typeof r3.arrayBuffer == "function";
}
function F(r3) {
  return r3 != null && r3.bytes != null && typeof r3.bytes == "function";
}
function xe(r3) {
  return r3 != null && r3.text != null && typeof r3.text == "function";
}
function Se(r3) {
  return r3 != null && typeof r3.size == "number";
}
function Te(r3) {
  return r3 != null && r3.stream != null && typeof r3.stream == "function";
}
function Pe(r3) {
  return r3 != null && r3[Symbol.toStringTag] === "Blob";
}
function Ie(r3) {
  return r3 != null && r3.byteLength != null && r3.slice != null;
}
function he(r3, e3 = "---") {
  let t2 = [], s = false;
  return new h2({ start: (n2) => {
    r3.forEach((i2, o2) => {
      s || (n2.enqueue(x2.from(`--${e3}\r
`)), s = true), t2.push([o2, i2]);
    }), s || (n2.enqueue(x2.from(`--${e3}--\r
`)), n2.close());
  }, pull: async (n2) => {
    let i2 = t2.shift();
    if (i2) {
      let [o2, a3] = i2;
      if (typeof a3 == "string") n2.enqueue(x2.from(`Content-Disposition: form-data; name="${o2}"\r
\r
`)), n2.enqueue(x2.from(a3));
      else {
        let f3 = "";
        a3.name && (f3 = `; filename="${a3.name}"`), n2.enqueue(x2.from(`Content-Disposition: form-data; name="${o2}"${f3}\r
`)), n2.enqueue(x2.from(`Content-Type: ${a3.type || "application/octet-stream"}\r
\r
`));
        let u2 = a3.stream();
        for await (let y4 of u2) n2.enqueue(y4);
      }
      t2.length === 0 ? (n2.enqueue(x2.from(`\r
--${e3}--\r
`)), n2.close()) : n2.enqueue(x2.from(`\r
--${e3}\r
`));
    } else n2.enqueue(x2.from(`\r
--${e3}--\r
`)), n2.close();
  } });
}
function fe(r3, e3, t2) {
  return Object.defineProperty(e3, "name", { configurable: true, enumerable: true, value: t2 || e3.name || r3 }), e3;
}
function ue(r3) {
  return r3?.arrayBuffer != null;
}
function Oe(r3) {
  if (r3 == null) return { bodyFactory: () => null, contentType: null, contentLength: null };
  if (typeof r3 == "string") {
    let e3 = k.from(r3), t2 = e3.byteLength;
    return { bodyType: d.String, contentType: "text/plain;charset=UTF-8", contentLength: t2, buffer: e3, bodyFactory() {
      let s = E.from(e3);
      return new h2(s);
    } };
  }
  if (k.isBuffer(r3)) return { bodyType: d.Buffer, contentType: null, contentLength: r3.length, buffer: r3, bodyFactory() {
    let e3 = E.from(r3);
    return new h2(e3);
  } };
  if (C2(r3)) {
    let e3 = k.from(r3.buffer, r3.byteOffset, r3.byteLength);
    return { bodyType: d.Buffer, contentLength: r3.byteLength, contentType: null, buffer: e3, bodyFactory() {
      let t2 = E.from(e3);
      return new h2(t2);
    } };
  }
  if (r3 instanceof h2 && r3.readable != null) return { bodyType: d.ReadableStream, bodyFactory: () => r3, contentType: null, contentLength: null };
  if (ke(r3)) return { bodyType: d.Blob, contentType: r3.type, contentLength: r3.size, bodyFactory() {
    return r3.stream();
  } };
  if (r3 instanceof ArrayBuffer) {
    let e3 = r3.byteLength, t2 = k.from(r3, void 0, r3.byteLength);
    return { bodyType: d.Buffer, contentType: null, contentLength: e3, buffer: t2, bodyFactory() {
      let s = E.from(t2);
      return new h2(s);
    } };
  }
  if (r3 instanceof E) return { bodyType: d.Readable, contentType: null, contentLength: null, bodyFactory() {
    return new h2(r3);
  } };
  if (Be(r3)) return { bodyType: d.String, contentType: "application/x-www-form-urlencoded;charset=UTF-8", contentLength: null, bodyFactory() {
    return new h2(E.from(r3.toString()));
  } };
  if (Ce(r3)) {
    let e3 = Math.random().toString(36).substr(2), t2 = `multipart/form-data; boundary=${e3}`;
    return { bodyType: d.FormData, contentType: t2, contentLength: null, bodyFactory() {
      return he(r3, e3);
    } };
  }
  if (De(r3)) return { contentType: null, contentLength: null, bodyFactory() {
    return new h2(r3);
  } };
  if (r3[Symbol.iterator] || r3[Symbol.asyncIterator]) return { contentType: null, contentLength: null, bodyType: d.AsyncIterable, bodyFactory() {
    let e3 = E.from(r3);
    return new h2(e3);
  } };
  throw new Error("Unknown body type");
}
function Ce(r3) {
  return r3?.forEach != null;
}
function ke(r3) {
  return r3?.stream != null && typeof r3.stream == "function";
}
function Be(r3) {
  return r3?.sort != null;
}
function De(r3) {
  return r3?.getReader != null;
}
function _(r3) {
  return r3?.get && r3?.forEach;
}
function ce(r3) {
  let { Curl: e3, CurlFeature: t2, CurlPause: s, CurlProgressFunc: n2 } = globalThis.libcurl, i2 = new e3();
  if (i2.enable(t2.NoDataParsing), i2.setOpt("URL", r3.url), __Process$2.env.NODE_TLS_REJECT_UNAUTHORIZED === "0" && i2.setOpt("SSL_VERIFYPEER", false), __Process$2.env.NODE_EXTRA_CA_CERTS ? i2.setOpt("CAINFO", __Process$2.env.NODE_EXTRA_CA_CERTS) : i2.setOpt("CAINFO_BLOB", Ne.join(`
`)), i2.enable(t2.StreamResponse), i2.setStreamProgressCallback(function() {
    return r3.signal.aborted ? __Process$2.env.DEBUG ? n2.Continue : 1 : 0;
  }), r3.bodyType === "String") i2.setOpt("POSTFIELDS", r3.bodyInit);
  else {
    let c3 = r3.body != null ? j2(r3.body) ? r3.body : Ae.from(r3.body) : null;
    c3 && (i2.setOpt("UPLOAD", true), i2.setUploadStream(c3));
  }
  __Process$2.env.DEBUG && i2.setOpt("VERBOSE", true), i2.setOpt("TRANSFER_ENCODING", false), i2.setOpt("HTTP_TRANSFER_DECODING", true), i2.setOpt("FOLLOWLOCATION", r3.redirect === "follow"), i2.setOpt("MAXREDIRS", 20), i2.setOpt("ACCEPT_ENCODING", ""), i2.setOpt("CUSTOMREQUEST", r3.method);
  let o2 = r3.headersSerializer || se2, a3, f3 = o2(r3.headers, (c3) => {
    a3 = Number(c3);
  });
  a3 != null && i2.setOpt("INFILESIZE", a3), i2.setOpt("HTTPHEADER", f3), i2.enable(t2.NoHeaderParsing);
  let u2 = P(), y4;
  function T2() {
    if (i2.isOpen) try {
      i2.pause(s.Recv);
    } catch (c3) {
      u2.reject(c3);
    }
  }
  return r3.signal && r3.signal.addEventListener("abort", T2, { once: true }), i2.once("end", function() {
    try {
      i2.close();
    } catch (p3) {
      u2.reject(p3);
    }
    r3.signal && r3.signal.removeEventListener("abort", T2);
  }), i2.once("error", function(p3) {
    y4 && !y4.closed && !y4.destroyed ? y4.destroy(p3) : (p3.message === "Operation was aborted by an application callback" && (p3.message = "The operation was aborted."), u2.reject(p3));
    try {
      i2.close();
    } catch (P4) {
      u2.reject(P4);
    }
  }), i2.once("stream", function(p3, P4, V4) {
    let O3 = new ze();
    ve(p3, O3, { end: true, signal: r3.signal }).then(() => {
      p3.destroyed || p3.resume();
    }).catch(u2.reject);
    let pe2 = V4.toString("utf8").split(/\r?\n|\r/g).filter((z4) => z4 && !z4.startsWith("HTTP/") ? (r3.redirect === "error" && z4.toLowerCase().includes("location") && K(P4) && (p3.destroyed || p3.resume(), O3.destroy(), u2.reject(new Error("redirect is not allowed"))), true) : false).map((z4) => z4.split(/:\s(.+)/).slice(0, 2)), be2 = new b2(O3, { status: P4, headers: pe2, url: i2.getInfo(e3.info.REDIRECT_URL)?.toString() || r3.url, redirected: Number(i2.getInfo(e3.info.REDIRECT_COUNT)) > 0 });
    u2.resolve(be2), y4 = O3;
  }), __setImmediate$(() => {
    i2.perform();
  }), u2.promise;
}
function Ke(r3) {
  return r3[Symbol.toStringTag] === "Request";
}
function Ve(r3) {
  return r3?.href != null;
}
function st(r3) {
  if (r3.startsWith("http:")) return Ge;
  if (r3.startsWith("https:")) return Xe;
  throw new Error(`Unsupported protocol: ${r3.split(":")[0] || r3}`);
}
function J(r3) {
  return new Promise((e3, t2) => {
    try {
      let s = st(r3.parsedUrl?.protocol || r3.url), n2 = r3.body != null ? j2(r3.body) ? r3.body : Ze.from(r3.body) : null, o2 = (r3.headersSerializer || re)(r3.headers);
      o2["accept-encoding"] == null && (o2["accept-encoding"] = "gzip, deflate, br");
      let a3;
      r3.parsedUrl ? a3 = s(r3.parsedUrl, { method: r3.method, headers: o2, signal: r3.signal, agent: r3.agent }) : a3 = s(r3.url, { method: r3.method, headers: o2, signal: r3.signal, agent: r3.agent }), a3.once("response", (f3) => {
        let u2;
        switch (f3.headers["content-encoding"]) {
          case "x-gzip":
          case "gzip":
            u2 = et();
            break;
          case "x-deflate":
          case "deflate":
            u2 = tt();
            break;
          case "x-deflate-raw":
          case "deflate-raw":
            u2 = rt();
            break;
          case "br":
            u2 = qe();
            break;
          default:
            u2 = new Ye();
        }
        if (f3.headers.location && K(f3.statusCode)) {
          if (r3.redirect === "error") {
            let P4 = new Error("Redirects are not allowed");
            t2(P4), f3.resume();
            return;
          }
          if (r3.redirect === "follow") {
            let P4 = new S(f3.headers.location, r3.parsedUrl || r3.url), V4 = J(new D2(P4, r3));
            e3(V4.then((O3) => (O3.redirected = true, O3))), f3.resume();
            return;
          }
        }
        Qe(f3, u2, { signal: r3.signal, end: true }).then(() => {
          f3.destroyed || f3.resume();
        }).catch(t2);
        let T2 = f3.statusCode || 200, c3 = f3.statusMessage || Je[T2];
        c3 == null && (c3 = "");
        let p3 = new b2(u2, { status: T2, statusText: c3, headers: f3.headers, url: r3.url });
        e3(p3);
      }), a3.once("error", t2), n2 ? n2.pipe(a3) : a3.end();
    } catch (s) {
      t2(s);
    }
  });
}
async function at(r3) {
  let e3 = ot(r3);
  try {
    await X2.access(e3, X2.constants.R_OK);
    let t2 = await X2.stat(e3, { bigint: true }), s = it(e3);
    return new b2(s, { status: 200, statusText: "OK", headers: { "content-type": "application/octet-stream", "last-modified": t2.mtime.toUTCString() } });
  } catch (t2) {
    if (t2.code === "ENOENT") return new b2(null, { status: 404, statusText: "Not Found" });
    if (t2.code === "EACCES") return new b2(null, { status: 403, statusText: "Forbidden" });
    throw t2;
  }
}
function lt(r3) {
  let [e3 = "text/plain", ...t2] = r3.substring(5).split(","), s = decodeURIComponent(t2.join(","));
  if (e3.endsWith(de)) {
    let n2 = nt.from(s, "base64url"), i2 = e3.slice(0, -de.length);
    return new b2(n2, { status: 200, statusText: "OK", headers: { "content-type": i2 } });
  }
  return new b2(s, { status: 200, statusText: "OK", headers: { "content-type": e3 } });
}
function ft(r3) {
  let e3 = S.getBlobFromURL(r3);
  if (!e3) throw new TypeError("Invalid Blob URL");
  return new b2(e3, { status: 200, headers: { "content-type": e3.type, "content-length": e3.size.toString() } });
}
function ut(r3) {
  return r3 != null && r3.href != null;
}
function me(r3, e3) {
  if (typeof r3 == "string" || ut(r3)) {
    let s = new D2(r3, e3);
    return me(s);
  }
  let t2 = r3;
  if (t2.url.startsWith("data:")) {
    let s = lt(t2.url);
    return m(s);
  }
  if (t2.url.startsWith("file:")) return at(t2.url);
  if (t2.url.startsWith("blob:")) {
    let s = ft(t2.url);
    return m(s);
  }
  return globalThis.libcurl && !t2.agent ? ce(t2) : J(t2);
}
function ht(r3) {
  return H2.from(r3, "binary").toString("base64");
}
var __setImmediate$, h2, I, v, g2, N2, d, B3, L, Fe, b2, S, D2, de, M3, $2, ct, W, w2, Q, q, ee, te;
var init_node_fetch = __esm({
  "https://esm.sh/@whatwg-node/node-fetch@0.7.12/denonext/node-fetch.mjs"() {
    init_promise_helpers_1_2();
    init_busboy_1_6();
    init_promise_helpers_1_2();
    init_disposablestack_0_0();
    __setImmediate$ = (cb, ...args) => ({ $t: setTimeout(cb, 0, ...args), [Symbol.dispose]() {
      clearTimeout(this.t);
    } });
    h2 = class r {
      readable;
      constructor(e3) {
        if (e3 instanceof r && e3.readable != null) this.readable = e3.readable;
        else if (ge(e3)) this.readable = e3;
        else if (ae(e3)) this.readable = G.fromWeb(e3);
        else {
          let t2 = false, s = false, n2 = async (i2) => {
            if (!t2) {
              let a3 = oe(i2, this.readable);
              if (t2 = true, await e3?.start?.(a3), a3._flush(), a3._closed) return;
            }
            let o2 = oe(i2, this.readable);
            await e3?.pull?.(o2), o2._flush(), s = false;
          };
          this.readable = new G({ read(i2) {
            if (!s) return s = true, n2(i2);
          }, destroy(i2, o2) {
            if (e3?.cancel) try {
              let a3 = e3.cancel(i2);
              if (a3?.then) return a3.then(() => {
                o2(null);
              }, (f3) => {
                o2(f3);
              });
            } catch (a3) {
              o2(a3);
              return;
            }
            o2(null);
          } });
        }
      }
      cancel(e3) {
        return this.readable.destroy(e3), new Promise((t2) => this.readable.once("end", t2));
      }
      locked = false;
      getReader(e3) {
        let t2 = this.readable[Symbol.asyncIterator]();
        return this.locked = true, { read() {
          return t2.next();
        }, releaseLock: () => {
          if (t2.return) {
            let s = t2.return();
            if (s.then) {
              s.then(() => {
                this.locked = false;
              });
              return;
            }
          }
          this.locked = false;
        }, cancel: (s) => {
          if (t2.return) {
            let n2 = t2.return(s);
            if (n2.then) return n2.then(() => {
              this.locked = false;
            });
          }
          return this.locked = false, m();
        }, closed: new Promise((s, n2) => {
          this.readable.once("end", s), this.readable.once("error", n2);
        }) };
      }
      [Symbol.asyncIterator]() {
        let e3 = this.readable[Symbol.asyncIterator]();
        return { [Symbol.asyncIterator]() {
          return this;
        }, next: () => e3.next(), return: () => (this.readable.destroyed || this.readable.destroy(), e3.return?.() || m({ done: true, value: void 0 })), throw: (t2) => (this.readable.destroyed || this.readable.destroy(t2), e3.throw?.(t2) || m({ done: true, value: void 0 })) };
      }
      tee() {
        throw new Error("Not implemented");
      }
      async pipeToWriter(e3) {
        try {
          for await (let t2 of this) await e3.write(t2);
          await e3.close();
        } catch (t2) {
          await e3.abort(t2);
        }
      }
      pipeTo(e3) {
        if (we(e3)) return new Promise((t2, s) => {
          this.readable.pipe(e3.writable), e3.writable.once("finish", t2), e3.writable.once("error", s);
        });
        {
          let t2 = e3.getWriter();
          return this.pipeToWriter(t2);
        }
      }
      pipeThrough({ writable: e3, readable: t2 }) {
        return this.pipeTo(e3).catch((s) => {
          this.readable.destroy(s);
        }), _e(t2) && (t2.readable.once("error", (s) => this.readable.destroy(s)), t2.readable.once("finish", () => this.readable.push(null)), t2.readable.once("close", () => this.readable.push(null))), t2;
      }
      static [Symbol.hasInstance](e3) {
        return ae(e3);
      }
      static from(e3) {
        return new r(G.from(e3));
      }
    };
    I = class {
      blobParts;
      type;
      encoding;
      _size = null;
      constructor(e3 = [], t2) {
        if (this.blobParts = e3, this.type = t2?.type || "application/octet-stream", this.encoding = t2?.encoding || "utf8", this._size = t2?.size || null, e3.length === 1 && Pe(e3[0])) return e3[0];
      }
      _buffer = null;
      buffer() {
        if (this._buffer) return m(this._buffer);
        if (this.blobParts.length === 1) {
          let s = this.blobParts[0];
          return R2(s) ? s.buffer().then((n2) => (this._buffer = n2, this._buffer)) : F(s) ? s.bytes().then((n2) => (this._buffer = m2.from(n2), this._buffer)) : U(s) ? s.arrayBuffer().then((n2) => (this._buffer = m2.from(n2, void 0, s.size), this._buffer)) : (this._buffer = A(s), m(this._buffer));
        }
        let e3 = [], t2 = this.blobParts.map((s, n2) => {
          if (R2(s)) {
            e3.push(s.buffer().then((i2) => {
              t2[n2] = i2;
            }));
            return;
          } else if (U(s)) {
            e3.push(s.arrayBuffer().then((i2) => {
              t2[n2] = m2.from(i2, void 0, s.size);
            }));
            return;
          } else if (F(s)) {
            e3.push(s.bytes().then((i2) => {
              t2[n2] = m2.from(i2);
            }));
            return;
          } else return A(s);
        });
        return e3.length > 0 ? Promise.all(e3).then(() => m2.concat(t2, this._size || void 0)) : m(m2.concat(t2, this._size || void 0));
      }
      arrayBuffer() {
        if (this._buffer) return m(this._buffer);
        if (this.blobParts.length === 1) {
          if (Ie(this.blobParts[0])) return m(this.blobParts[0]);
          if (U(this.blobParts[0])) return this.blobParts[0].arrayBuffer();
        }
        return this.buffer();
      }
      bytes() {
        if (this._buffer) return m(this._buffer);
        if (this.blobParts.length === 1) {
          if (m2.isBuffer(this.blobParts[0])) return this._buffer = this.blobParts[0], m(this.blobParts[0]);
          if (this.blobParts[0] instanceof Uint8Array) return this._buffer = m2.from(this.blobParts[0]), m(this.blobParts[0]);
          if (F(this.blobParts[0])) return this.blobParts[0].bytes();
          if (R2(this.blobParts[0])) return this.blobParts[0].buffer();
        }
        return this.buffer();
      }
      _text = null;
      text() {
        if (this._text) return m(this._text);
        if (this.blobParts.length === 1) {
          let e3 = this.blobParts[0];
          if (typeof e3 == "string") return this._text = e3, m(this._text);
          if (xe(e3)) return e3.text().then((s) => (this._text = s, this._text));
          let t2 = A(e3);
          return this._text = t2.toString(this.encoding), m(this._text);
        }
        return this.buffer().then((e3) => (this._text = e3.toString(this.encoding), this._text));
      }
      _json = null;
      json() {
        return this._json ? m(this._json) : this.text().then((e3) => (this._json = JSON.parse(e3), this._json));
      }
      _formData = null;
      formData() {
        if (this._formData) return m(this._formData);
        throw new Error("Not implemented");
      }
      get size() {
        if (this._size == null) {
          this._size = 0;
          for (let e3 of this.blobParts) typeof e3 == "string" ? this._size += m2.byteLength(e3) : Se(e3) ? this._size += e3.size : C2(e3) && (this._size += e3.byteLength);
        }
        return this._size;
      }
      stream() {
        if (this.blobParts.length === 1) {
          let t2 = this.blobParts[0];
          if (Te(t2)) return t2.stream();
          let s = A(t2);
          return new h2({ start: (n2) => {
            n2.enqueue(s), n2.close();
          } });
        }
        if (this._buffer != null) return new h2({ start: (t2) => {
          t2.enqueue(this._buffer), t2.close();
        } });
        let e3;
        return new h2({ start: (t2) => {
          if (this.blobParts.length === 0) {
            t2.close();
            return;
          }
          e3 = this.blobParts[Symbol.iterator]();
        }, pull: (t2) => {
          let { value: s, done: n2 } = e3.next();
          if (n2) {
            t2.close();
            return;
          }
          if (s) {
            if (R2(s)) return s.buffer().then((o2) => {
              t2.enqueue(o2);
            });
            if (F(s)) return s.bytes().then((o2) => {
              let a3 = m2.from(o2);
              t2.enqueue(a3);
            });
            if (U(s)) return s.arrayBuffer().then((o2) => {
              let a3 = m2.from(o2, void 0, s.size);
              t2.enqueue(a3);
            });
            let i2 = A(s);
            t2.enqueue(i2);
          }
        } });
      }
      slice() {
        throw new Error("Not implemented");
      }
    };
    v = class extends I {
      name;
      lastModified;
      constructor(e3, t2, s) {
        super(e3, s), this.name = t2, this.lastModified = s?.lastModified || Date.now();
      }
      webkitRelativePath = "";
    };
    g2 = class {
      iterableIterator;
      [Symbol.toStringTag] = "IteratorObject";
      constructor(e3, t2) {
        this.iterableIterator = e3, this[Symbol.toStringTag] = t2;
      }
      *map(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) yield e3(s, t2++);
      }
      *filter(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) e3(s, t2++) && (yield s);
      }
      reduce(e3, t2) {
        let s = 0, n2 = t2;
        for (let i2 of this.iterableIterator) n2 = e3(n2, i2, s++);
        return n2;
      }
      forEach(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) e3(s, t2++);
      }
      *take(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) {
          if (t2 >= e3) break;
          yield s, t2++;
        }
      }
      *drop(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) t2 >= e3 && (yield s), t2++;
      }
      *flatMap(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) {
          let n2 = e3(s, t2++);
          if (ne(n2)) for (let i2 of n2) yield i2;
          else for (let i2 of { [Symbol.iterator]: () => n2 }) yield i2;
        }
      }
      some(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) if (e3(s, t2++)) return true;
        return false;
      }
      every(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) if (!e3(s, t2++)) return false;
        return true;
      }
      find(e3) {
        let t2 = 0;
        for (let s of this.iterableIterator) if (e3(s, t2++)) return s;
      }
      toArray() {
        return Array.from(this.iterableIterator);
      }
      [o.dispose]() {
        this.iterableIterator.return?.();
      }
      next(...[e3]) {
        return this.iterableIterator.next(e3);
      }
      [Symbol.iterator]() {
        return this;
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        let e3 = {};
        return this.forEach((t2, s) => {
          let n2 = le(t2);
          e3[s] = n2.includes(",") ? n2.split(",").map((i2) => i2.trim()) : n2;
        }), `${this[Symbol.toStringTag]} ${le(e3)}`;
      }
    };
    N2 = class {
      map = /* @__PURE__ */ new Map();
      append(e3, t2, s) {
        let n2 = this.map.get(e3);
        n2 || (n2 = [], this.map.set(e3, n2));
        let i2 = ue(t2) ? fe(e3, t2, s) : t2;
        n2.push(i2);
      }
      delete(e3) {
        this.map.delete(e3);
      }
      get(e3) {
        let t2 = this.map.get(e3);
        return t2 ? t2[0] : null;
      }
      getAll(e3) {
        return this.map.get(e3) || [];
      }
      has(e3) {
        return this.map.has(e3);
      }
      set(e3, t2, s) {
        let n2 = ue(t2) ? fe(e3, t2, s) : t2;
        this.map.set(e3, [n2]);
      }
      [Symbol.iterator]() {
        return this._entries();
      }
      *_entries() {
        for (let [e3, t2] of this.map) for (let s of t2) yield [e3, s];
      }
      entries() {
        return new g2(this._entries(), "FormDataIterator");
      }
      _keys() {
        return this.map.keys();
      }
      keys() {
        return new g2(this._keys(), "FormDataIterator");
      }
      *_values() {
        for (let e3 of this.map.values()) for (let t2 of e3) yield t2;
      }
      values() {
        return new g2(this._values(), "FormDataIterator");
      }
      forEach(e3) {
        for (let [t2, s] of this) e3(s, t2, this);
      }
    };
    (function(r3) {
      r3.ReadableStream = "ReadableStream", r3.Blob = "Blob", r3.FormData = "FormData", r3.String = "String", r3.Readable = "Readable", r3.Buffer = "Buffer", r3.AsyncIterable = "AsyncIterable";
    })(d || (d = {}));
    B3 = class {
      bodyInit;
      options;
      bodyUsed = false;
      contentType = null;
      contentLength = null;
      constructor(e3, t2 = {}) {
        this.bodyInit = e3, this.options = t2;
        let { bodyFactory: s, contentType: n2, contentLength: i2, bodyType: o2, buffer: a3 } = Oe(e3);
        this._bodyFactory = s, this.contentType = n2, this.contentLength = i2, this.bodyType = o2, this._buffer = a3;
      }
      bodyType;
      _bodyFactory = () => null;
      _generatedBody = null;
      _buffer;
      generateBody() {
        if (this._generatedBody?.readable?.destroyed && this._buffer && (this._generatedBody.readable = E.from(this._buffer)), this._generatedBody) return this._generatedBody;
        let e3 = this._bodyFactory();
        return this._generatedBody = e3, e3;
      }
      handleContentLengthHeader(e3 = false) {
        let t2 = this.headers.get("content-type");
        t2 ? this.contentType = t2 : this.contentType && this.headers.set("content-type", this.contentType);
        let s = this.headers.get("content-length");
        e3 && this.bodyInit == null && !s && (this.contentLength = 0, this.headers.set("content-length", "0")), s ? this.contentLength = parseInt(s, 10) : this.contentLength && this.headers.set("content-length", this.contentLength.toString());
      }
      get body() {
        let e3 = this.generateBody();
        if (e3 != null) {
          let t2 = e3, s = e3.readable;
          return new Proxy(e3.readable, { get(n2, i2) {
            if (i2 in t2) {
              let o2 = t2[i2];
              return typeof o2 == "function" ? o2.bind(t2) : o2;
            }
            if (i2 in s) {
              let o2 = s[i2];
              return typeof o2 == "function" ? o2.bind(s) : o2;
            }
          } });
        }
        return null;
      }
      _chunks = null;
      _collectChunksFromReadable() {
        if (this._chunks) return m(this._chunks);
        if (this.bodyType === d.AsyncIterable) {
          let t2 = this.bodyInit[Symbol.asyncIterator](), s = () => t2.next().then(({ value: n2, done: i2 }) => (this._chunks ||= [], n2 && this._chunks.push(n2), i2 ? this._chunks : s()));
          return s();
        }
        let e3 = this.generateBody();
        return e3 ? (this._chunks = [], e3.readable.on("data", (t2) => {
          this._chunks.push(t2);
        }), new Promise((t2, s) => {
          e3.readable.once("end", () => {
            t2(this._chunks);
          }), e3.readable.once("error", (n2) => {
            s(n2);
          });
        })) : m([]);
      }
      _blob = null;
      blob() {
        return this._blob ? m(this._blob) : this.bodyType === d.Blob ? (this._blob = this.bodyInit, m(this._blob)) : this._buffer ? (this._blob = new I([this._buffer], { type: this.contentType || "", size: this.contentLength }), m(this._blob)) : this._collectChunksFromReadable().then((e3) => (this._blob = new I(e3, { type: this.contentType || "", size: this.contentLength }), this._blob));
      }
      _formData = null;
      formData(e3) {
        if (this._formData) return m(this._formData);
        if (this.bodyType === d.FormData) return this._formData = this.bodyInit, m(this._formData);
        this._formData = new N2();
        let t2 = this.generateBody();
        if (t2 == null) return m(this._formData);
        let s = { ...this.options.formDataLimits, ...e3?.formDataLimits };
        return new Promise((n2, i2) => {
          let o2 = se({ headers: { "content-type": this.contentType || "" }, limits: s, defParamCharset: "utf-8" });
          o2.on("field", (a3, f3, { nameTruncated: u2, valueTruncated: y4 }) => {
            u2 && i2(new Error(`Field name size exceeded: ${s?.fieldNameSize} bytes`)), y4 && i2(new Error(`Field value size exceeded: ${s?.fieldSize} bytes`)), this._formData.set(a3, f3);
          }), o2.on("fieldsLimit", () => {
            i2(new Error(`Fields limit exceeded: ${s?.fields}`));
          }), o2.on("file", (a3, f3, { filename: u2, mimeType: y4 }) => {
            let T2 = [];
            f3.on("limit", () => {
              i2(new Error(`File size limit exceeded: ${s?.fileSize} bytes`));
            }), f3.on("data", (c3) => {
              T2.push(c3);
            }), f3.on("close", () => {
              f3.truncated && i2(new Error(`File size limit exceeded: ${s?.fileSize} bytes`));
              let c3 = new v(T2, u2, { type: y4 });
              this._formData.set(a3, c3);
            });
          }), o2.on("filesLimit", () => {
            i2(new Error(`Files limit exceeded: ${s?.files}`));
          }), o2.on("partsLimit", () => {
            i2(new Error(`Parts limit exceeded: ${s?.parts}`));
          }), o2.on("close", () => {
            n2(this._formData);
          }), o2.on("error", (a3 = "An error occurred while parsing the form data") => {
            let f3 = a3.message || a3.toString();
            i2(new TypeError(f3, a3.cause));
          }), t2?.readable.pipe(o2);
        });
      }
      buffer() {
        if (this._buffer) return m(this._buffer);
        if (this.bodyType === d.Blob) {
          if (R2(this.bodyInit)) return this.bodyInit.buffer().then((e3) => (this._buffer = e3, this._buffer));
          if (F(this.bodyInit)) return this.bodyInit.bytes().then((e3) => (this._buffer = k.from(e3), this._buffer));
          if (U(this.bodyInit)) return this.bodyInit.arrayBuffer().then((e3) => (this._buffer = k.from(e3, void 0, e3.byteLength), this._buffer));
        }
        return this._collectChunksFromReadable().then((e3) => e3.length === 1 ? (this._buffer = e3[0], this._buffer) : (this._buffer = k.concat(e3), this._buffer));
      }
      bytes() {
        return this.buffer();
      }
      arrayBuffer() {
        return this.buffer();
      }
      _json = null;
      json() {
        return this._json ? m(this._json) : this.text().then((e3) => {
          try {
            this._json = JSON.parse(e3);
          } catch (t2) {
            throw t2 instanceof SyntaxError && (t2.message += `, "${e3}" is not valid JSON`), t2;
          }
          return this._json;
        });
      }
      _text = null;
      text() {
        return this._text ? m(this._text) : this.bodyType === d.String ? (this._text = this.bodyInit, m(this._text)) : this.buffer().then((e3) => (this._text = e3.toString("utf-8"), this._text));
      }
    };
    L = class {
      headersInit;
      _map;
      objectNormalizedKeysOfHeadersInit = [];
      objectOriginalKeysOfHeadersInit = [];
      _setCookies;
      constructor(e3) {
        this.headersInit = e3;
      }
      _get(e3) {
        let t2 = e3.toLowerCase();
        if (t2 === "set-cookie" && this._setCookies?.length) return this._setCookies.join(", ");
        if (this._map) return this._map.get(t2) || null;
        if (this.headersInit == null) return null;
        if (Array.isArray(this.headersInit)) {
          let s = this.headersInit.filter(([n2]) => n2.toLowerCase() === t2);
          return s.length === 0 ? null : s.length === 1 ? s[0][1] : s.map(([, n2]) => n2).join(", ");
        } else {
          if (_(this.headersInit)) return this.headersInit.get(t2);
          {
            let s = this.headersInit[e3] || this.headersInit[t2];
            if (s != null) return s;
            this.objectNormalizedKeysOfHeadersInit.length || Object.keys(this.headersInit).forEach((o2) => {
              this.objectOriginalKeysOfHeadersInit.push(o2), this.objectNormalizedKeysOfHeadersInit.push(o2.toLowerCase());
            });
            let n2 = this.objectNormalizedKeysOfHeadersInit.indexOf(t2);
            if (n2 === -1) return null;
            let i2 = this.objectOriginalKeysOfHeadersInit[n2];
            return this.headersInit[i2];
          }
        }
      }
      getMap() {
        if (!this._map) if (this._setCookies = [], this.headersInit != null) if (Array.isArray(this.headersInit)) {
          this._map = /* @__PURE__ */ new Map();
          for (let [e3, t2] of this.headersInit) {
            let s = e3.toLowerCase();
            if (s === "set-cookie") {
              this._setCookies.push(t2);
              continue;
            }
            this._map.set(s, t2);
          }
        } else if (_(this.headersInit)) this._map = /* @__PURE__ */ new Map(), this.headersInit.forEach((e3, t2) => {
          if (t2 === "set-cookie") {
            this._setCookies ||= [], this._setCookies.push(e3);
            return;
          }
          this._map.set(t2, e3);
        });
        else {
          this._map = /* @__PURE__ */ new Map();
          for (let e3 in this.headersInit) {
            let t2 = this.headersInit[e3];
            if (t2 != null) {
              let s = e3.toLowerCase();
              if (s === "set-cookie") {
                this._setCookies ||= [], this._setCookies.push(t2);
                continue;
              }
              this._map.set(s, t2);
            }
          }
        }
        else this._map = /* @__PURE__ */ new Map();
        return this._map;
      }
      append(e3, t2) {
        let s = e3.toLowerCase();
        if (s === "set-cookie") {
          this._setCookies ||= [], this._setCookies.push(t2);
          return;
        }
        let n2 = this.getMap().get(s), i2 = n2 ? `${n2}, ${t2}` : t2;
        this.getMap().set(s, i2);
      }
      get(e3) {
        let t2 = this._get(e3);
        return t2 == null ? null : t2.toString();
      }
      has(e3) {
        return e3 === "set-cookie" ? !!this._setCookies?.length : !!this._get(e3);
      }
      set(e3, t2) {
        let s = e3.toLowerCase();
        if (s === "set-cookie") {
          this._setCookies = [t2];
          return;
        }
        this.getMap().set(s, t2);
      }
      delete(e3) {
        let t2 = e3.toLowerCase();
        if (t2 === "set-cookie") {
          this._setCookies = [];
          return;
        }
        this.getMap().delete(t2);
      }
      forEach(e3) {
        if (this._setCookies?.forEach((t2) => {
          e3(t2, "set-cookie", this);
        }), !this._map) {
          if (this.headersInit) {
            if (Array.isArray(this.headersInit)) {
              this.headersInit.forEach(([t2, s]) => {
                e3(s, t2, this);
              });
              return;
            }
            if (_(this.headersInit)) {
              this.headersInit.forEach(e3);
              return;
            }
            Object.entries(this.headersInit).forEach(([t2, s]) => {
              s != null && e3(s, t2, this);
            });
          }
          return;
        }
        this.getMap().forEach((t2, s) => {
          e3(t2, s, this);
        });
      }
      *_keys() {
        if (this._setCookies?.length && (yield "set-cookie"), !this._map && this.headersInit) {
          if (Array.isArray(this.headersInit)) {
            yield* this.headersInit.map(([e3]) => e3)[Symbol.iterator]();
            return;
          }
          if (_(this.headersInit)) {
            yield* this.headersInit.keys();
            return;
          }
          yield* Object.keys(this.headersInit)[Symbol.iterator]();
          return;
        }
        yield* this.getMap().keys();
      }
      keys() {
        return new g2(this._keys(), "HeadersIterator");
      }
      *_values() {
        if (this._setCookies?.length && (yield* this._setCookies), !this._map && this.headersInit) {
          if (Array.isArray(this.headersInit)) {
            yield* this.headersInit.map(([, e3]) => e3)[Symbol.iterator]();
            return;
          }
          if (_(this.headersInit)) {
            yield* this.headersInit.values();
            return;
          }
          yield* Object.values(this.headersInit)[Symbol.iterator]();
          return;
        }
        yield* this.getMap().values();
      }
      values() {
        return new g2(this._values(), "HeadersIterator");
      }
      *_entries() {
        if (this._setCookies?.length && (yield* this._setCookies.map((e3) => ["set-cookie", e3])), !this._map && this.headersInit) {
          if (Array.isArray(this.headersInit)) {
            yield* this.headersInit;
            return;
          }
          if (_(this.headersInit)) {
            yield* this.headersInit.entries();
            return;
          }
          yield* Object.entries(this.headersInit);
          return;
        }
        yield* this.getMap().entries();
      }
      entries() {
        return new g2(this._entries(), "HeadersIterator");
      }
      getSetCookie() {
        return this._setCookies || this.getMap(), this._setCookies;
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        let e3 = {};
        return this.forEach((t2, s) => {
          s === "set-cookie" ? e3["set-cookie"] = this._setCookies || [] : e3[s] = t2?.includes(",") ? t2.split(",").map((n2) => n2.trim()) : t2;
        }), `Headers ${Re(e3)}`;
      }
    };
    Fe = "application/json; charset=utf-8";
    b2 = class r2 extends B3 {
      headers;
      constructor(e3, t2) {
        super(e3 || null, t2), this.headers = t2?.headers && _(t2.headers) ? t2.headers : new L(t2?.headers), this.status = t2?.status || 200, this.statusText = t2?.statusText || Ue[this.status] || "OK", this.url = t2?.url || "", this.redirected = t2?.redirected || false, this.type = t2?.type || "default", this.handleContentLengthHeader();
      }
      get ok() {
        return this.status >= 200 && this.status < 300;
      }
      status;
      statusText;
      url;
      redirected;
      type;
      clone() {
        return this;
      }
      static error() {
        return new r2(null, { status: 500, statusText: "Internal Server Error" });
      }
      static redirect(e3, t2 = 302) {
        if (t2 < 300 || t2 > 399) throw new RangeError("Invalid status code");
        return new r2(null, { headers: { location: e3 }, status: t2 });
      }
      static json(e3, t2 = {}) {
        return t2.headers = t2?.headers && _(t2.headers) ? t2.headers : new L(t2?.headers), t2.headers.has("content-type") || t2.headers.set("content-type", Fe), new r2(JSON.stringify(e3), t2);
      }
    };
    S = class extends URL {
      static blobRegistry = /* @__PURE__ */ new Map();
      static createObjectURL(e3) {
        let t2 = `blob:whatwgnode:${$e()}`;
        return this.blobRegistry.set(t2, e3), t2;
      }
      static revokeObjectURL(e3) {
        this.blobRegistry.has(e3) ? this.blobRegistry.delete(e3) : URL.revokeObjectURL(e3);
      }
      static getBlobFromURL(e3) {
        return this.blobRegistry.get(e3) || Me?.resolveObjectURL?.(e3);
      }
    };
    D2 = class extends B3 {
      constructor(e3, t2) {
        let s, n2, i2 = null, o2;
        if (typeof e3 == "string" ? s = e3 : Ve(e3) ? n2 = e3 : Ke(e3) && (e3._parsedUrl ? n2 = e3._parsedUrl : e3._url ? s = e3._url : s = e3.url, i2 = e3.body, o2 = e3), t2 != null && (i2 = t2.body || null, o2 = t2), super(i2, t2), this._url = s, this._parsedUrl = n2, this.cache = o2?.cache || "default", this.credentials = o2?.credentials || "same-origin", this.headers = o2?.headers && _(o2.headers) ? o2.headers : new L(o2?.headers), this.integrity = o2?.integrity || "", this.keepalive = o2?.keepalive != null ? o2?.keepalive : false, this.method = o2?.method?.toUpperCase() || "GET", this.mode = o2?.mode || "cors", this.redirect = o2?.redirect || "follow", this.referrer = o2?.referrer || "about:client", this.referrerPolicy = o2?.referrerPolicy || "no-referrer", this.signal = o2?.signal || new AbortController().signal, this.headersSerializer = o2?.headersSerializer, this.duplex = o2?.duplex || "half", this.destination = "document", this.priority = "auto", this.method !== "GET" && this.method !== "HEAD" && this.handleContentLengthHeader(true), o2?.agent != null) {
          let a3 = n2?.protocol || s || this.url;
          o2.agent === false ? this.agent = false : a3.startsWith("http:") && o2.agent instanceof We ? this.agent = o2.agent : a3.startsWith("https:") && o2.agent instanceof je && (this.agent = o2.agent);
        }
      }
      headersSerializer;
      cache;
      credentials;
      destination;
      headers;
      integrity;
      keepalive;
      method;
      mode;
      priority;
      redirect;
      referrer;
      referrerPolicy;
      _url;
      get url() {
        if (this._url == null) if (this._parsedUrl) this._url = this._parsedUrl.toString();
        else throw new TypeError("Invalid URL");
        return this._url;
      }
      _parsedUrl;
      get parsedUrl() {
        if (this._parsedUrl == null) if (this._url != null) this._parsedUrl = new S(this._url, "http://localhost");
        else throw new TypeError("Invalid URL");
        return this._parsedUrl;
      }
      duplex;
      agent;
      signal;
      clone() {
        return this;
      }
      [Symbol.toStringTag] = "Request";
    };
    de = ";base64";
    M3 = class {
      encoding;
      constructor(e3 = "utf-8") {
        this.encoding = e3;
      }
      encode(e3) {
        return H2.from(e3, this.encoding);
      }
      encodeInto(e3, t2) {
        let n2 = this.encode(e3).copy(t2);
        return { read: n2, written: n2 };
      }
    };
    $2 = class {
      encoding;
      fatal = false;
      ignoreBOM = false;
      constructor(e3 = "utf-8", t2) {
        this.encoding = e3, t2 && (this.fatal = t2.fatal || false, this.ignoreBOM = t2.ignoreBOM || false);
      }
      decode(e3) {
        return H2.isBuffer(e3) ? e3.toString(this.encoding) : C2(e3) ? H2.from(e3.buffer, e3.byteOffset, e3.byteLength).toString(this.encoding) : H2.from(e3).toString(this.encoding);
      }
    };
    ct = globalThis.URLSearchParams;
    W = class {
      writable;
      constructor(e3) {
        if (e3 instanceof Y) this.writable = e3;
        else if (e3) {
          let t2 = new Y({ write(i2, o2, a3) {
            try {
              let f3 = e3.write?.(i2, n2);
              f3 instanceof Promise ? f3.then(() => {
                a3();
              }, (u2) => {
                a3(u2);
              }) : a3();
            } catch (f3) {
              a3(f3);
            }
          }, final(i2) {
            let o2 = e3.close?.();
            o2 instanceof Promise ? o2.then(() => {
              i2();
            }, (a3) => {
              i2(a3);
            }) : i2();
          } });
          this.writable = t2;
          let s = new AbortController(), n2 = { signal: s.signal, error(i2) {
            t2.destroy(i2);
          } };
          t2.once("error", (i2) => s.abort(i2)), t2.once("close", () => s.abort());
        } else this.writable = new Y();
      }
      getWriter() {
        let e3 = this.writable;
        return { closed: new Promise((t2) => {
          e3.once("close", () => {
            t2(void 0);
          });
        }), get desiredSize() {
          return e3.writableLength;
        }, ready: new Promise((t2) => {
          e3.once("drain", () => {
            t2(void 0);
          });
        }), releaseLock() {
        }, write(t2) {
          return t2 == null ? m() : new Promise((s, n2) => {
            e3.write(t2, (i2) => {
              i2 ? n2(i2) : s();
            });
          });
        }, close() {
          return !e3.errored && e3.closed ? m() : new Promise((t2, s) => {
            e3.errored ? s(e3.errored) : e3.end((n2) => {
              n2 ? s(n2) : t2();
            });
          });
        }, abort(t2) {
          return new Promise((s) => {
            e3.destroy(t2), e3.once("close", s);
          });
        } };
      }
      close() {
        return !this.writable.errored && this.writable.closed ? m() : new Promise((e3, t2) => {
          this.writable.errored ? t2(this.writable.errored) : this.writable.end((s) => {
            s ? t2(s) : e3();
          });
        });
      }
      abort(e3) {
        return new Promise((t2) => {
          this.writable.destroy(e3), this.writable.once("close", t2);
        });
      }
      locked = false;
    };
    w2 = class {
      transform;
      writable;
      readable;
      constructor(e3) {
        if (e3 instanceof Z) this.transform = e3;
        else if (e3) {
          let t2 = { enqueue(n2) {
            s.push(n2);
          }, error(n2) {
            s.destroy(n2);
          }, terminate() {
            s.end();
          }, get desiredSize() {
            return s.writableLength;
          } }, s = new Z({ read() {
          }, write(n2, i2, o2) {
            try {
              let a3 = e3.transform?.(n2, t2);
              a3 instanceof Promise ? a3.then(() => {
                o2();
              }, (f3) => {
                o2(f3);
              }) : o2();
            } catch (a3) {
              o2(a3);
            }
          }, final(n2) {
            try {
              let i2 = e3.flush?.(t2);
              i2 instanceof Promise ? i2.then(() => {
                n2();
              }, (o2) => {
                n2(o2);
              }) : n2();
            } catch (i2) {
              n2(i2);
            }
          } });
          this.transform = s;
        } else this.transform = new Z();
        this.writable = new W(this.transform), this.readable = new h2(this.transform);
      }
    };
    Q = class extends w2 {
      static supportedFormats = __Process$2?.version?.startsWith("v2") ? ["gzip", "deflate", "br"] : ["gzip", "deflate", "deflate-raw", "br"];
      constructor(e3) {
        switch (e3) {
          case "x-gzip":
          case "gzip":
            super(bt());
            break;
          case "x-deflate":
          case "deflate":
            super(mt());
            break;
          case "deflate-raw":
            super(pt());
            break;
          case "br":
            super(dt());
            break;
          default:
            throw new Error(`Unsupported compression format: ${e3}`);
        }
      }
    };
    q = class extends w2 {
      static supportedFormats = __Process$2?.version?.startsWith("v2") ? ["gzip", "deflate", "br"] : ["gzip", "deflate", "deflate-raw", "br"];
      constructor(e3) {
        switch (e3) {
          case "x-gzip":
          case "gzip":
            super(gt());
            break;
          case "x-deflate":
          case "deflate":
            super(_t());
            break;
          case "deflate-raw":
            super(wt());
            break;
          case "br":
            super(yt());
            break;
          default:
            throw new TypeError(`Unsupported compression format: '${e3}'`);
        }
      }
    };
    ee = class extends w2 {
      textDecoder;
      constructor(e3, t2) {
        super({ transform: (s, n2) => {
          n2.enqueue(this.textDecoder.decode(s, { stream: true }));
        } }), this.textDecoder = new $2(e3, t2);
      }
      get encoding() {
        return this.textDecoder.encoding;
      }
      get fatal() {
        return this.textDecoder.fatal;
      }
      get ignoreBOM() {
        return this.textDecoder.ignoreBOM;
      }
    };
    te = class extends w2 {
      textEncoder;
      constructor(e3) {
        super({ transform: (t2, s) => {
          s.enqueue(this.textEncoder.encode(t2));
        } }), this.textEncoder = new M3(e3);
      }
      get encoding() {
        return this.textEncoder.encoding;
      }
      encode(e3) {
        return this.textEncoder.encode(e3);
      }
    };
  }
});

// https://esm.sh/@whatwg-node/node-fetch@0.7.12?target=denonext
var node_fetch_0_7_exports = {};
__export(node_fetch_0_7_exports, {
  Blob: () => I,
  Body: () => B3,
  CompressionStream: () => Q,
  DecompressionStream: () => q,
  File: () => v,
  FormData: () => N2,
  Headers: () => L,
  IteratorObject: () => g2,
  ReadableStream: () => h2,
  Request: () => D2,
  Response: () => b2,
  TextDecoder: () => $2,
  TextDecoderStream: () => ee,
  TextEncoder: () => M3,
  TextEncoderStream: () => te,
  TransformStream: () => w2,
  URL: () => S,
  URLSearchParams: () => ct,
  WritableStream: () => W,
  btoa: () => ht,
  fetch: () => me
});
var init_node_fetch_0_7 = __esm({
  "https://esm.sh/@whatwg-node/node-fetch@0.7.12?target=denonext"() {
    init_disposablestack_0_0();
    init_promise_helpers_1_2();
    init_busboy_1_6();
    init_node_fetch();
  }
});

// https://esm.sh/urlpattern-polyfill@10.0.0/denonext/urlpattern.mjs
function tt2(t2, e3) {
  return (e3 ? /^[\x00-\xFF]*$/ : /^[\x00-\x7F]*$/).test(t2);
}
function M4(t2, e3 = false) {
  let s = [], r3 = 0;
  for (; r3 < t2.length; ) {
    let a3 = t2[r3], u2 = function(o2) {
      if (!e3) throw new TypeError(o2);
      s.push({ type: "INVALID_CHAR", index: r3, value: t2[r3++] });
    };
    if (a3 === "*") {
      s.push({ type: "ASTERISK", index: r3, value: t2[r3++] });
      continue;
    }
    if (a3 === "+" || a3 === "?") {
      s.push({ type: "OTHER_MODIFIER", index: r3, value: t2[r3++] });
      continue;
    }
    if (a3 === "\\") {
      s.push({ type: "ESCAPED_CHAR", index: r3++, value: t2[r3++] });
      continue;
    }
    if (a3 === "{") {
      s.push({ type: "OPEN", index: r3, value: t2[r3++] });
      continue;
    }
    if (a3 === "}") {
      s.push({ type: "CLOSE", index: r3, value: t2[r3++] });
      continue;
    }
    if (a3 === ":") {
      let o2 = "", i2 = r3 + 1;
      for (; i2 < t2.length; ) {
        let h3 = t2.substr(i2, 1);
        if (i2 === r3 + 1 && Q2.test(h3) || i2 !== r3 + 1 && Y2.test(h3)) {
          o2 += t2[i2++];
          continue;
        }
        break;
      }
      if (!o2) {
        u2(`Missing parameter name at ${r3}`);
        continue;
      }
      s.push({ type: "NAME", index: r3, value: o2 }), r3 = i2;
      continue;
    }
    if (a3 === "(") {
      let o2 = 1, i2 = "", h3 = r3 + 1, n2 = false;
      if (t2[h3] === "?") {
        u2(`Pattern cannot start with "?" at ${h3}`);
        continue;
      }
      for (; h3 < t2.length; ) {
        if (!tt2(t2[h3], false)) {
          u2(`Invalid character '${t2[h3]}' at ${h3}.`), n2 = true;
          break;
        }
        if (t2[h3] === "\\") {
          i2 += t2[h3++] + t2[h3++];
          continue;
        }
        if (t2[h3] === ")") {
          if (o2--, o2 === 0) {
            h3++;
            break;
          }
        } else if (t2[h3] === "(" && (o2++, t2[h3 + 1] !== "?")) {
          u2(`Capturing groups are not allowed at ${h3}`), n2 = true;
          break;
        }
        i2 += t2[h3++];
      }
      if (n2) continue;
      if (o2) {
        u2(`Unbalanced pattern at ${r3}`);
        continue;
      }
      if (!i2) {
        u2(`Missing pattern at ${r3}`);
        continue;
      }
      s.push({ type: "REGEX", index: r3, value: i2 }), r3 = h3;
      continue;
    }
    s.push({ type: "CHAR", index: r3, value: t2[r3++] });
  }
  return s.push({ type: "END", index: r3, value: "" }), s;
}
function F2(t2, e3 = {}) {
  let s = M4(t2);
  e3.delimiter ??= "/#?", e3.prefixes ??= "./";
  let r3 = `[^${d2(e3.delimiter)}]+?`, a3 = [], u2 = 0, o2 = 0, i2 = "", h3 = /* @__PURE__ */ new Set(), n2 = (p3) => {
    if (o2 < s.length && s[o2].type === p3) return s[o2++].value;
  }, f3 = () => n2("OTHER_MODIFIER") ?? n2("ASTERISK"), w4 = (p3) => {
    let c3 = n2(p3);
    if (c3 !== void 0) return c3;
    let { type: l3, index: R3 } = s[o2];
    throw new TypeError(`Unexpected ${l3} at ${R3}, expected ${p3}`);
  }, E2 = () => {
    let p3 = "", c3;
    for (; c3 = n2("CHAR") ?? n2("ESCAPED_CHAR"); ) p3 += c3;
    return p3;
  }, J4 = (p3) => p3, P4 = e3.encodePart || J4, T2 = "", U3 = (p3) => {
    T2 += p3;
  }, I4 = () => {
    T2.length && (a3.push(new O(3, "", "", P4(T2), "", 3)), T2 = "");
  }, _3 = (p3, c3, l3, R3, v3) => {
    let g4 = 3;
    switch (v3) {
      case "?":
        g4 = 1;
        break;
      case "*":
        g4 = 0;
        break;
      case "+":
        g4 = 2;
        break;
    }
    if (!c3 && !l3 && g4 === 3) {
      U3(p3);
      return;
    }
    if (I4(), !c3 && !l3) {
      if (!p3) return;
      a3.push(new O(3, "", "", P4(p3), "", g4));
      return;
    }
    let m3;
    l3 ? l3 === "*" ? m3 = D3 : m3 = l3 : m3 = r3;
    let C3 = 2;
    m3 === r3 ? (C3 = 1, m3 = "") : m3 === D3 && (C3 = 0, m3 = "");
    let b4;
    if (c3 ? b4 = c3 : l3 && (b4 = u2++), h3.has(b4)) throw new TypeError(`Duplicate name '${b4}'.`);
    h3.add(b4), a3.push(new O(C3, b4, P4(p3), m3, P4(R3), g4));
  };
  for (; o2 < s.length; ) {
    let p3 = n2("CHAR"), c3 = n2("NAME"), l3 = n2("REGEX");
    if (!c3 && !l3 && (l3 = n2("ASTERISK")), c3 || l3) {
      let v3 = p3 ?? "";
      e3.prefixes.indexOf(v3) === -1 && (U3(v3), v3 = ""), I4();
      let g4 = f3();
      _3(v3, c3, l3, "", g4);
      continue;
    }
    let R3 = p3 ?? n2("ESCAPED_CHAR");
    if (R3) {
      U3(R3);
      continue;
    }
    if (n2("OPEN")) {
      let v3 = E2(), g4 = n2("NAME"), m3 = n2("REGEX");
      !g4 && !m3 && (m3 = n2("ASTERISK"));
      let C3 = E2();
      w4("CLOSE");
      let b4 = f3();
      _3(v3, g4, m3, C3, b4);
      continue;
    }
    I4(), w4("END");
  }
  return a3;
}
function d2(t2) {
  return t2.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
}
function j3(t2) {
  return t2 && t2.ignoreCase ? "ui" : "u";
}
function et2(t2, e3, s) {
  return W2(F2(t2, s), e3, s);
}
function k2(t2) {
  switch (t2) {
    case 0:
      return "*";
    case 1:
      return "?";
    case 2:
      return "+";
    case 3:
      return "";
  }
}
function W2(t2, e3, s = {}) {
  s.delimiter ??= "/#?", s.prefixes ??= "./", s.sensitive ??= false, s.strict ??= false, s.end ??= true, s.start ??= true, s.endsWith = "";
  let r3 = s.start ? "^" : "";
  for (let i2 of t2) {
    if (i2.type === 3) {
      i2.modifier === 3 ? r3 += d2(i2.value) : r3 += `(?:${d2(i2.value)})${k2(i2.modifier)}`;
      continue;
    }
    e3 && e3.push(i2.name);
    let h3 = `[^${d2(s.delimiter)}]+?`, n2 = i2.value;
    if (i2.type === 1 ? n2 = h3 : i2.type === 0 && (n2 = D3), !i2.prefix.length && !i2.suffix.length) {
      i2.modifier === 3 || i2.modifier === 1 ? r3 += `(${n2})${k2(i2.modifier)}` : r3 += `((?:${n2})${k2(i2.modifier)})`;
      continue;
    }
    if (i2.modifier === 3 || i2.modifier === 1) {
      r3 += `(?:${d2(i2.prefix)}(${n2})${d2(i2.suffix)})`, r3 += k2(i2.modifier);
      continue;
    }
    r3 += `(?:${d2(i2.prefix)}`, r3 += `((?:${n2})(?:`, r3 += d2(i2.suffix), r3 += d2(i2.prefix), r3 += `(?:${n2}))*)${d2(i2.suffix)})`, i2.modifier === 0 && (r3 += "?");
  }
  let a3 = `[${d2(s.endsWith)}]|$`, u2 = `[${d2(s.delimiter)}]`;
  if (s.end) return s.strict || (r3 += `${u2}?`), s.endsWith.length ? r3 += `(?=${a3})` : r3 += "$", new RegExp(r3, j3(s));
  s.strict || (r3 += `(?:${u2}(?=${a3}))?`);
  let o2 = false;
  if (t2.length) {
    let i2 = t2[t2.length - 1];
    i2.type === 3 && i2.modifier === 3 && (o2 = s.delimiter.indexOf(i2) > -1);
  }
  return o2 || (r3 += `(?=${u2}|${a3})`), new RegExp(r3, j3(s));
}
function rt2(t2, e3) {
  return t2.length ? t2[0] === "/" ? true : !e3 || t2.length < 2 ? false : (t2[0] == "\\" || t2[0] == "{") && t2[1] == "/" : false;
}
function G2(t2, e3) {
  return t2.startsWith(e3) ? t2.substring(e3.length, t2.length) : t2;
}
function nt2(t2, e3) {
  return t2.endsWith(e3) ? t2.substr(0, t2.length - e3.length) : t2;
}
function K2(t2) {
  return !t2 || t2.length < 2 ? false : t2[0] === "[" || (t2[0] === "\\" || t2[0] === "{") && t2[1] === "[";
}
function V(t2) {
  if (!t2) return true;
  for (let e3 of X3) if (t2.test(e3)) return true;
  return false;
}
function ot2(t2, e3) {
  if (t2 = G2(t2, "#"), e3 || t2 === "") return t2;
  let s = new URL("https://example.com");
  return s.hash = t2, s.hash ? s.hash.substring(1, s.hash.length) : "";
}
function ht2(t2, e3) {
  if (t2 = G2(t2, "?"), e3 || t2 === "") return t2;
  let s = new URL("https://example.com");
  return s.search = t2, s.search ? s.search.substring(1, s.search.length) : "";
}
function at2(t2, e3) {
  return e3 || t2 === "" ? t2 : K2(t2) ? q2(t2) : Z2(t2);
}
function ut2(t2, e3) {
  if (e3 || t2 === "") return t2;
  let s = new URL("https://example.com");
  return s.password = t2, s.password;
}
function pt2(t2, e3) {
  if (e3 || t2 === "") return t2;
  let s = new URL("https://example.com");
  return s.username = t2, s.username;
}
function ct2(t2, e3, s) {
  if (s || t2 === "") return t2;
  if (e3 && !X3.includes(e3)) return new URL(`${e3}:${t2}`).pathname;
  let r3 = t2[0] == "/";
  return t2 = new URL(r3 ? t2 : "/-" + t2, "https://example.com").pathname, r3 || (t2 = t2.substring(2, t2.length)), t2;
}
function ft2(t2, e3, s) {
  return z2(e3) === t2 && (t2 = ""), s || t2 === "" ? t2 : B4(t2);
}
function lt2(t2, e3) {
  return t2 = nt2(t2, ":"), e3 || t2 === "" ? t2 : N3(t2);
}
function z2(t2) {
  switch (t2) {
    case "ws":
    case "http":
      return "80";
    case "wws":
    case "https":
      return "443";
    case "ftp":
      return "21";
    default:
      return "";
  }
}
function N3(t2) {
  if (t2 === "") return t2;
  if (/^[-+.A-Za-z0-9]*$/.test(t2)) return t2.toLowerCase();
  throw new TypeError(`Invalid protocol '${t2}'.`);
}
function mt2(t2) {
  if (t2 === "") return t2;
  let e3 = new URL("https://example.com");
  return e3.username = t2, e3.username;
}
function dt2(t2) {
  if (t2 === "") return t2;
  let e3 = new URL("https://example.com");
  return e3.password = t2, e3.password;
}
function Z2(t2) {
  if (t2 === "") return t2;
  if (/[\t\n\r #%/:<>?@[\]^\\|]/g.test(t2)) throw new TypeError(`Invalid hostname '${t2}'`);
  let e3 = new URL("https://example.com");
  return e3.hostname = t2, e3.hostname;
}
function q2(t2) {
  if (t2 === "") return t2;
  if (/[^0-9a-fA-F[\]:]/g.test(t2)) throw new TypeError(`Invalid IPv6 hostname '${t2}'`);
  return t2.toLowerCase();
}
function B4(t2) {
  if (t2 === "" || /^[0-9]*$/.test(t2) && parseInt(t2) <= 65535) return t2;
  throw new TypeError(`Invalid port '${t2}'.`);
}
function gt2(t2) {
  if (t2 === "") return t2;
  let e3 = new URL("https://example.com");
  return e3.pathname = t2[0] !== "/" ? "/-" + t2 : t2, t2[0] !== "/" ? e3.pathname.substring(2, e3.pathname.length) : e3.pathname;
}
function wt2(t2) {
  return t2 === "" ? t2 : new URL(`data:${t2}`).pathname;
}
function yt2(t2) {
  if (t2 === "") return t2;
  let e3 = new URL("https://example.com");
  return e3.search = t2, e3.search.substring(1, e3.search.length);
}
function vt(t2) {
  if (t2 === "") return t2;
  let e3 = new URL("https://example.com");
  return e3.hash = t2, e3.hash.substring(1, e3.hash.length);
}
function H3(t2, e3) {
  if (typeof t2 != "string") throw new TypeError("parameter 1 is not of type 'string'.");
  let s = new URL(t2, e3);
  return { protocol: s.protocol.substring(0, s.protocol.length - 1), username: s.username, password: s.password, hostname: s.hostname, port: s.port, pathname: s.pathname, search: s.search !== "" ? s.search.substring(1, s.search.length) : void 0, hash: s.hash !== "" ? s.hash.substring(1, s.hash.length) : void 0 };
}
function y2(t2, e3) {
  return e3 ? A2(t2) : t2;
}
function L2(t2, e3, s) {
  let r3;
  if (typeof e3.baseURL == "string") try {
    r3 = new URL(e3.baseURL), e3.protocol === void 0 && (t2.protocol = y2(r3.protocol.substring(0, r3.protocol.length - 1), s)), !s && e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && e3.username === void 0 && (t2.username = y2(r3.username, s)), !s && e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && e3.username === void 0 && e3.password === void 0 && (t2.password = y2(r3.password, s)), e3.protocol === void 0 && e3.hostname === void 0 && (t2.hostname = y2(r3.hostname, s)), e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && (t2.port = y2(r3.port, s)), e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && e3.pathname === void 0 && (t2.pathname = y2(r3.pathname, s)), e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && e3.pathname === void 0 && e3.search === void 0 && (t2.search = y2(r3.search.substring(1, r3.search.length), s)), e3.protocol === void 0 && e3.hostname === void 0 && e3.port === void 0 && e3.pathname === void 0 && e3.search === void 0 && e3.hash === void 0 && (t2.hash = y2(r3.hash.substring(1, r3.hash.length), s));
  } catch {
    throw new TypeError(`invalid baseURL '${e3.baseURL}'.`);
  }
  if (typeof e3.protocol == "string" && (t2.protocol = lt2(e3.protocol, s)), typeof e3.username == "string" && (t2.username = pt2(e3.username, s)), typeof e3.password == "string" && (t2.password = ut2(e3.password, s)), typeof e3.hostname == "string" && (t2.hostname = at2(e3.hostname, s)), typeof e3.port == "string" && (t2.port = ft2(e3.port, t2.protocol, s)), typeof e3.pathname == "string") {
    if (t2.pathname = e3.pathname, r3 && !rt2(t2.pathname, s)) {
      let a3 = r3.pathname.lastIndexOf("/");
      a3 >= 0 && (t2.pathname = y2(r3.pathname.substring(0, a3 + 1), s) + t2.pathname);
    }
    t2.pathname = ct2(t2.pathname, t2.protocol, s);
  }
  return typeof e3.search == "string" && (t2.search = ht2(e3.search, s)), typeof e3.hash == "string" && (t2.hash = ot2(e3.hash, s)), t2;
}
function A2(t2) {
  return t2.replace(/([+*?:{}()\\])/g, "\\$1");
}
function xt(t2) {
  return t2.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
}
function $t(t2, e3) {
  e3.delimiter ??= "/#?", e3.prefixes ??= "./", e3.sensitive ??= false, e3.strict ??= false, e3.end ??= true, e3.start ??= true, e3.endsWith = "";
  let s = ".*", r3 = `[^${xt(e3.delimiter)}]+?`, a3 = /[$_\u200C\u200D\p{ID_Continue}]/u, u2 = "";
  for (let o2 = 0; o2 < t2.length; ++o2) {
    let i2 = t2[o2];
    if (i2.type === 3) {
      if (i2.modifier === 3) {
        u2 += A2(i2.value);
        continue;
      }
      u2 += `{${A2(i2.value)}}${k2(i2.modifier)}`;
      continue;
    }
    let h3 = i2.hasCustomName(), n2 = !!i2.suffix.length || !!i2.prefix.length && (i2.prefix.length !== 1 || !e3.prefixes.includes(i2.prefix)), f3 = o2 > 0 ? t2[o2 - 1] : null, w4 = o2 < t2.length - 1 ? t2[o2 + 1] : null;
    if (!n2 && h3 && i2.type === 1 && i2.modifier === 3 && w4 && !w4.prefix.length && !w4.suffix.length) if (w4.type === 3) {
      let E2 = w4.value.length > 0 ? w4.value[0] : "";
      n2 = a3.test(E2);
    } else n2 = !w4.hasCustomName();
    if (!n2 && !i2.prefix.length && f3 && f3.type === 3) {
      let E2 = f3.value[f3.value.length - 1];
      n2 = e3.prefixes.includes(E2);
    }
    n2 && (u2 += "{"), u2 += A2(i2.prefix), h3 && (u2 += `:${i2.name}`), i2.type === 2 ? u2 += `(${i2.value})` : i2.type === 1 ? h3 || (u2 += `(${r3})`) : i2.type === 0 && (!h3 && (!f3 || f3.type === 3 || f3.modifier !== 3 || n2 || i2.prefix !== "") ? u2 += "*" : u2 += `(${s})`), i2.type === 1 && h3 && i2.suffix.length && a3.test(i2.suffix[0]) && (u2 += "\\"), u2 += A2(i2.suffix), n2 && (u2 += "}"), i2.modifier !== 3 && (u2 += k2(i2.modifier));
  }
  return u2;
}
var O, Q2, Y2, D3, $3, st2, it2, X3, bt2, S2, x3, Et;
var init_urlpattern = __esm({
  "https://esm.sh/urlpattern-polyfill@10.0.0/denonext/urlpattern.mjs"() {
    O = class {
      type = 3;
      name = "";
      prefix = "";
      value = "";
      suffix = "";
      modifier = 3;
      constructor(t2, e3, s, r3, a3, u2) {
        this.type = t2, this.name = e3, this.prefix = s, this.value = r3, this.suffix = a3, this.modifier = u2;
      }
      hasCustomName() {
        return this.name !== "" && typeof this.name != "number";
      }
    };
    Q2 = /[$_\p{ID_Start}]/u;
    Y2 = /[$_\u200C\u200D\p{ID_Continue}]/u;
    D3 = ".*";
    $3 = { delimiter: "", prefixes: "", sensitive: true, strict: true };
    st2 = { delimiter: ".", prefixes: "", sensitive: true, strict: true };
    it2 = { delimiter: "/", prefixes: "/", sensitive: true, strict: true };
    X3 = ["ftp", "file", "http", "https", "ws", "wss"];
    bt2 = class {
      #n;
      #i = [];
      #e = {};
      #t = 0;
      #r = 1;
      #u = 0;
      #h = 0;
      #l = 0;
      #m = 0;
      #d = false;
      constructor(t2) {
        this.#n = t2;
      }
      get result() {
        return this.#e;
      }
      parse() {
        for (this.#i = M4(this.#n, true); this.#t < this.#i.length; this.#t += this.#r) {
          if (this.#r = 1, this.#i[this.#t].type === "END") {
            if (this.#h === 0) {
              this.#v(), this.#p() ? this.#s(9, 1) : this.#c() ? this.#s(8, 1) : this.#s(7, 0);
              continue;
            } else if (this.#h === 2) {
              this.#f(5);
              continue;
            }
            this.#s(10, 0);
            break;
          }
          if (this.#l > 0) if (this.#C()) this.#l -= 1;
          else continue;
          if (this.#k()) {
            this.#l += 1;
            continue;
          }
          switch (this.#h) {
            case 0:
              this.#b() && this.#f(1);
              break;
            case 1:
              if (this.#b()) {
                this.#O();
                let t2 = 7, e3 = 1;
                this.#$() ? (t2 = 2, e3 = 3) : this.#d && (t2 = 2), this.#s(t2, e3);
              }
              break;
            case 2:
              this.#w() ? this.#f(3) : (this.#y() || this.#c() || this.#p()) && this.#f(5);
              break;
            case 3:
              this.#E() ? this.#s(4, 1) : this.#w() && this.#s(5, 1);
              break;
            case 4:
              this.#w() && this.#s(5, 1);
              break;
            case 5:
              this.#L() ? this.#m += 1 : this.#A() && (this.#m -= 1), this.#R() && !this.#m ? this.#s(6, 1) : this.#y() ? this.#s(7, 0) : this.#c() ? this.#s(8, 1) : this.#p() && this.#s(9, 1);
              break;
            case 6:
              this.#y() ? this.#s(7, 0) : this.#c() ? this.#s(8, 1) : this.#p() && this.#s(9, 1);
              break;
            case 7:
              this.#c() ? this.#s(8, 1) : this.#p() && this.#s(9, 1);
              break;
            case 8:
              this.#p() && this.#s(9, 1);
              break;
            case 9:
              break;
            case 10:
              break;
          }
        }
        this.#e.hostname !== void 0 && this.#e.port === void 0 && (this.#e.port = "");
      }
      #s(t2, e3) {
        switch (this.#h) {
          case 0:
            break;
          case 1:
            this.#e.protocol = this.#a();
            break;
          case 2:
            break;
          case 3:
            this.#e.username = this.#a();
            break;
          case 4:
            this.#e.password = this.#a();
            break;
          case 5:
            this.#e.hostname = this.#a();
            break;
          case 6:
            this.#e.port = this.#a();
            break;
          case 7:
            this.#e.pathname = this.#a();
            break;
          case 8:
            this.#e.search = this.#a();
            break;
          case 9:
            this.#e.hash = this.#a();
            break;
          case 10:
            break;
        }
        this.#h !== 0 && t2 !== 10 && ([1, 2, 3, 4].includes(this.#h) && [6, 7, 8, 9].includes(t2) && (this.#e.hostname ??= ""), [1, 2, 3, 4, 5, 6].includes(this.#h) && [8, 9].includes(t2) && (this.#e.pathname ??= this.#d ? "/" : ""), [1, 2, 3, 4, 5, 6, 7].includes(this.#h) && t2 === 9 && (this.#e.search ??= "")), this.#x(t2, e3);
      }
      #x(t2, e3) {
        this.#h = t2, this.#u = this.#t + e3, this.#t += e3, this.#r = 0;
      }
      #v() {
        this.#t = this.#u, this.#r = 0;
      }
      #f(t2) {
        this.#v(), this.#h = t2;
      }
      #g(t2) {
        return t2 < 0 && (t2 = this.#i.length - t2), t2 < this.#i.length ? this.#i[t2] : this.#i[this.#i.length - 1];
      }
      #o(t2, e3) {
        let s = this.#g(t2);
        return s.value === e3 && (s.type === "CHAR" || s.type === "ESCAPED_CHAR" || s.type === "INVALID_CHAR");
      }
      #b() {
        return this.#o(this.#t, ":");
      }
      #$() {
        return this.#o(this.#t + 1, "/") && this.#o(this.#t + 2, "/");
      }
      #w() {
        return this.#o(this.#t, "@");
      }
      #E() {
        return this.#o(this.#t, ":");
      }
      #R() {
        return this.#o(this.#t, ":");
      }
      #y() {
        return this.#o(this.#t, "/");
      }
      #c() {
        if (this.#o(this.#t, "?")) return true;
        if (this.#i[this.#t].value !== "?") return false;
        let t2 = this.#g(this.#t - 1);
        return t2.type !== "NAME" && t2.type !== "REGEX" && t2.type !== "CLOSE" && t2.type !== "ASTERISK";
      }
      #p() {
        return this.#o(this.#t, "#");
      }
      #k() {
        return this.#i[this.#t].type == "OPEN";
      }
      #C() {
        return this.#i[this.#t].type == "CLOSE";
      }
      #L() {
        return this.#o(this.#t, "[");
      }
      #A() {
        return this.#o(this.#t, "]");
      }
      #a() {
        let t2 = this.#i[this.#t], e3 = this.#g(this.#u).index;
        return this.#n.substring(e3, t2.index);
      }
      #O() {
        let t2 = {};
        Object.assign(t2, $3), t2.encodePart = N3;
        let e3 = et2(this.#a(), void 0, t2);
        this.#d = V(e3);
      }
    };
    S2 = ["protocol", "username", "password", "hostname", "port", "pathname", "search", "hash"];
    x3 = "*";
    Et = class {
      #n;
      #i = {};
      #e = {};
      #t = {};
      #r = {};
      #u = false;
      constructor(t2 = {}, e3, s) {
        try {
          let r3;
          if (typeof e3 == "string" ? r3 = e3 : s = e3, typeof t2 == "string") {
            let i2 = new bt2(t2);
            if (i2.parse(), t2 = i2.result, r3 === void 0 && typeof t2.protocol != "string") throw new TypeError("A base URL must be provided for a relative constructor string.");
            t2.baseURL = r3;
          } else {
            if (!t2 || typeof t2 != "object") throw new TypeError("parameter 1 is not of type 'string' and cannot convert to dictionary.");
            if (r3) throw new TypeError("parameter 1 is not of type 'string'.");
          }
          typeof s > "u" && (s = { ignoreCase: false });
          let a3 = { ignoreCase: s.ignoreCase === true }, u2 = { pathname: x3, protocol: x3, username: x3, password: x3, hostname: x3, port: x3, search: x3, hash: x3 };
          this.#n = L2(u2, t2, true), z2(this.#n.protocol) === this.#n.port && (this.#n.port = "");
          let o2;
          for (o2 of S2) {
            if (!(o2 in this.#n)) continue;
            let i2 = {}, h3 = this.#n[o2];
            switch (this.#e[o2] = [], o2) {
              case "protocol":
                Object.assign(i2, $3), i2.encodePart = N3;
                break;
              case "username":
                Object.assign(i2, $3), i2.encodePart = mt2;
                break;
              case "password":
                Object.assign(i2, $3), i2.encodePart = dt2;
                break;
              case "hostname":
                Object.assign(i2, st2), K2(h3) ? i2.encodePart = q2 : i2.encodePart = Z2;
                break;
              case "port":
                Object.assign(i2, $3), i2.encodePart = B4;
                break;
              case "pathname":
                V(this.#i.protocol) ? (Object.assign(i2, it2, a3), i2.encodePart = gt2) : (Object.assign(i2, $3, a3), i2.encodePart = wt2);
                break;
              case "search":
                Object.assign(i2, $3, a3), i2.encodePart = yt2;
                break;
              case "hash":
                Object.assign(i2, $3, a3), i2.encodePart = vt;
                break;
            }
            try {
              this.#r[o2] = F2(h3, i2), this.#i[o2] = W2(this.#r[o2], this.#e[o2], i2), this.#t[o2] = $t(this.#r[o2], i2), this.#u = this.#u || this.#r[o2].some((n2) => n2.type === 2);
            } catch {
              throw new TypeError(`invalid ${o2} pattern '${this.#n[o2]}'.`);
            }
          }
        } catch (r3) {
          throw new TypeError(`Failed to construct 'URLPattern': ${r3.message}`);
        }
      }
      test(t2 = {}, e3) {
        let s = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };
        if (typeof t2 != "string" && e3) throw new TypeError("parameter 1 is not of type 'string'.");
        if (typeof t2 > "u") return false;
        try {
          typeof t2 == "object" ? s = L2(s, t2, false) : s = L2(s, H3(t2, e3), false);
        } catch {
          return false;
        }
        let r3;
        for (r3 of S2) if (!this.#i[r3].exec(s[r3])) return false;
        return true;
      }
      exec(t2 = {}, e3) {
        let s = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };
        if (typeof t2 != "string" && e3) throw new TypeError("parameter 1 is not of type 'string'.");
        if (typeof t2 > "u") return;
        try {
          typeof t2 == "object" ? s = L2(s, t2, false) : s = L2(s, H3(t2, e3), false);
        } catch {
          return null;
        }
        let r3 = {};
        e3 ? r3.inputs = [t2, e3] : r3.inputs = [t2];
        let a3;
        for (a3 of S2) {
          let u2 = this.#i[a3].exec(s[a3]);
          if (!u2) return null;
          let o2 = {};
          for (let [i2, h3] of this.#e[a3].entries()) if (typeof h3 == "string" || typeof h3 == "number") {
            let n2 = u2[i2 + 1];
            o2[h3] = n2;
          }
          r3[a3] = { input: s[a3] ?? "", groups: o2 };
        }
        return r3;
      }
      static compareComponent(t2, e3, s) {
        let r3 = (i2, h3) => {
          for (let n2 of ["type", "modifier", "prefix", "value", "suffix"]) {
            if (i2[n2] < h3[n2]) return -1;
            if (i2[n2] !== h3[n2]) return 1;
          }
          return 0;
        }, a3 = new O(3, "", "", "", "", 3), u2 = new O(0, "", "", "", "", 3), o2 = (i2, h3) => {
          let n2 = 0;
          for (; n2 < Math.min(i2.length, h3.length); ++n2) {
            let f3 = r3(i2[n2], h3[n2]);
            if (f3) return f3;
          }
          return i2.length === h3.length ? 0 : r3(i2[n2] ?? a3, h3[n2] ?? a3);
        };
        return !e3.#t[t2] && !s.#t[t2] ? 0 : e3.#t[t2] && !s.#t[t2] ? o2(e3.#r[t2], [u2]) : !e3.#t[t2] && s.#t[t2] ? o2([u2], s.#r[t2]) : o2(e3.#r[t2], s.#r[t2]);
      }
      get protocol() {
        return this.#t.protocol;
      }
      get username() {
        return this.#t.username;
      }
      get password() {
        return this.#t.password;
      }
      get hostname() {
        return this.#t.hostname;
      }
      get port() {
        return this.#t.port;
      }
      get pathname() {
        return this.#t.pathname;
      }
      get search() {
        return this.#t.search;
      }
      get hash() {
        return this.#t.hash;
      }
      get hasRegExpGroups() {
        return this.#u;
      }
    };
  }
});

// https://esm.sh/urlpattern-polyfill@10.0.0/denonext/urlpattern-polyfill.mjs
var init_urlpattern_polyfill = __esm({
  "https://esm.sh/urlpattern-polyfill@10.0.0/denonext/urlpattern-polyfill.mjs"() {
    init_urlpattern();
    globalThis.URLPattern || (globalThis.URLPattern = Et);
  }
});

// https://esm.sh/urlpattern-polyfill@10.0.0?target=denonext
var urlpattern_polyfill_10_0_exports = {};
__export(urlpattern_polyfill_10_0_exports, {
  URLPattern: () => Et
});
var init_urlpattern_polyfill_10_0 = __esm({
  "https://esm.sh/urlpattern-polyfill@10.0.0?target=denonext"() {
    init_urlpattern();
    init_urlpattern_polyfill();
  }
});

// https://esm.sh/@whatwg-node/fetch@0.10.5/denonext/fetch.mjs
import * as __2$ from "node:crypto";
var require3, f2, b3, D4, L3, g3, y3, c2, p2, P3, U2, T, x4, u, n, w3, M5, _2, J2, O2, X4, v2, z3, A3, G3, I2, K3, Q3, V2, Y3, Z3, $4, ee2, re2, te2, oe2, ae2, se3;
var init_fetch = __esm({
  "https://esm.sh/@whatwg-node/fetch@0.10.5/denonext/fetch.mjs"() {
    init_urlpattern_polyfill_10_0();
    init_node_fetch_0_7();
    require3 = (n2) => {
      const e3 = (m3) => typeof m3.default < "u" ? m3.default : m3, c3 = (m3) => Object.assign({ __esModule: true }, m3);
      switch (n2) {
        case "urlpattern-polyfill":
          return c3(urlpattern_polyfill_10_0_exports);
        case "@whatwg-node/node-fetch":
          return c3(node_fetch_0_7_exports);
        case "node:crypto":
          return e3(__2$);
        default:
          console.error('module "' + n2 + '" not found');
          return null;
      }
    };
    f2 = Object.create;
    b3 = Object.defineProperty;
    D4 = Object.getOwnPropertyDescriptor;
    L3 = Object.getOwnPropertyNames;
    g3 = Object.getPrototypeOf;
    y3 = Object.prototype.hasOwnProperty;
    c2 = ((r3) => typeof require3 < "u" ? require3 : typeof Proxy < "u" ? new Proxy(r3, { get: (a3, e3) => (typeof require3 < "u" ? require3 : a3)[e3] }) : r3)(function(r3) {
      if (typeof require3 < "u") return require3.apply(this, arguments);
      throw Error('Dynamic require of "' + r3 + '" is not supported');
    });
    p2 = (r3, a3) => () => (a3 || r3((a3 = { exports: {} }).exports, a3), a3.exports);
    P3 = (r3, a3, e3, i2) => {
      if (a3 && typeof a3 == "object" || typeof a3 == "function") for (let l3 of L3(a3)) !y3.call(r3, l3) && l3 !== e3 && b3(r3, l3, { get: () => a3[l3], enumerable: !(i2 = D4(a3, l3)) || i2.enumerable });
      return r3;
    };
    U2 = (r3, a3, e3) => (e3 = r3 != null ? f2(g3(r3)) : {}, P3(a3 || !r3 || !r3.__esModule ? b3(e3, "default", { value: r3, enumerable: true }) : e3, r3));
    T = p2((W4, d3) => {
      function q4() {
        return Object.keys(globalThis).some((r3) => r3.startsWith("__NEXT"));
      }
      d3.exports = function() {
        return !!(globalThis.Deno || globalThis.Bun || q4());
      };
    });
    x4 = p2((k3, S3) => {
      var F3 = T(), t2;
      S3.exports = function(a3 = {}) {
        let e3 = {};
        if (e3.URLPattern = globalThis.URLPattern, !e3.URLPattern) {
          let i2 = c2("urlpattern-polyfill");
          e3.URLPattern = i2.URLPattern;
        }
        if (a3.skipPonyfill || F3()) return { fetch: globalThis.fetch, Headers: globalThis.Headers, Request: globalThis.Request, Response: globalThis.Response, FormData: globalThis.FormData, ReadableStream: globalThis.ReadableStream, WritableStream: globalThis.WritableStream, TransformStream: globalThis.TransformStream, CompressionStream: globalThis.CompressionStream, DecompressionStream: globalThis.DecompressionStream, TextDecoderStream: globalThis.TextDecoderStream, TextEncoderStream: globalThis.TextEncoderStream, Blob: globalThis.Blob, File: globalThis.File, crypto: globalThis.crypto, btoa: globalThis.btoa, TextEncoder: globalThis.TextEncoder, TextDecoder: globalThis.TextDecoder, URLPattern: e3.URLPattern, URL: globalThis.URL, URLSearchParams: globalThis.URLSearchParams };
        if (t2 ||= c2("@whatwg-node/node-fetch"), e3.fetch = t2.fetch, e3.Request = t2.Request, e3.Response = t2.Response, e3.Headers = t2.Headers, e3.FormData = t2.FormData, e3.ReadableStream = t2.ReadableStream, e3.URL = t2.URL, e3.URLSearchParams = t2.URLSearchParams, e3.WritableStream = t2.WritableStream, e3.TransformStream = t2.TransformStream, e3.CompressionStream = t2.CompressionStream, e3.DecompressionStream = t2.DecompressionStream, e3.TextDecoderStream = t2.TextDecoderStream, e3.TextEncoderStream = t2.TextEncoderStream, e3.Blob = t2.Blob, e3.File = t2.File, e3.crypto = globalThis.crypto, e3.btoa = t2.btoa, e3.TextEncoder = t2.TextEncoder, e3.TextDecoder = t2.TextDecoder, a3.formDataLimits && (e3.Body = class extends t2.Body {
          constructor(l3, m3) {
            super(l3, { formDataLimits: a3.formDataLimits, ...m3 });
          }
        }, e3.Request = class extends t2.Request {
          constructor(l3, m3) {
            super(l3, { formDataLimits: a3.formDataLimits, ...m3 });
          }
        }, e3.Response = class extends t2.Response {
          constructor(l3, m3) {
            super(l3, { formDataLimits: a3.formDataLimits, ...m3 });
          }
        }), !e3.crypto) {
          let i2 = c2("node:crypto");
          e3.crypto = i2.webcrypto;
        }
        return e3;
      };
    });
    u = p2((h3, o2) => {
      var R3 = x4(), E2 = T(), s = R3();
      if (!E2()) try {
        let r3 = "node-libcurl";
        globalThis.libcurl = globalThis.libcurl || c2(r3);
      } catch {
      }
      o2.exports.fetch = s.fetch;
      o2.exports.Headers = s.Headers;
      o2.exports.Request = s.Request;
      o2.exports.Response = s.Response;
      o2.exports.FormData = s.FormData;
      o2.exports.ReadableStream = s.ReadableStream;
      o2.exports.WritableStream = s.WritableStream;
      o2.exports.TransformStream = s.TransformStream;
      o2.exports.CompressionStream = s.CompressionStream;
      o2.exports.DecompressionStream = s.DecompressionStream;
      o2.exports.TextDecoderStream = s.TextDecoderStream;
      o2.exports.TextEncoderStream = s.TextEncoderStream;
      o2.exports.Blob = s.Blob;
      o2.exports.File = s.File;
      o2.exports.crypto = s.crypto;
      o2.exports.btoa = s.btoa;
      o2.exports.TextEncoder = s.TextEncoder;
      o2.exports.TextDecoder = s.TextDecoder;
      o2.exports.URLPattern = s.URLPattern;
      o2.exports.URL = s.URL;
      o2.exports.URLSearchParams = s.URLSearchParams;
      h3.createFetch = R3;
    });
    n = U2(u());
    ({ fetch: w3, Headers: M5, Request: _2, Response: J2, FormData: O2, ReadableStream: X4, WritableStream: v2, TransformStream: z3, CompressionStream: A3, DecompressionStream: G3, TextDecoderStream: I2, TextEncoderStream: K3, Blob: Q3, File: V2, crypto: Y3, btoa: Z3, TextEncoder: $4, TextDecoder: ee2, URLPattern: re2, URL: te2, URLSearchParams: oe2, createFetch: ae2 } = n);
    se3 = n.default ?? n;
  }
});

// https://esm.sh/@whatwg-node/fetch@0.10.5?target=denonext
var fetch_0_10_exports = {};
__export(fetch_0_10_exports, {
  Blob: () => Q3,
  CompressionStream: () => A3,
  DecompressionStream: () => G3,
  File: () => V2,
  FormData: () => O2,
  Headers: () => M5,
  ReadableStream: () => X4,
  Request: () => _2,
  Response: () => J2,
  TextDecoder: () => ee2,
  TextDecoderStream: () => I2,
  TextEncoder: () => $4,
  TextEncoderStream: () => K3,
  TransformStream: () => z3,
  URL: () => te2,
  URLPattern: () => re2,
  URLSearchParams: () => oe2,
  WritableStream: () => v2,
  btoa: () => Z3,
  createFetch: () => ae2,
  crypto: () => Y3,
  default: () => se3,
  fetch: () => w3
});
var init_fetch_0_10 = __esm({
  "https://esm.sh/@whatwg-node/fetch@0.10.5?target=denonext"() {
    init_node_fetch_0_7();
    init_urlpattern_polyfill_10_0();
    init_fetch();
    init_fetch();
  }
});

// https://esm.sh/@whatwg-node/server@0.9.70/denonext/server.mjs
import __Process$3 from "node:process";
import { Buffer as __Buffer$3 } from "node:buffer";
function V3(e3) {
  return e3 != null && typeof e3 == "object" && typeof e3[Symbol.asyncIterator] == "function";
}
function he2(e3) {
  if (e3.socket?.localPort) return e3.socket?.localPort;
  let n2 = (e3.headers?.[":authority"] || e3.headers?.host)?.split(":")?.[1];
  return n2 || 80;
}
function pe(e3) {
  if (e3.headers?.[":authority"]) return e3.headers?.[":authority"];
  if (e3.headers?.host) return e3.headers?.host;
  let t2 = he2(e3);
  if (e3.hostname) return e3.hostname + ":" + t2;
  let n2 = e3.socket?.localAddress;
  return n2 && !n2?.includes("::") && !n2?.includes("ffff") ? `${n2}:${t2}` : "localhost";
}
function me2(e3) {
  let t2 = pe(e3), n2 = e3.protocol || (e3.socket?.encrypted ? "https" : "http"), r3 = e3.originalUrl || e3.url || "/graphql";
  return `${n2}://${t2}${r3}`;
}
function ye2(e3) {
  let t2 = e3[Symbol.toStringTag];
  return !!(typeof e3 == "string" || t2 === "Uint8Array" || t2 === "Blob" || t2 === "FormData" || t2 === "URLSearchParams" || V3(e3));
}
function te3(e3, t2) {
  let n2 = e3.raw || e3.req || e3, r3 = me2(n2);
  if (e3.query) {
    let c3 = new t2.URL(r3);
    for (let g4 in e3.query) c3.searchParams.set(g4, e3.query[g4]);
    r3 = c3.toString();
  }
  let s = B5.get(e3);
  B5.delete(e3);
  let a3 = e3.headers;
  if (e3.headers?.[":method"]) {
    a3 = {};
    for (let c3 in e3.headers) c3.startsWith(":") || (a3[c3] = e3.headers[c3]);
  }
  let l3 = new AbortController();
  if (s?.once) {
    let c3 = () => {
      l3.signal.aborted || (Object.defineProperty(n2, "aborted", { value: true }), l3.abort(s.errored ?? void 0));
    };
    s.once("error", c3), s.once("close", c3), s.once("finish", () => {
      s.removeListener("close", c3);
    });
  }
  if (e3.method === "GET" || e3.method === "HEAD") return new t2.Request(r3, { method: e3.method, headers: a3, signal: l3.signal });
  let d3 = e3.body;
  if (d3 != null && Object.keys(d3).length > 0) {
    if (ye2(d3)) return new t2.Request(r3, { method: e3.method || "GET", headers: a3, body: d3, signal: l3.signal });
    let c3 = new t2.Request(r3, { method: e3.method || "GET", headers: a3, signal: l3.signal });
    return c3.headers.get("content-type")?.includes("json") || c3.headers.set("content-type", "application/json; charset=utf-8"), new Proxy(c3, { get: (g4, m3, k3) => {
      switch (m3) {
        case "json":
          return () => m(d3);
        case "text":
          return () => m(JSON.stringify(d3));
        default:
          return Reflect.get(g4, m3, k3);
      }
    } });
  }
  return __Process$3?.versions?.bun && N4(n2) ? (I3 || (I3 = true, console.warn(`You use Bun Node compatibility mode, which is not recommended!
It will affect your performance. Please check our Bun integration recipe, and avoid using 'http' for your server implementation.`)), new t2.Request(r3, { method: e3.method, headers: a3, duplex: "half", body: new ReadableStream({ start(c3) {
    n2.on("data", (g4) => {
      c3.enqueue(g4);
    }), n2.on("error", (g4) => {
      c3.error(g4);
    }), n2.on("end", () => {
      c3.close();
    });
  }, cancel(c3) {
    n2.destroy(c3);
  } }), signal: l3.signal })) : new t2.Request(r3, { method: e3.method, headers: a3, signal: l3.signal, body: n2, duplex: "half" });
}
function N4(e3) {
  return e3.read != null;
}
function ne2(e3) {
  return N4(e3);
}
function q3(e3) {
  return e3 != null && e3.setHeader != null && e3.end != null && e3.once != null && e3.write != null;
}
function be(e3) {
  return e3 != null && e3.getReader != null;
}
function re3(e3) {
  return e3 != null && e3.request != null && e3.respondWith != null;
}
function we2(e3) {
  e3?.socket?.setTimeout?.(0), e3?.socket?.setNoDelay?.(true), e3?.socket?.setKeepAlive?.(true);
}
function W3(e3) {
  e3.end(null, null, null);
}
async function Se2(e3, t2) {
  let n2 = false, r3 = () => {
    n2 = true;
  };
  e3.once("error", r3), e3.once("close", r3), e3.once("finish", () => {
    e3.removeListener("close", r3);
  });
  for await (let s of t2) if (n2 || await new Promise((l3) => {
    if (!e3.write(s, (d3) => {
      d3 && l3(true);
    })) {
      if (n2) {
        l3(true);
        return;
      }
      e3.once("drain", () => {
        l3(false);
      });
    }
  })) break;
  W3(e3);
}
function oe3(e3, t2, n2) {
  if (t2.closed || t2.destroyed || t2.writableEnded) return;
  if (!e3) {
    t2.statusCode = 404, W3(t2);
    return;
  }
  t2.statusCode = e3.status, t2.statusMessage = e3.statusText;
  let r3 = false;
  e3.headers.forEach((l3, d3) => {
    if (d3 === "set-cookie") {
      if (r3) return;
      r3 = true;
      let c3 = e3.headers.getSetCookie?.();
      if (c3) {
        t2.setHeader("set-cookie", c3);
        return;
      }
    }
    t2.setHeader(d3, l3);
  });
  let s = e3._buffer;
  if (s) {
    t2.write(s), W3(t2);
    return;
  }
  let a3 = e3.body;
  if (a3 == null) {
    W3(t2);
    return;
  }
  if (a3[Symbol.toStringTag] === "Uint8Array") {
    t2.write(a3), W3(t2);
    return;
  }
  if (we2(n2), N4(a3)) {
    t2.once("close", () => {
      a3.destroy();
    }), a3.pipe(t2);
    return;
  }
  if (be(a3)) return xe2(n2, t2, a3);
  if (V3(a3)) return Se2(t2, a3);
}
async function xe2(e3, t2, n2) {
  let r3 = n2.getReader();
  for (e3?.once?.("error", (s) => {
    r3.cancel(s);
  }); ; ) {
    let { done: s, value: a3 } = await r3.read();
    if (s) break;
    t2.write(a3) || await new Promise((l3) => t2.once("drain", l3));
  }
  W3(t2);
}
function ie2(e3) {
  return e3 != null && typeof e3 == "object" && ("body" in e3 || "cache" in e3 || "credentials" in e3 || "headers" in e3 || "integrity" in e3 || "keepalive" in e3 || "method" in e3 || "mode" in e3 || "redirect" in e3 || "referrer" in e3 || "referrerPolicy" in e3 || "signal" in e3 || "window" in e3);
}
function $5(...e3) {
  let [t2, ...n2] = e3.filter((r3) => r3 != null && typeof r3 == "object");
  return n2.forEach((r3) => {
    let s = Object.getOwnPropertyNames(r3).reduce((a3, l3) => (Object.getOwnPropertyDescriptor(r3, l3) && (a3[l3] = Object.getOwnPropertyDescriptor(r3, l3)), a3), {});
    Object.getOwnPropertySymbols(r3).forEach((a3) => {
      let l3 = Object.getOwnPropertyDescriptor(r3, a3);
      l3?.enumerable && (s[a3] = l3);
    }), Object.defineProperties(t2, s);
  }), t2;
}
function J3(e3, t2) {
  return new t2(e3.stack || e3.message || e3.toString(), { status: e3.status || 500 });
}
function Y4(e3, t2) {
  return e3 == null ? t2 == null ? {} : { waitUntil: t2 } : $5(Object.create(e3), { waitUntil: t2 }, e3);
}
function K4(e3, t2) {
  if (t2?.aborted) throw t2.reason;
  if (a(e3) && t2) {
    let r3 = function() {
      n2.reject(t2.reason);
    }, n2 = P();
    return t2.addEventListener("abort", r3, { once: true }), e3.then(function(a3) {
      n2.resolve(a3);
    }).catch(function(a3) {
      n2.reject(a3);
    }).finally(() => {
      t2.removeEventListener("abort", r3);
    }), n2.promise;
  }
  return e3;
}
function ke2() {
  if (!ee3) {
    ee3 = true;
    for (let e3 of Ee) __Process$3.once(e3, function() {
      return Promise.allSettled([...L4].map((n2) => !n2.disposed && n2.disposeAsync()));
    });
  }
}
function se4(e3) {
  __Process$3 && (ke2(), L4.has(e3) || (L4.add(e3), e3.defer(() => {
    L4.delete(e3);
  })));
}
function ae3(e3) {
  return !!e3.onData;
}
function le2({ req: e3, res: t2, fetchAPI: n2, controller: r3 }) {
  let s = e3.getMethod(), a3, l3 = [], d3 = [(o2) => {
    l3.push(o2);
  }], c3 = (o2) => {
    for (let i2 of d3) i2(o2);
  }, g4 = false, m3 = [() => {
    g4 = true;
  }], k3 = () => {
    for (let o2 of m3) o2();
  };
  t2.onData(function(o2, i2) {
    c3(__Buffer$3.from(__Buffer$3.from(o2, 0, o2.byteLength))), i2 && k3();
  });
  let H4;
  if (s !== "get" && s !== "head") {
    a3 = "half", r3.signal.addEventListener("abort", () => {
      k3();
    }, { once: true });
    let o2;
    H4 = () => (o2 || (o2 = new n2.ReadableStream({ start(i2) {
      for (let u2 of l3) i2.enqueue(u2);
      if (g4) {
        i2.close();
        return;
      }
      d3.push((u2) => {
        i2.enqueue(u2);
      }), m3.push(() => {
        i2.desiredSize && i2.close();
      });
    } })), o2);
  }
  let U3 = new n2.Headers();
  e3.forEach((o2, i2) => {
    U3.append(o2, i2);
  });
  let D5 = `http://localhost${e3.getUrl()}`, P4 = e3.getQuery();
  P4 && (D5 += `?${P4}`);
  let w4;
  function O3() {
    return H4 ? g4 ? A4() : H4() : null;
  }
  let S3 = new n2.Request(D5, { method: s, headers: U3, get body() {
    return O3();
  }, signal: r3.signal, duplex: a3 });
  function A4() {
    return w4 || (w4 = l3.length === 1 ? l3[0] : __Buffer$3.concat(l3)), w4;
  }
  function T2() {
    return g4 ? m(A4()) : new Promise((o2, i2) => {
      try {
        m3.push(() => {
          o2(A4());
        });
      } catch (u2) {
        i2(u2);
      }
    });
  }
  return Object.defineProperties(S3, { body: { get() {
    return O3();
  }, configurable: true, enumerable: true }, json: { value() {
    return T2().then((o2) => o2.toString("utf8")).then((o2) => JSON.parse(o2));
  }, configurable: true, enumerable: true }, text: { value() {
    return T2().then((o2) => o2.toString("utf8"));
  }, configurable: true, enumerable: true }, arrayBuffer: { value() {
    return T2();
  }, configurable: true, enumerable: true } }), S3;
}
function He(e3, t2) {
  return new t2.WritableStream({ write(n2) {
    e3.cork(() => {
      e3.write(n2);
    });
  }, close() {
    e3.cork(() => {
      e3.end();
    });
  } });
}
function ce2(e3, t2, n2, r3) {
  if (!t2) {
    e3.writeStatus("404 Not Found"), e3.end();
    return;
  }
  let s = t2._buffer;
  if (!n2.signal.aborted && (e3.cork(() => {
    e3.writeStatus(`${t2.status} ${t2.statusText}`);
    for (let [a3, l3] of t2.headers) if (a3 !== "content-length") {
      if (a3 === "set-cookie") {
        let d3 = t2.headers.getSetCookie?.();
        if (d3) {
          for (let c3 of d3) e3.writeHeader(a3, c3);
          continue;
        }
      }
      e3.writeHeader(a3, l3);
    }
    s ? e3.end(s) : t2.body || e3.end();
  }), !(s || !t2.body))) return n2.signal.addEventListener("abort", () => {
    t2.body?.locked || t2.body?.cancel(n2.signal.reason);
  }, { once: true }), t2.body.pipeTo(He(e3, r3), { signal: n2.signal }).catch((a3) => {
    if (!n2.signal.aborted) throw a3;
  });
}
function Ce2(e3) {
  try {
    return !!e3?.request;
  } catch {
    return false;
  }
}
function Ye2(e3, t2) {
  let n2 = { ...fetch_0_10_exports, ...t2?.fetchAPI }, r3 = typeof e3 == "function" ? e3 : e3.handle, s = [], a3 = [], l3 = /* @__PURE__ */ new Set(), d3;
  function c3() {
    return d3 || (d3 = new $(), t2?.disposeOnProcessTerminate && se4(d3), d3.defer(() => {
      if (l3.size > 0) return Promise.allSettled(l3).then(() => {
        l3.clear();
      }, () => {
        l3.clear();
      });
    })), d3;
  }
  function g4(o2) {
    a(o2) && (c3(), l3.add(o2), o2.then(() => {
      l3.delete(o2);
    }, (i2) => {
      console.error(`Unexpected error while waiting: ${i2.message || i2}`), l3.delete(o2);
    }));
  }
  if (t2?.plugins != null) for (let o2 of t2.plugins) {
    o2.onRequest && s.push(o2.onRequest), o2.onResponse && a3.push(o2.onResponse);
    let i2 = o2[o.dispose];
    i2 && c3().defer(i2);
    let u2 = o2[o.asyncDispose];
    u2 && c3().defer(u2), o2.onDispose && c3().defer(o2.onDispose);
  }
  let m3 = s.length > 0 || a3.length > 0 ? function(i2, u2) {
    let f3 = r3, h3;
    if (s.length === 0) return F3();
    let p3 = i2.parsedUrl || new Proxy(Ue2, { get(b4, M6, x5) {
      return p3 = new n2.URL(i2.url, "http://localhost"), Reflect.get(p3, M6, p3);
    } });
    function y4(b4) {
      return a3.length === 0 ? b4 : l(() => R(a3, (M6) => M6({ request: i2, response: b4, serverContext: u2, setResponse(x5) {
        b4 = x5;
      }, fetchAPI: n2 })), () => b4);
    }
    function F3() {
      return h3 ? y4(h3) : l(() => f3(i2, u2), y4);
    }
    return l(() => R(s, (b4, M6) => b4({ request: i2, setRequest(x5) {
      i2 = x5;
    }, serverContext: u2, fetchAPI: n2, url: p3, requestHandler: f3, setRequestHandler(x5) {
      f3 = x5;
    }, endResponse(x5) {
      h3 = x5, x5 && M6();
    } })), F3);
  } : r3;
  function k3(o2, ...i2) {
    let u2 = i2.length > 1 ? $5(...i2) : i2[0] || {};
    u2.waitUntil || (u2.waitUntil = g4);
    let f3 = te3(o2, n2);
    return m3(f3, u2);
  }
  function H4(o2, i2, ...u2) {
    let f3 = i2.raw || i2;
    return B5.set(o2, f3), k3(o2, ...u2);
  }
  function U3(o2, i2, ...u2) {
    let f3 = { req: o2, res: i2, waitUntil: g4 };
    return l(() => l(() => H4(o2, i2, f3, ...u2), (h3) => h3, (h3) => J3(h3, n2.Response)), (h3) => l(() => oe3(h3, i2, o2), (p3) => p3, (p3) => console.error(`Unexpected error while handling request: ${p3.message || p3}`)));
  }
  function D5(o2, i2, ...u2) {
    let f3 = { res: o2, req: i2, waitUntil: g4 }, p3 = u2.filter((E2) => E2 != null).length > 0 ? $5(f3, ...u2) : f3, y4 = new AbortController(), F3 = o2.end.bind(o2), b4 = false;
    o2.end = function(E2) {
      return b4 = true, F3(E2);
    }, o2.onAborted.bind(o2)(function() {
      y4.abort();
    }), o2.onAborted = function(E2) {
      y4.signal.addEventListener("abort", E2, { once: true });
    };
    let x5 = le2({ req: i2, res: o2, fetchAPI: n2, controller: y4 });
    return l(() => l(() => m3(x5, p3), (E2) => E2, (E2) => J3(E2, n2.Response)), (E2) => {
      if (!y4.signal.aborted && !b4) return l(() => ce2(o2, E2, y4, n2), (j4) => j4, (j4) => {
        console.error(`Unexpected error while handling request: ${j4.message || j4}`);
      });
    });
  }
  function P4(o2, ...i2) {
    if (!o2.respondWith || !o2.request) throw new TypeError(`Expected FetchEvent, got ${o2}`);
    let u2 = i2.filter((p3) => p3 != null), f3 = u2.length > 0 ? $5({}, o2, ...u2) : Y4(o2), h3 = m3(o2.request, f3);
    o2.respondWith(h3);
  }
  function w4(o2, ...i2) {
    let u2 = i2.filter((h3) => h3 != null), f3 = u2.length > 1 ? $5({}, ...u2) : Y4(u2[0], u2[0] == null || u2[0].waitUntil == null ? g4 : void 0);
    return m3(o2, f3);
  }
  let O3 = (o2, ...i2) => {
    if (typeof o2 == "string" || "href" in o2) {
      let [f3, ...h3] = i2;
      if (ie2(f3)) {
        let y4 = new n2.Request(o2, f3), F3 = w4(y4, ...h3), b4 = f3.signal;
        return b4 ? K4(F3, b4) : F3;
      }
      let p3 = new n2.Request(o2);
      return w4(p3, ...i2);
    }
    let u2 = w4(o2, ...i2);
    return K4(u2, o2.signal);
  }, S3 = (o2, ...i2) => {
    let [u2, ...f3] = i2;
    if (ne2(o2)) {
      if (!q3(u2)) throw new TypeError(`Expected ServerResponse, got ${u2}`);
      return U3(o2, u2, ...f3);
    }
    if (ae3(o2)) return D5(o2, u2, ...f3);
    if (q3(u2)) throw new TypeError("Got Node response without Node request");
    return Ce2(o2) ? re3(o2) ? P4(o2, ...i2) : w4(o2.request, o2, ...i2) : O3(o2, ...i2);
  }, A4 = { handleRequest: w4, fetch: O3, handleNodeRequest: k3, handleNodeRequestAndResponse: H4, requestListener: U3, handleEvent: P4, handleUWS: D5, handle: S3, get disposableStack() {
    return c3();
  }, [o.asyncDispose]() {
    return d3 && !d3.disposed ? d3.disposeAsync() : m();
  }, dispose() {
    return d3 && !d3.disposed ? d3.disposeAsync() : m();
  } }, T2 = new Proxy(S3, { has: (o2, i2) => i2 in A4 || i2 in S3 || e3 && i2 in e3, get: (o2, i2) => {
    let u2 = A4[i2];
    if (u2) return u2.bind ? u2.bind(A4) : u2;
    let f3 = S3[i2];
    if (f3) return f3.bind ? f3.bind(S3) : f3;
    if (e3) {
      let h3 = e3[i2];
      if (h3) return h3.bind ? function(...p3) {
        let y4 = e3[i2](...p3);
        return y4 === e3 ? T2 : y4;
      } : h3;
    }
  }, apply(o2, i2, u2) {
    return S3(...u2);
  } });
  return T2;
}
var I3, B5, Ee, L4, ee3, Ue2;
var init_server = __esm({
  "https://esm.sh/@whatwg-node/server@0.9.70/denonext/server.mjs"() {
    init_disposablestack_0_0();
    init_fetch_0_10();
    init_promise_helpers_1_2();
    init_promise_helpers_1_2();
    init_promise_helpers_1_2();
    init_promise_helpers_1_2();
    init_promise_helpers_1_2();
    init_fetch_0_10();
    init_promise_helpers_1_2();
    init_fetch_0_10();
    init_disposablestack_0_0();
    I3 = false;
    B5 = /* @__PURE__ */ new WeakMap();
    Ee = ["SIGINT", "exit", "SIGTERM"];
    L4 = /* @__PURE__ */ new Set();
    ee3 = false;
    Ue2 = {};
  }
});

// https://esm.sh/@whatwg-node/server@0.9.70
var init_server_0_9 = __esm({
  "https://esm.sh/@whatwg-node/server@0.9.70"() {
    init_disposablestack_0_0();
    init_fetch_0_10();
    init_promise_helpers_1_2();
    init_server();
  }
});

// ../debuno-serve/src/node.ts
var node_exports = {};
__export(node_exports, {
  ENV: () => ENV3,
  readDir: () => readDir4,
  readFile: () => readFile7,
  serve: () => serve3,
  writeFile: () => writeFile5
});
import { createServer } from "node:http";
function serve3(options) {
  const nodeRequestHandler = Ye2(options.fetch);
  const server = createServer(nodeRequestHandler);
  server.on("error", (err) => options.onError?.(err));
  server.on("listening", () => {
    const { port, address: hostname } = server.address();
    options.onListen?.({
      port,
      hostname,
      url: new URL(`http://${toLocalhost(hostname)}:${port}`)
    });
  });
  return server.listen(options.port, options.hostname);
}
async function readFile7(filePath) {
  try {
    const fs3 = await import("node:fs");
    const { Readable: Readable2 } = await import("node:stream");
    filePath = filePath.replace("file://", "");
    if (!fs3.existsSync(filePath))
      throw new Error(`File not found: ${filePath}`);
    return Readable2.toWeb(fs3.createReadStream(filePath, {
      autoClose: true
    }));
  } catch (error) {
    throw error;
  }
}
async function writeFile5(filePath, data) {
  const fs3 = await import("node:fs/promises");
  return fs3.writeFile(filePath.replace("file://", ""), data);
}
async function readDir4(dirPath) {
  const fs3 = await import("node:fs/promises");
  dirPath = dirPath.replace("file://", "");
  dirPath = await import("node:path").then((m3) => m3.resolve(dirPath));
  const entries = await fs3.readdir(dirPath, { withFileTypes: true, recursive: true });
  return entries.filter((entry) => entry.isFile()).map((entry) => (entry.parentPath.endsWith("/") ? entry.parentPath : entry.parentPath + "/") + entry.name).map((filePath) => filePath.replace(dirPath, "")).map((filePath) => filePath.startsWith("/") ? filePath.slice(1) : filePath);
}
var ENV3;
var init_node = __esm({
  "../debuno-serve/src/node.ts"() {
    init_utils();
    init_server_0_9();
    ENV3 = "node";
  }
});

// ../debuno-serve/src/types.ts
var types_exports = {};
var init_types = __esm({
  "../debuno-serve/src/types.ts"() {
  }
});

// utils/colors.ts
var cyan = (s) => `\x1B[36m${s}\x1B[39m`;
var gray = (s) => `\x1B[90m${s}\x1B[39m`;
var red = (s) => `\x1B[31m${s}\x1B[39m`;
var yellow = (s) => `\x1B[33m${s}\x1B[39m`;
var green = (s) => `\x1B[32m${s}\x1B[39m`;
var magenta = (s) => `\x1B[35m${s}\x1B[39m`;

// https://jsr.io/@std/fmt/1.0.6/colors.ts
var colors_exports = {};
__export(colors_exports, {
  bgBlack: () => bgBlack,
  bgBlue: () => bgBlue,
  bgBrightBlack: () => bgBrightBlack,
  bgBrightBlue: () => bgBrightBlue,
  bgBrightCyan: () => bgBrightCyan,
  bgBrightGreen: () => bgBrightGreen,
  bgBrightMagenta: () => bgBrightMagenta,
  bgBrightRed: () => bgBrightRed,
  bgBrightWhite: () => bgBrightWhite,
  bgBrightYellow: () => bgBrightYellow,
  bgCyan: () => bgCyan,
  bgGreen: () => bgGreen,
  bgMagenta: () => bgMagenta,
  bgRed: () => bgRed,
  bgRgb24: () => bgRgb24,
  bgRgb8: () => bgRgb8,
  bgWhite: () => bgWhite,
  bgYellow: () => bgYellow,
  black: () => black,
  blue: () => blue,
  bold: () => bold,
  brightBlack: () => brightBlack,
  brightBlue: () => brightBlue,
  brightCyan: () => brightCyan,
  brightGreen: () => brightGreen,
  brightMagenta: () => brightMagenta,
  brightRed: () => brightRed,
  brightWhite: () => brightWhite,
  brightYellow: () => brightYellow,
  cyan: () => cyan2,
  dim: () => dim,
  getColorEnabled: () => getColorEnabled,
  gray: () => gray2,
  green: () => green2,
  hidden: () => hidden,
  inverse: () => inverse,
  italic: () => italic,
  magenta: () => magenta2,
  red: () => red2,
  reset: () => reset,
  rgb24: () => rgb24,
  rgb8: () => rgb8,
  setColorEnabled: () => setColorEnabled,
  strikethrough: () => strikethrough,
  stripAnsiCode: () => stripAnsiCode,
  underline: () => underline,
  white: () => white,
  yellow: () => yellow2
});
var { Deno: Deno2 } = globalThis;
var noColor = typeof Deno2?.noColor === "boolean" ? Deno2.noColor : false;
var enabled = !noColor;
function setColorEnabled(value) {
  if (Deno2?.noColor) {
    return;
  }
  enabled = value;
}
function getColorEnabled() {
  return enabled;
}
function code(open3, close) {
  return {
    open: `\x1B[${open3.join(";")}m`,
    close: `\x1B[${close}m`,
    regexp: new RegExp(`\\x1b\\[${close}m`, "g")
  };
}
function run(str, code2) {
  return enabled ? `${code2.open}${str.replace(code2.regexp, code2.open)}${code2.close}` : str;
}
function reset(str) {
  return run(str, code([0], 0));
}
function bold(str) {
  return run(str, code([1], 22));
}
function dim(str) {
  return run(str, code([2], 22));
}
function italic(str) {
  return run(str, code([3], 23));
}
function underline(str) {
  return run(str, code([4], 24));
}
function inverse(str) {
  return run(str, code([7], 27));
}
function hidden(str) {
  return run(str, code([8], 28));
}
function strikethrough(str) {
  return run(str, code([9], 29));
}
function black(str) {
  return run(str, code([30], 39));
}
function red2(str) {
  return run(str, code([31], 39));
}
function green2(str) {
  return run(str, code([32], 39));
}
function yellow2(str) {
  return run(str, code([33], 39));
}
function blue(str) {
  return run(str, code([34], 39));
}
function magenta2(str) {
  return run(str, code([35], 39));
}
function cyan2(str) {
  return run(str, code([36], 39));
}
function white(str) {
  return run(str, code([37], 39));
}
function gray2(str) {
  return brightBlack(str);
}
function brightBlack(str) {
  return run(str, code([90], 39));
}
function brightRed(str) {
  return run(str, code([91], 39));
}
function brightGreen(str) {
  return run(str, code([92], 39));
}
function brightYellow(str) {
  return run(str, code([93], 39));
}
function brightBlue(str) {
  return run(str, code([94], 39));
}
function brightMagenta(str) {
  return run(str, code([95], 39));
}
function brightCyan(str) {
  return run(str, code([96], 39));
}
function brightWhite(str) {
  return run(str, code([97], 39));
}
function bgBlack(str) {
  return run(str, code([40], 49));
}
function bgRed(str) {
  return run(str, code([41], 49));
}
function bgGreen(str) {
  return run(str, code([42], 49));
}
function bgYellow(str) {
  return run(str, code([43], 49));
}
function bgBlue(str) {
  return run(str, code([44], 49));
}
function bgMagenta(str) {
  return run(str, code([45], 49));
}
function bgCyan(str) {
  return run(str, code([46], 49));
}
function bgWhite(str) {
  return run(str, code([47], 49));
}
function bgBrightBlack(str) {
  return run(str, code([100], 49));
}
function bgBrightRed(str) {
  return run(str, code([101], 49));
}
function bgBrightGreen(str) {
  return run(str, code([102], 49));
}
function bgBrightYellow(str) {
  return run(str, code([103], 49));
}
function bgBrightBlue(str) {
  return run(str, code([104], 49));
}
function bgBrightMagenta(str) {
  return run(str, code([105], 49));
}
function bgBrightCyan(str) {
  return run(str, code([106], 49));
}
function bgBrightWhite(str) {
  return run(str, code([107], 49));
}
function clampAndTruncate(n2, max = 255, min = 0) {
  return Math.trunc(Math.max(Math.min(n2, max), min));
}
function rgb8(str, color) {
  return run(str, code([38, 5, clampAndTruncate(color)], 39));
}
function bgRgb8(str, color) {
  return run(str, code([48, 5, clampAndTruncate(color)], 49));
}
function rgb24(str, color) {
  if (typeof color === "number") {
    return run(
      str,
      code(
        [38, 2, color >> 16 & 255, color >> 8 & 255, color & 255],
        39
      )
    );
  }
  return run(
    str,
    code(
      [
        38,
        2,
        clampAndTruncate(color.r),
        clampAndTruncate(color.g),
        clampAndTruncate(color.b)
      ],
      39
    )
  );
}
function bgRgb24(str, color) {
  if (typeof color === "number") {
    return run(
      str,
      code(
        [48, 2, color >> 16 & 255, color >> 8 & 255, color & 255],
        49
      )
    );
  }
  return run(
    str,
    code(
      [
        48,
        2,
        clampAndTruncate(color.r),
        clampAndTruncate(color.g),
        clampAndTruncate(color.b)
      ],
      49
    )
  );
}
var ANSI_PATTERN = new RegExp(
  [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TXZcf-nq-uy=><~]))"
  ].join("|"),
  "g"
);
function stripAnsiCode(string) {
  return string.replace(ANSI_PATTERN, "");
}

// utils/console.ts
var levelsMap = {
  debug: ["debug", "info", "warn", "error"],
  info: ["info", "warn", "error"],
  warn: ["warn", "error"],
  error: ["error"]
};
function getLevels(level) {
  return levelsMap[level];
}
function createConsole(name, opts = {}) {
  opts.levels = opts.level ? getLevels(opts.level) : opts.levels || [];
  opts.colors = Object.assign({
    info: "gray",
    error: "red",
    warn: "yellow",
    debug: "blue",
    group: "cyan"
  }, opts.colors);
  const levelColors = {
    info: (s) => typeof s === "string" ? colors_exports[opts.colors?.info || "gray"](s) : s,
    error: (s) => typeof s === "string" ? colors_exports[opts.colors?.error || "red"](s) : s,
    warn: (s) => typeof s === "string" ? colors_exports[opts.colors?.warn || "yellow"](s) : s,
    debug: (s) => typeof s === "string" ? colors_exports[opts.colors?.debug || "blue"](s) : s,
    group: (s) => typeof s === "string" ? colors_exports[opts.colors?.group || "cyan"](s) : s
  };
  const levels = opts.levels;
  return {
    level: opts.level,
    levels,
    name,
    colors: opts.colors,
    debug(...args) {
      if (!levels.includes("debug") || !args.length) return;
      console.debug(...args.map(levelColors.debug));
    },
    info(...args) {
      if (!levels.includes("info") || !args.length) return;
      console.info(...args.map(levelColors.info));
    },
    error(...args) {
      if (!levels.includes("error") || !args.length) return;
      console.error(...args.map(levelColors.error));
    },
    warn(...args) {
      if (!levels.includes("warn") || !args.length) return;
      console.warn(...args.map(levelColors.warn));
    },
    log(...args) {
      if (!levels.includes("info") || !args.length) return;
      console.log(...args);
    },
    group(...args) {
      if (!levels.length) return;
      args.length ? console.group(...args.map(levelColors.group)) : console.group();
    },
    groupEnd() {
      if (!levels.length) return;
      console.groupEnd();
    },
    groupCollapsed(...args) {
      if (!levels.length) return;
      args.length ? console.groupCollapsed(...args.map(levelColors.group)) : console.groupCollapsed();
    },
    groupCollapsedEnd() {
      if (!levels.length) return;
      console.groupEnd();
    }
  };
}

// utils/router.ts
function createRoute(factory) {
  return factory;
}
function route(match, fetch2) {
  return { match, fetch: fetch2 };
}
function createRouter(routes, hooks, opts) {
  async function match(request2, url) {
    return await Promise.all(routes.filter((route2) => route2.match(request2, url)));
  }
  async function handle(request2, url) {
    const routes2 = await match(request2, url);
    for (const route2 of routes2) {
      const response = await route2.fetch(request2, url);
      if (response)
        return response;
    }
    if (request2.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Headers": "*",
          "Access-Control-Allow-Methods": "*",
          "Access-Control-Expose-Headers": "*",
          "Access-Control-Allow-Private-Network": "true"
        }
      });
    }
    if (request2.method === "HEAD") {
      return new Response(null, { status: 200 });
    }
    return new Response(JSON.stringify({
      error: {
        status: 400,
        message: `Bad Request`
      }
    }, null, 4), { status: 200 });
  }
  function request(input, init) {
    const request2 = input instanceof Request ? input : new Request(input, init);
    return router.fetch(request2);
  }
  const console2 = createConsole(`${opts?.consoleName || "router"}`, {
    levels: opts?.consoleLevels
  });
  const router = {
    routes,
    hooks,
    match(request2) {
      return match(request2, new URL(request2.url));
    },
    async fetch(request2) {
      const url = new URL(request2.url);
      console2.log();
      console2.log(cyan(`[${request2.method}]`), url.pathname + url.search, gray(request2.headers.get("accept")?.split(",").shift()), gray(request2.headers.get("user-agent")?.split(" ").shift()));
      console2.group();
      try {
        const response = await handle(request2, url);
        console2.groupEnd();
        console2.log(cyan(" \u2B91"), response.status, ...[response.statusText, response.headers.get("location"), response.headers.get("Content-Type")].filter(Boolean));
        if (hooks?.onResponse)
          return await hooks.onResponse(request2, response);
        return response;
      } catch (error) {
        const errres = {
          error: {
            message: error.message,
            stack: error.stack.split("\n").filter((line) => line.trim().startsWith("at ")).map((line) => line.trim().split("at ").pop()),
            code: error.code,
            path: error.path
          },
          status: error.code === "ENOENT" ? 404 : 500
        };
        const response = hooks?.onError ? await hooks.onError(request2, errres) : Response.json(errres, {
          status: errres.status
        });
        if (hooks?.onResponse)
          return await hooks.onResponse(request2, response);
        return response;
      }
    },
    request
  };
  return router;
}

// utils/mod.ts
import { readFileSync } from "node:fs";

// server/meta/mod.ts
var versions = {};
var timestamps = {};
var dependents = {};
var dependencies = {};
var meta = {
  get,
  getDependents,
  incVersion,
  versions,
  timestamps,
  dependents,
  dependencies
};
var mod_default = meta;
function get(url) {
  return url ? {
    version: meta.versions[url],
    timestamp: meta.timestamps[url],
    dependents: meta.dependents[url],
    dependencies: meta.dependencies[url]
  } : meta;
}
function incVersion(id) {
  versions[id] = versions[id] || 0;
  versions[id]++;
  timestamps[id] = Date.now();
  for (const key of Object.keys(dependents)) {
    if (id in dependents[key]) {
      dependents[key][id] = versions[id];
    }
  }
  for (const key of Object.keys(dependencies)) {
    if (id in dependencies[key]) {
      dependencies[key][id] = versions[id];
    }
  }
}
function getDependents(url, updateVersion = false) {
  function _getDependents(url2, version, timestamp, arr = []) {
    versions[url2] = version;
    for (const importer of Object.keys(dependents[url2] || {})) {
      arr.push({ url: url2, importer, version, timestamp });
      const v3 = updateVersion ? (versions[importer] || 0) + 1 : versions[importer];
      _getDependents(importer, v3, timestamp, arr);
    }
    return arr;
  }
  return _getDependents(url, versions[url], timestamps[url]);
}

// utils/mod.ts
import process2 from "node:process";
import { createHash } from "node:crypto";
import { execFile } from "node:child_process";
import fs from "node:fs/promises";
var fileExists = async (path5) => {
  try {
    await fs.access(path5, fs.constants.F_OK);
    return true;
  } catch {
    return false;
  }
};
function parseUrlLike(input) {
  let str = String(input).trim();
  const protoPortMatch = str.match(/^https?:\/\/(\d+)(\/.*)?$/);
  if (protoPortMatch) {
    const proto = str.startsWith("https") ? "https" : "http";
    const port2 = protoPortMatch[1];
    const path6 = ensureTrailingSlash(protoPortMatch[2] || "/");
    return new URL(`${proto}://localhost:${port2}${path6}`);
  }
  try {
    const url = new URL(str);
    if (!url.port) {
      url.port = url.protocol === "https:" ? "443" : "80";
    }
    url.pathname = ensureTrailingSlash(url.pathname);
    return url;
  } catch {
  }
  let protocol = "http";
  let hostname = "localhost";
  let port;
  let path5 = "/";
  if (/^\d+$/.test(str)) {
    port = Number(str);
  } else if (/^\d+\//.test(str)) {
    const [p3, ...rest] = str.split("/");
    port = Number(p3);
    path5 = "/" + rest.join("/");
  } else if (/^[^/]+:\d+/.test(str)) {
    const [host, rest] = str.split(":");
    const [p3, ...restPath] = rest.split("/");
    hostname = host;
    port = Number(p3);
    path5 = restPath.length ? "/" + restPath.join("/") : "/";
  } else if (/^[^/]+\/.*$/.test(str)) {
    const [host, ...restPath] = str.split("/");
    hostname = host;
    path5 = "/" + restPath.join("/");
  } else {
    hostname = str;
  }
  path5 = ensureTrailingSlash(path5);
  if (port === void 0) {
    port = protocol === "https" ? 443 : 80;
  }
  return new URL(`${protocol}://${hostname}:${port}${path5}`);
}
function ensureTrailingSlash(path5) {
  return path5.endsWith("/") || path5.includes("?") || path5.includes("#") ? path5 : path5 + "/";
}
function mapToSet(config) {
  return Object.keys(config).map(($addr) => {
    let url = parseUrlLike($addr);
    const path5 = config[$addr];
    const base = formatBase(url.pathname);
    const port = url.port ? Number(url.port) : url.protocol === "https:" ? 443 : 80;
    const protocol = url.protocol.slice(0, -1);
    const hostname = url.hostname;
    const host = [hostname, port].join(":");
    const $id = [protocol, hostname, port].join(":");
    const endpoint = `${protocol}://${hostname}:${port}${base}`;
    url = new URL(endpoint);
    return {
      $id,
      $addr,
      endpoint,
      url,
      port,
      host,
      base,
      protocol,
      hostname,
      path: path5
    };
  });
}
function open(openUri) {
  console.log(`open(${openUri})`);
  return new Promise((resolve4, reject) => {
    execFile("open", [openUri], (error, _stdout, _stderr) => {
      if (error)
        reject(error);
      else
        resolve4();
    });
  });
}
function groupByDeep(arr, keyPath) {
  return arr.reduce((acc, obj) => {
    const keys = keyPath.split(".");
    const groupKey = keys.reduce((val, key) => val?.[key], obj);
    if (groupKey !== void 0) {
      ;
      (acc[groupKey] ||= []).push(obj);
    }
    return acc;
  }, {});
}
function md5(str) {
  return createHash("md5").update(str).digest("hex");
}
function getDenoConfig(path5) {
  try {
    return JSON.parse(readFileSync(path5 + "/deno.json", "utf-8"));
  } catch {
    return {};
  }
}
var formatBase = (i2 = "/") => !i2 || i2 === "/" ? "/" : "/" + i2.split("/").filter(Boolean).join("/") + "/";
function getFileExtension(filename) {
  const match = filename.match(/\.([a-zA-Z0-9.]+)$/);
  return match ? match[1] : null;
}
var mimeTypes = {
  "html": "text/html",
  "css": "text/css",
  "js": "application/javascript",
  "json": "application/json",
  "png": "image/png",
  "jpg": "image/jpeg",
  "jpeg": "image/jpeg",
  "gif": "image/gif",
  "svg": "image/svg+xml",
  "pdf": "application/pdf",
  "txt": "text/plain",
  "mp3": "audio/mpeg",
  "mp4": "video/mp4"
};
function getContentType(filename) {
  const ext = filename.split(".").pop()?.toLowerCase();
  return ext ? mimeTypes[ext] : "text/plain";
}
function resolvePath(fileName, base) {
  return new URL(fileName, base).pathname;
}
function moduleVersionTransform(source, file, http) {
  console.log(`   * deps version sync`);
  const parentUrl = new URL(http);
  const parentId = parentUrl.origin + parentUrl.pathname;
  return replaceImportAndExportPaths(source, (importPath) => {
    if (importPath.endsWith(".ts") || importPath.endsWith(".tsx") || importPath.endsWith(".js") || importPath.endsWith(".jsx") || importPath.endsWith(".json")) {
      const depUrl = new URL(importPath, parentId);
      const depId = depUrl.origin + depUrl.pathname;
      dependents[depId] = dependents[depId] || {};
      dependents[depId][parentId] = versions[parentId] || null;
      dependencies[parentId] = dependencies[parentId] || {};
      dependencies[parentId][depId] = versions[depId] || null;
      if (!versions[depId])
        return importPath;
      depUrl.searchParams.set("version", String(versions[depId] || 1));
      return [importPath.split("?").shift(), depUrl.searchParams].filter(Boolean).join("?");
    }
    return importPath;
  });
}
function moduleHtmlTransform(source, file, http, req) {
  const isDocument = req.headers.get("sec-fetch-dest") === "document" || req.headers.get("x-fetch-dest") === "document";
  const isHtml = !!["html", "htm"].find((ext) => file.endsWith("." + ext));
  if (isDocument && !isHtml) {
    const editLine = (line) => {
      const url = new URL(req.url);
      url.pathname = url.pathname + ":" + line;
      url.searchParams.set("edit", "");
      return String(url);
    };
    const lines = source.split("\n");
    const sourceCode = lines.map((line, index) => {
      return [
        `<a title="Edit line ${index + 1}" href="${editLine(index + 1)}">`,
        `<i>${index + 1}</i>`,
        `<span>${line.replaceAll("<", "&lt;").replaceAll(">", "&gt;")}</span>`,
        `</a>`
      ].join("");
    }).join("");
    return new Response([
      `<style>`,
      `body{background:#282828;font-size:14px;line-height:1.5;color:#ccc;margin:0;padding:0px;}`,
      `pre{margin:10px;font-family: Menlo, Monaco, Courier New, monospace;line-height: 24px;font-weight: 400;font-size: 13px;font-feature-settings: "liga" 0, "calt" 0;overflow: hidden;font-variation-settings: normal;letter-spacing: 0px;}`,
      `a{color:inherit;text-decoration:none;display:flex;line-height:24px;gap:10px}`,
      `a:hover{background:rgba(0,0,0,0.2)}`,
      `a i{display:block;min-width:20px;text-align:right;padding:0 10px;font-style:normal;opacity:0.4}`,
      `</style>`,
      `<pre>${sourceCode}</pre>`
    ].join(""), {
      headers: {
        "content-type": "text/html",
        "x-file-path": file
      }
    });
  }
  return source;
}
function getChanges(oldArray, newArray) {
  const oldSet = new Set(oldArray);
  const newSet = new Set(newArray);
  const added = newArray.filter((item) => !oldSet.has(item));
  const removed = oldArray.filter((item) => !newSet.has(item));
  return { added, removed };
}
function replaceImportAndExportPaths(sourceCode, linkMapper) {
  const importExportScriptRegex = /(?<=\b(?:import|export)\s+[^'"]*['"]|import\s*\(['"]|<script[^>]+?\bsrc=['"])([^'"]+)(?=['"](?:\s+with\s*\{[^}]*\})?)/g;
  return sourceCode.replace(importExportScriptRegex, (importPath) => {
    return linkMapper(importPath);
  });
}
async function readDir(dirPath) {
  const fs3 = await import("node:fs/promises");
  dirPath = dirPath.replace("file://", "");
  dirPath = await import("node:path").then((m3) => m3.resolve(dirPath));
  const entries = await fs3.readdir(dirPath, { withFileTypes: true, recursive: true });
  return entries.filter((entry) => entry.isFile()).map((entry) => (entry.parentPath.endsWith("/") ? entry.parentPath : entry.parentPath + "/") + entry.name).map((filePath) => filePath.replace(dirPath, "")).map((filePath) => filePath.startsWith("/") ? filePath.slice(1) : filePath);
}

// server/lib/distRoute.ts
import { readFile } from "node:fs/promises";
var distRoute_default = createRoute((config, _context) => ({
  match: (request) => request.method === "GET" && new URL(request.url).pathname.startsWith(config.client.base),
  async fetch(request) {
    const url = new URL(request.url);
    url.pathname = url.pathname.replace(config.client.base, "/").replace("//", "/");
    url.pathname = getFileExtension(url.pathname) ? url.pathname : `${url.pathname}.js`;
    const IMPORT_META_ENV = `import.meta.env = (await import('${config.client.envImportUrl}')).create(import.meta);
`;
    const filePath = config.client.path + url.pathname;
    const source = await readFile(filePath);
    const body = source.includes("import.meta.env") ? IMPORT_META_ENV + source : source;
    return new Response(body, {
      headers: {
        "x-file-path": filePath,
        "content-type": getContentType(url.pathname)
      }
    });
  }
}));

// server/lib/genRoute.ts
import { readFile as readFile3 } from "node:fs/promises";
import { basename } from "node:path";

// server/lib/transform.ts
import path from "node:path";
import { mkdir, readFile as readFile2, stat, writeFile } from "node:fs/promises";
import { transform } from "oxc-transform";
async function transformFile(srcFilePath, outFilePath, sourceMapFilePath) {
  srcFilePath = srcFilePath.replace("file:///", "/");
  outFilePath = outFilePath.replace("file:///", "/");
  const source = await readFile2(srcFilePath, "utf-8");
  const transformed = transform(srcFilePath, source, {
    sourcemap: true
    // jsx: {
    //     importSource: 'https://esm.sh/preact@10.26.3',
    //     runtime: 'automatic'
    // },
  });
  let outFileSource = transformed.code;
  if (transformed.map) {
    transformed.map.sources = [sourceMapFilePath || path.relative(outFilePath, srcFilePath)];
    const sourceMappingURL = `
//# sourceMappingURL=data:application/json;base64,${btoa(JSON.stringify(transformed.map))}`;
    outFileSource = outFileSource + sourceMappingURL;
  }
  await mkdir(path.dirname(outFilePath), { recursive: true });
  await writeFile(outFilePath, outFileSource);
  console.log(`lib/transformFile( ${path.relative(process.cwd(), outFilePath)} )`);
  return outFileSource;
}
async function hasSourceFileChanged(srcFile, outFile) {
  try {
    const srcStats = await stat(srcFile);
    const outStats = await stat(outFile);
    return srcStats.mtimeMs > outStats.mtimeMs;
  } catch (error) {
    return error.code === "ENOENT" && error.path === outFile;
  }
}

// server/config.ts
import { mkdir as mkdir2 } from "node:fs/promises";
import path2, { join, resolve } from "node:path";
var RPC_DIR = process.env.RPC_DIR || process.env.HOME + "/.rpc";
var RPC_GEN_DIR = RPC_DIR + "/gen";
var RPC_LIB_DIR = RPC_GEN_DIR + "/lib";
var RPC_PRO_DIR = RPC_GEN_DIR + "/pro";
var RC_FILE_NAMES = [
  "deno.json",
  "rpc.json",
  "rpc.config.json",
  "rpc.config.ts",
  "rpc.config.js"
];
var RC_FILE_NAMES_PROP = {
  "deno.json": "rpc",
  "rpc.json": null,
  "rpc.config.json": null,
  "rpc.config.ts": null,
  "rpc.config.js": null
};
await mkdir2(RPC_DIR, { recursive: true });
async function tryRCFiles(rcFileNames, debug) {
  const console2 = createConsole("tryRCFiles", {
    level: debug
  });
  try {
    rcFileNames = [...new Set(rcFileNames.filter((file) => file.endsWith(".json") || file.endsWith(".js") || file.endsWith(".ts")))];
    const cwd = process.cwd();
    console2.debug(`
tryRCFiles`);
    console2.group();
    console2.log(`Path: ${cwd}`);
    const msg = `Files: ${rcFileNames.join(", ")}`;
    console2.log(msg);
    console2.log(`-`.repeat(msg.length));
    for (const file of rcFileNames) {
      const filePath = path2.join(cwd, file);
      console2.group();
      console2.debug(`try( ${file} )`);
      if (await fileExists(filePath)) {
        console2.log(`Resolved: ${filePath}`);
        try {
          const { default: config } = filePath.endsWith(".json") ? await import(filePath, { with: { type: "json" } }) : await import(filePath);
          const fileName = filePath.split("/").pop() || "";
          const prop = RC_FILE_NAMES_PROP[fileName];
          const value = prop ? config[prop] : config;
          if (typeof value === "object" && value !== null) {
            console2.log(`Loaded: ${filePath}`);
            console2.log(value);
            console2.log(`---`);
            return { filePath, config: value };
          }
          if (prop)
            console2.log(`Config file does not contain '${prop}' property: ${filePath}`);
          else
            console2.log(`Config file does not contain valid properties: ${filePath}`);
        } catch (error) {
          console2.warn(`Load Failed: ${filePath}`);
          console2.error(error.name + ":", error.message);
        }
      } else {
        console2.info(`Not found: ${filePath}`);
      }
      console2.groupEnd();
    }
    throw new TypeError(`No valid config found at path: ${cwd}`);
  } catch (error) {
    throw error;
  }
}
function parseRC(input, group = false) {
  const inits = mapToSet(input).map((server) => ({ server }));
  return group === true ? groupByDeep(inits, "server.$id") : inits;
}
async function loadRC(fileNames, debug) {
  const { config } = await tryRCFiles(RC_FILE_NAMES.concat(fileNames ? fileNames : []), debug);
  return mapToSet(config).map((server) => ({ server }));
}
function defineConfig(init) {
  init = { ...init };
  const server = init.server = init.server || {};
  server.path = server.path ? resolve(server.path) : process.cwd();
  server.port = Number(server.port || 0);
  server.base = formatBase(server.base);
  const client = init.client = init.client || {};
  client.base = formatBase(server.base + (client.base || "@client"));
  const denoConfig = getDenoConfig(server.path);
  const shared = init.shared = init.shared || {};
  shared.jsxImportUrl = shared.jsxImportUrl || denoConfig.compilerOptions?.jsxImportSource;
  const config = {
    get dev() {
      return init.dev === true;
    },
    get runtime() {
      return navigator.userAgent;
    },
    get server() {
      return server;
    },
    get client() {
      return {
        base: client.base,
        path: this.dev ? resolvePath("../client", import.meta.url) : resolvePath("../dist/client", import.meta.url),
        get rpcImportUrl() {
          return this.base + "rpc";
        },
        get hotImportUrl() {
          return this.base + "hot";
        },
        get envImportUrl() {
          return this.base + "env";
        }
      };
    },
    get shared() {
      return {
        jsxImportUrl: shared.jsxImportUrl
      };
    },
    get deno() {
      return denoConfig;
    },
    get protocol() {
      return `web+rpc`;
    },
    get rpcDir() {
      return join(this.server.path, ".rpc");
    },
    get genDir() {
      return join(this.rpcDir, "gen");
    },
    get srcKey() {
      return `src`;
    },
    get genKey() {
      return `gen`;
    },
    getEnv(url) {
      return {
        DEV: this.dev,
        PATH: this.server.path,
        PORT: this.server.port,
        BASE: this.server.base,
        ORIGIN: new URL(String(url)).origin,
        BASE_URL: String(new URL(this.server.base, String(url))),
        ENDPOINT: this.server.endpoint,
        RUNTIME: this.runtime,
        RPC_DIR: this.rpcDir
      };
    },
    filter: (file) => !file.includes(".rpc") && !file.includes("node_modules") && (file.endsWith(".ts") || file.endsWith(".d.ts") || file.endsWith(".tsx") || file.endsWith(".json") || file.endsWith(".js") || file.endsWith(".jsx") || file.endsWith(".html") || file.endsWith(".svg") || file.endsWith(".css") || file.endsWith(".txt") || file.endsWith(".md") || file.endsWith(".sh"))
  };
  return config;
}

// server/lib/genRoute.ts
var genRoute_default = createRoute((config, _context) => {
  const index = "index.ts";
  const genDir = RPC_LIB_DIR + "/" + basename(config.client.path);
  console.log(`libHandler(`, [config.client.path, genDir], `)`);
  return {
    match(request, url) {
      return request.method === "GET" && url.pathname.startsWith(config.client.base);
    },
    async fetch(request) {
      const url = new URL(request.url);
      const urlPath = url.pathname;
      url.pathname = url.pathname.replace(config.client.base, "/").replace("//", "/");
      if (index && url.pathname === "/")
        url.pathname = `/${index}`;
      const exts = ["ts", "tsx", "js", "jsx", "json"];
      const hasExt = !url.pathname.endsWith("/") && !!exts.find((ext) => url.pathname.endsWith(ext));
      url.pathname = hasExt ? url.pathname : `${url.pathname}.ts`;
      const requireTransform = !!["ts", "tsx"].find((ext) => url.pathname.endsWith(`.${ext}`));
      const userAgent = request.headers.get("user-agent");
      const isBrowser = userAgent?.includes("Mozilla");
      const srcFilePath = config.client.path + url.pathname;
      const genFilePath = genDir + url.pathname + ".js";
      const resFilePath = isBrowser && requireTransform ? genFilePath : srcFilePath;
      const IMPORT_META_ENV = `import.meta.env = (await import('${config.client.envImportUrl}')).create(import.meta);
`;
      const source = isBrowser && requireTransform ? await hasSourceFileChanged(srcFilePath, genFilePath) ? await transformFile(srcFilePath, genFilePath, urlPath) : await readFile3(genFilePath) : await readFile3(srcFilePath);
      const body = source.includes("import.meta.env") ? IMPORT_META_ENV + source : source;
      return new Response(body, {
        status: 200,
        headers: {
          "x-file-path": resFilePath,
          "Content-Type": getContentType(resFilePath)
        }
      });
    }
  };
});

// server/lib/route.ts
var route_default = createRoute((config, context) => config.dev ? genRoute_default(config, context) : distRoute_default(config, context));

// server/rpc/route.ts
import { join as join5 } from "node:path";

// server/rpc/exec.ts
async function exec(request, filePath, fileVersion) {
  try {
    filePath = filePath.startsWith("file") ? filePath : "file://" + filePath;
    const { path: path5, args } = await request.json();
    const version = new URL(request.url).searchParams.get("version");
    if (version) {
      filePath = filePath + "?version=" + version;
    }
    const arrPath = path5.split(".");
    const name = arrPath.pop();
    console.log(`exec( ${filePath} )`);
    console.log(`  * apply( ${path5},`, args, `)`);
    const module = await import(filePath);
    const target = arrPath.reduce((o2, i2) => o2[i2], module);
    const result = typeof target[name] === "function" ? await Reflect.apply(target[name], target, args) : args.length === 0 ? Reflect.get(target, name) : Reflect.set(target, name, args[0]);
    return result instanceof ReadableStream ? new Response(result, {
      headers: {
        "content-type": "text/stream"
      }
    }) : result instanceof Response ? result : Response.json(result);
  } catch (error) {
    console.error(error);
    return new Response(error.message, {
      status: 500,
      statusText: "Internal Server Error"
    });
  }
}

// server/rpc/read.ts
async function read({ filePath, fileType, transform: transform3, url, request }) {
  filePath = filePath.startsWith("file") ? filePath : "file://" + filePath;
  const isScript = filePath.endsWith(".ts") || filePath.endsWith(".js") || filePath.endsWith(".tsx") || filePath.endsWith("jsx");
  fileType = isScript && fileType ? `application/${fileType}` : getContentType(filePath);
  console.log(`read(${filePath}, ${fileType})`);
  const result = await (await import("node:fs/promises")).readFile(filePath.replace("file://", ""), "utf-8");
  const response = transform3 ? await transform3(result, filePath, url, request) : result;
  return response instanceof Response === false ? new Response(response, {
    headers: {
      "content-type": fileType,
      "x-file-path": filePath
    }
  }) : response;
}

// server/rpc/edit.ts
import { execFile as execFile2 } from "node:child_process";
function editUsingRedirect(filePath, line, column) {
  const openPath = [filePath, line, column].filter(Boolean).join(":");
  const openUri = `vscode://file${openPath}`;
  console.log(`editUsingRedirect(${openUri})`);
  return Response.redirect(openUri);
}
function editUsingExec(filePath, line, column) {
  const openPath = [filePath, line, column].filter(Boolean).join(":");
  const openUri = `vscode://file${openPath}`;
  console.log(`editUsingExec(${openUri})`);
  return new Promise((resolve4, reject) => {
    execFile2("open", [openUri], (error, _stdout, _stderr) => {
      if (error)
        reject(error);
      else
        resolve4(new Response(null, {
          headers: {
            "x-file-path": filePath,
            "x-file-line": String(line || 1),
            "x-file-column": String(column || 1)
          }
        }));
    });
  });
}

// https://jsr.io/@std/fs/1.0.0/walk.ts
init_join3();

// https://jsr.io/@std/fs/1.0.0/_to_path_string.ts
init_from_file_url4();

// https://jsr.io/@std/fs/1.0.0/_create_walk_entry.ts
init_basename4();
init_normalize4();

// server/rpc/utils.ts
import path3 from "node:path";
import { mkdir as mkdir3, readFile as readFile4, writeFile as writeFile2, stat as stat2 } from "node:fs/promises";

// server/rpc/transform.ts
import { parseSync } from "oxc-parser";
async function transform2(fileName, code2, init) {
  const RPC_IMPORT_URL = init?.rpcImportUrl || `/@client/rpc`;
  const HOT_IMPORT_URL = init?.hotImportUrl || `/@client/hot`;
  const ENV_IMPORT_URL = init?.envImportUrl || `/@client/env`;
  const IMPORT_META_ENV = `import.meta.env = (await import('${ENV_IMPORT_URL}')).create(import.meta);`;
  const IMPORT_META_RPC = `import.meta.rpc = (await import('${RPC_IMPORT_URL}')).create(import.meta);`;
  const IMPORT_META_HOT = `import.meta.hot = (await import('${HOT_IMPORT_URL}')).create(import.meta);`;
  const RPC_CALL = (...args) => `import.meta.rpc(${args.join(", ")})`;
  console.log(`transform > ${fileName} (${init?.format})`);
  let source = { code: code2 };
  if (init?.format === "javascript") {
    const oxcTransform = await import("oxc-transform");
    const transformed = oxcTransform.transform(fileName, code2, {
      sourcemap: init.sourceMap,
      jsx: {
        runtime: "automatic",
        importSource: init.jsxImportSource || "https://esm.sh/react"
        //"https://esm.sh/preact"
      }
    });
    source = transformed;
    code2 = transformed.code;
  }
  const { errors, program, magicString } = parseSync(fileName, code2);
  function createCallExpression(path5, params) {
    const name = path5.filter(Boolean).map((p3) => p3.name || p3.index).join(".");
    const args = params.map((p3) => {
      if (p3.type === "AssignmentPattern")
        p3 = p3.left;
      if (init?.format === "javascript" && p3.typeAnnotation) {
        magicString.remove(p3.typeAnnotation.start, p3.typeAnnotation.end);
      }
      return p3.typeAnnotation ? magicString.getSourceText(p3.start, p3.typeAnnotation.start).trim() : magicString.getSourceText(p3.start, p3.end).trim();
    }).map((arg) => arg.endsWith("?") ? arg.slice(0, -1) : arg);
    return RPC_CALL(`"${name}"`, ...args);
  }
  function transformFunc({ path: path5, params, body, returnType }) {
    if (!body) return;
    if (returnType)
      transformReturnType(returnType);
    magicString.remove(body.start, body.end);
    const callExp = createCallExpression(path5, params);
    const returns = body.type === "BlockStatement" && !!body.body.find((b4) => b4.type === "ReturnStatement");
    const returnExp = returns ? "return " : "";
    if (body.type === "BlockStatement") {
      magicString.prependRight(body.start, `{ ${returnExp}${callExp} }`);
    } else {
      magicString.prependRight(body.start, callExp);
    }
  }
  function transformReturnType(returnType) {
    const returnTypeText = magicString.getSourceText(returnType.start, returnType.end).slice(1).trim();
    const promiseReturnType = returnTypeText.startsWith("Promise") ? returnTypeText : `Promise<${returnTypeText}>`;
    magicString.remove(returnType.start, returnType.end);
    if (init?.format === "javascript")
      return;
    magicString.prependRight(returnType.start, `: ${promiseReturnType}`);
  }
  for (const node of program.body) {
    if (node.type === "ExportNamedDeclaration" || node.type === "ExportDefaultDeclaration") {
      if (!node.declaration) continue;
      if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "FunctionExpression" || node.declaration.type === "ArrowFunctionExpression") {
        const { id, params, body, returnType } = node.declaration;
        const path5 = [
          node.type === "ExportDefaultDeclaration" ? { name: "default" } : null,
          id
        ];
        transformFunc({ path: path5, params, body, returnType });
      } else if (node.declaration.type === "VariableDeclaration") {
        const decls = node.declaration.declarations;
        for (const decl of decls) {
          if (!decl.init) continue;
          if (decl.init.type === "ArrowFunctionExpression" || decl.init.type === "FunctionExpression") {
            const id = decl.id;
            const { params, body, returnType } = decl.init;
            transformFunc({ path: [id], params, body, returnType });
          } else if (decl.init.type === "ObjectExpression") {
            for (const prop of decl.init.properties) {
              if (prop.type === "Property" && (prop.value.type === "FunctionExpression" || prop.value.type === "ArrowFunctionExpression")) {
                const { params, body, returnType } = prop.value;
                transformFunc({ path: [decl.id, prop.key], params, body, returnType });
              }
            }
          } else if (decl.init.type === "ClassExpression") {
            const { id, body } = decl.init;
            for (const method of body.body) {
              if (method.type === "MethodDefinition" && (method.value.type === "FunctionExpression" || method.value.type === "FunctionDeclaration")) {
                const { key, value } = method;
                const { params, body: body2, returnType } = value;
                transformFunc({ path: [id, key], params, body: body2, returnType });
              }
            }
          } else if (decl.init.type === "ArrayExpression") {
            for (const elem of decl.init.elements) {
              if (!elem) continue;
              if (elem.type === "FunctionExpression" || elem.type === "ArrowFunctionExpression") {
                const { params, body, returnType } = elem;
                const index = decl.init.elements.indexOf(elem);
                transformFunc({ path: [decl.id, { index }], params, body, returnType });
              }
            }
          }
        }
      } else if (node.declaration.type === "ObjectExpression") {
        for (const prop of node.declaration.properties) {
          if (prop.type === "Property" && (prop.value.type === "FunctionExpression" || prop.value.type === "ArrowFunctionExpression")) {
            const { params, body, returnType } = prop.value;
            const path5 = [
              node.type === "ExportDefaultDeclaration" ? { name: "default" } : null,
              prop.key
            ];
            transformFunc({ path: path5, params, body, returnType });
          }
        }
      } else if (node.declaration.type === "ClassDeclaration") {
        const { id, body } = node.declaration;
        for (const method of body.body) {
          if (method.type === "MethodDefinition" && (method.value.type === "FunctionExpression" || method.value.type === "FunctionDeclaration")) {
            const { key, value } = method;
            const { params, body: body2, returnType } = value;
            const path5 = [
              node.type === "ExportDefaultDeclaration" ? { name: "default" } : null,
              id,
              key
            ];
            transformFunc({ path: path5, params, body: body2, returnType });
          }
        }
      } else if (node.declaration.type === "ArrayExpression") {
        for (const elem of node.declaration.elements) {
          if (!elem) continue;
          if (elem.type === "FunctionExpression" || elem.type === "ArrowFunctionExpression") {
            const { params, body, returnType } = elem;
            const path5 = [
              node.type === "ExportDefaultDeclaration" ? { name: "default" } : null,
              { index: node.declaration.elements.indexOf(elem) }
            ];
            transformFunc({ path: path5, params, body, returnType });
          }
        }
      }
    }
  }
  const sourceCode = magicString.toString();
  if (sourceCode.includes("import.meta.rpc"))
    magicString.prepend(IMPORT_META_RPC + "\n");
  if (sourceCode.includes("import.meta.hot"))
    magicString.prepend(IMPORT_META_HOT + "\n");
  if (sourceCode.includes("import.meta.env"))
    magicString.prepend(IMPORT_META_ENV + "\n");
  if (init?.sourceMap === true) {
    const sourceMappingURL = magicString.generateMap({
      source: init.fileName || fileName,
      includeContent: true,
      hires: false
    }).toUrl();
    magicString.append(`
//# sourceMappingURL=${sourceMappingURL}`);
  }
  const newCode = magicString.toString();
  const newCode2 = removeUnusedImports(fileName, newCode, init?.format === "javascript" ? "jsx" : "tsx");
  return {
    errors,
    source,
    code: newCode2
  };
}
function removeUnusedImports(fileName, source, lang) {
  const ast = parseSync(fileName, source, { sourceType: "module", lang });
  const importMap = /* @__PURE__ */ new Map();
  for (const node of ast.program.body) {
    if (node.type === "ImportDeclaration") {
      if (node.specifiers.length) {
        for (const specifier of node.specifiers) {
          importMap.set(specifier.local.name, { node, used: false });
        }
      } else {
        ast.magicString.remove(node.start, node.end);
      }
    }
  }
  function traverse(node) {
    if (!node || typeof node !== "object") return;
    if (node.type === "ImportDeclaration") return;
    if (node.type === "Identifier" && importMap.has(node.name)) {
      importMap.get(node.name).used = true;
    }
    for (const key in node) traverse(node[key]);
  }
  traverse(ast.program);
  for (const [_name, entry] of importMap) {
    if (!entry.used && !entry.node.done) {
      for (const specifier of entry.node.specifiers) {
        specifier.used = importMap.get(specifier.local.name).used;
      }
      const unusedSpecifiers = entry.node.specifiers.filter((specifier) => specifier.used === false);
      if (unusedSpecifiers.length === entry.node.specifiers.length) {
        ast.magicString.remove(entry.node.start, entry.node.end);
      } else {
        let lastStart = 0;
        let lastEnd = 0;
        for (const specifier of unusedSpecifiers) {
          const startComma = ast.magicString.getSourceText(specifier.start - 2, specifier.start);
          const endComma = ast.magicString.getSourceText(specifier.end, specifier.end + 2);
          const hasStartComma = startComma.trim() === ",";
          const hasEndComma = endComma.trim() === ",";
          if (hasStartComma && lastEnd !== specifier.start) {
            lastStart = specifier.start - 2;
            lastEnd = specifier.end;
            ast.magicString.remove(specifier.start - 2, specifier.end);
          } else if (hasEndComma && lastStart !== specifier.end) {
            lastStart = specifier.start;
            lastEnd = specifier.end + 2;
            ast.magicString.remove(specifier.start, specifier.end + 2);
          } else {
            lastStart = specifier.start;
            lastEnd = specifier.end;
            ast.magicString.remove(specifier.start, specifier.end);
          }
        }
      }
      entry.node.done = true;
    }
  }
  return ast.magicString.toString();
}

// server/rpc/utils.ts
function parseLocation(input) {
  const url = new URL(input, "http://dummy");
  const pathMatch = url.pathname.match(/^(.*?):(\d+)?(?::(\d+))?$/);
  if (pathMatch) {
    const [, file, line, column] = pathMatch;
    return {
      url: url.origin + file + url.search,
      // Menține query-ul (?src=ts)
      line: line ? parseInt(line, 10) : void 0,
      column: column ? parseInt(column, 10) : void 0
    };
  }
  return { url: String(input) };
}
async function transformFile2(srcFile, outFile, options) {
  const source = await readFile4(srcFile, "utf-8");
  const result = await transform2(srcFile, source, options);
  await mkdir3(path3.dirname(outFile), { recursive: true });
  await writeFile2(outFile, result.code);
  if (options?.sourceFilePath && options?.format === "javascript") {
    result.source.map.sources = [options.fileName || srcFile];
    const sourceMappingURL = `
//# sourceMappingURL=data:application/json;base64,${btoa(JSON.stringify(result.source.map))}`;
    await mkdir3(path3.dirname(options.sourceFilePath), { recursive: true });
    await writeFile2(options.sourceFilePath, result.source.code + sourceMappingURL);
  }
}
async function hasSourceFileChanged2(srcFile, outFile) {
  try {
    const srcStats = await stat2(srcFile);
    const outStats = await stat2(outFile);
    return srcStats.mtimeMs > outStats.mtimeMs;
  } catch (error) {
    return error.code === "ENOENT" && error.path === outFile;
  }
}

// server/rpc/route.ts
import { homedir } from "node:os";
var route_default2 = createRoute((config, _context) => {
  const init = {
    jsxImportUrl: config.shared.jsxImportUrl,
    rpcImportUrl: config.client.rpcImportUrl,
    hotImportUrl: config.client.hotImportUrl,
    envImportUrl: config.client.envImportUrl,
    protocol: config.protocol,
    srcKey: config.srcKey,
    outKey: config.genKey,
    genDir: config.genDir
  };
  const { path: path5, base } = config.server;
  const srcDir = path5;
  const srcKey = init.srcKey || "src";
  const outKey = init.outKey || "out";
  const indexFileName = init.indexFileName || "index.html";
  init.transform = init.transform || function transform3(code2, file, http, req) {
    code2 = moduleVersionTransform(code2, file, http);
    code2 = moduleHtmlTransform(code2, file, http, req);
    return code2;
  };
  return {
    match(request, url) {
      return ["GET", "POST"].includes(request.method) && url.pathname.startsWith(base);
    },
    async fetch(request, url) {
      const reqUrl = url.pathname.endsWith("/") ? url.href + indexFileName : url.href;
      const loc = parseLocation(reqUrl);
      url = new URL(loc.url);
      const genDir = init.genDir ? join5(init.genDir, config.server.base) : RPC_PRO_DIR + ("/" + [url.protocol, url.host, config.server.base].join("/"));
      url.pathname = url.pathname.startsWith(base) ? url.pathname.slice(base.length) : url.pathname;
      const env = config.getEnv(url);
      const isBrowser = request.headers.get("user-agent")?.includes("Mozilla") ?? false;
      const isDocument = isBrowser && (request.headers.get("sec-fetch-dest") === "document" || request.headers.get("x-dest") === "document");
      const isSrc = url.searchParams.has(srcKey);
      const isOut = url.searchParams.has(outKey);
      const validTypeValues = ["ts", "js", null];
      const defaultTypeValue = isDocument ? "ts" : isBrowser ? "js" : "ts";
      const typeKey = isSrc ? srcKey : isOut ? outKey : null;
      const typeVal = typeKey ? url.searchParams.get(typeKey) || defaultTypeValue : null;
      if (!validTypeValues.includes(typeVal))
        return new Response(`Bad input: ${typeKey}=${typeVal}
Valid: ${srcKey}|${outKey} = ${validTypeValues.map(String).join("|")}
`, { status: 400 });
      const format = typeVal ? typeVal === "js" ? "javascript" : "typescript" : isBrowser ? "javascript" : "typescript";
      const srcFilePath = url.pathname.startsWith(homedir()) ? url.pathname : join5(srcDir, url.pathname);
      const outBaseDir = typeVal ? join5(genDir, typeVal) : isBrowser ? join5(genDir, "js") : join5(genDir, "ts");
      const outFilePath = format === "javascript" ? join5(outBaseDir, url.pathname).replace(/\.ts$/, ".ts.js").replace(/\.tsx$/, ".tsx.js") : join5(outBaseDir, url.pathname);
      const outSrcFilePath = typeKey === "src" && format === "javascript" ? join5(outBaseDir, "src", url.pathname).replace(/\.ts$/, ".ts.js").replace(/\.tsx$/, ".tsx.js") : void 0;
      const doEdit = url.searchParams.has("edit") || url.searchParams.has("open");
      const doEditType = url.searchParams.get("edit") || url.searchParams.get("open");
      const edit = doEditType === null || doEditType === "1" ? editUsingRedirect : editUsingExec;
      switch (request.method) {
        case "POST":
          return exec(request, srcFilePath);
        case "GET": {
          if (url.pathname.endsWith(".json")) {
            return doEdit ? edit(srcFilePath, loc.line, loc.column) : read({
              filePath: srcFilePath,
              fileType: "json",
              transform: init.transform,
              url: reqUrl,
              request
            });
          }
          if (typeKey === "src" && format === "typescript" || !typeKey && isDocument)
            return doEdit ? edit(srcFilePath, loc.line, loc.column) : read({ filePath: srcFilePath, fileType: format, transform: init.transform, url: reqUrl, request });
          const hasChanged = await hasSourceFileChanged2(
            srcFilePath,
            outSrcFilePath || outFilePath
          );
          if (hasChanged) {
            console.log(`hasChanged:`, hasChanged, [srcFilePath, outSrcFilePath || outFilePath]);
            await transformFile2(srcFilePath, outFilePath, {
              format,
              fileName: url.pathname,
              sourceMap: true,
              sourceFilePath: outSrcFilePath,
              envImportUrl: init.envImportUrl,
              rpcImportUrl: init.rpcImportUrl,
              hotImportUrl: init.hotImportUrl,
              jsxImportSource: init.jsxImportUrl,
              env
            });
          }
          return doEdit ? edit(outSrcFilePath || outFilePath, loc.line, loc.column) : read({ filePath: outSrcFilePath || outFilePath, fileType: format, transform: init.transform, url: reqUrl, request });
        }
        default:
          return new Response(null, {
            status: 405,
            statusText: "Method Not Allowed"
          });
      }
    }
  };
});

// server/sse/files.ts
import { join as join8 } from "node:path";
import { pathToFileURL } from "node:url";

// node_modules/.deno/chokidar@4.0.3/node_modules/chokidar/esm/index.js
import { stat as statcb } from "fs";
import { stat as stat5, readdir as readdir2 } from "fs/promises";
import { EventEmitter } from "events";
import * as sysPath2 from "path";

// node_modules/.deno/readdirp@4.1.2/node_modules/readdirp/esm/index.js
import { stat as stat3, lstat, readdir, realpath } from "node:fs/promises";
import { Readable } from "node:stream";
import { resolve as presolve, relative as prelative, join as pjoin, sep as psep } from "node:path";
var EntryTypes = {
  FILE_TYPE: "files",
  DIR_TYPE: "directories",
  FILE_DIR_TYPE: "files_directories",
  EVERYTHING_TYPE: "all"
};
var defaultOptions = {
  root: ".",
  fileFilter: (_entryInfo) => true,
  directoryFilter: (_entryInfo) => true,
  type: EntryTypes.FILE_TYPE,
  lstat: false,
  depth: 2147483648,
  alwaysStat: false,
  highWaterMark: 4096
};
Object.freeze(defaultOptions);
var RECURSIVE_ERROR_CODE = "READDIRP_RECURSIVE_ERROR";
var NORMAL_FLOW_ERRORS = /* @__PURE__ */ new Set(["ENOENT", "EPERM", "EACCES", "ELOOP", RECURSIVE_ERROR_CODE]);
var ALL_TYPES = [
  EntryTypes.DIR_TYPE,
  EntryTypes.EVERYTHING_TYPE,
  EntryTypes.FILE_DIR_TYPE,
  EntryTypes.FILE_TYPE
];
var DIR_TYPES = /* @__PURE__ */ new Set([
  EntryTypes.DIR_TYPE,
  EntryTypes.EVERYTHING_TYPE,
  EntryTypes.FILE_DIR_TYPE
]);
var FILE_TYPES = /* @__PURE__ */ new Set([
  EntryTypes.EVERYTHING_TYPE,
  EntryTypes.FILE_DIR_TYPE,
  EntryTypes.FILE_TYPE
]);
var isNormalFlowError = (error) => NORMAL_FLOW_ERRORS.has(error.code);
var wantBigintFsStats = process.platform === "win32";
var emptyFn = (_entryInfo) => true;
var normalizeFilter = (filter) => {
  if (filter === void 0)
    return emptyFn;
  if (typeof filter === "function")
    return filter;
  if (typeof filter === "string") {
    const fl = filter.trim();
    return (entry) => entry.basename === fl;
  }
  if (Array.isArray(filter)) {
    const trItems = filter.map((item) => item.trim());
    return (entry) => trItems.some((f3) => entry.basename === f3);
  }
  return emptyFn;
};
var ReaddirpStream = class extends Readable {
  constructor(options = {}) {
    super({
      objectMode: true,
      autoDestroy: true,
      highWaterMark: options.highWaterMark
    });
    const opts = { ...defaultOptions, ...options };
    const { root, type } = opts;
    this._fileFilter = normalizeFilter(opts.fileFilter);
    this._directoryFilter = normalizeFilter(opts.directoryFilter);
    const statMethod = opts.lstat ? lstat : stat3;
    if (wantBigintFsStats) {
      this._stat = (path5) => statMethod(path5, { bigint: true });
    } else {
      this._stat = statMethod;
    }
    this._maxDepth = opts.depth ?? defaultOptions.depth;
    this._wantsDir = type ? DIR_TYPES.has(type) : false;
    this._wantsFile = type ? FILE_TYPES.has(type) : false;
    this._wantsEverything = type === EntryTypes.EVERYTHING_TYPE;
    this._root = presolve(root);
    this._isDirent = !opts.alwaysStat;
    this._statsProp = this._isDirent ? "dirent" : "stats";
    this._rdOptions = { encoding: "utf8", withFileTypes: this._isDirent };
    this.parents = [this._exploreDir(root, 1)];
    this.reading = false;
    this.parent = void 0;
  }
  async _read(batch) {
    if (this.reading)
      return;
    this.reading = true;
    try {
      while (!this.destroyed && batch > 0) {
        const par = this.parent;
        const fil = par && par.files;
        if (fil && fil.length > 0) {
          const { path: path5, depth } = par;
          const slice = fil.splice(0, batch).map((dirent) => this._formatEntry(dirent, path5));
          const awaited = await Promise.all(slice);
          for (const entry of awaited) {
            if (!entry)
              continue;
            if (this.destroyed)
              return;
            const entryType = await this._getEntryType(entry);
            if (entryType === "directory" && this._directoryFilter(entry)) {
              if (depth <= this._maxDepth) {
                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));
              }
              if (this._wantsDir) {
                this.push(entry);
                batch--;
              }
            } else if ((entryType === "file" || this._includeAsFile(entry)) && this._fileFilter(entry)) {
              if (this._wantsFile) {
                this.push(entry);
                batch--;
              }
            }
          }
        } else {
          const parent = this.parents.pop();
          if (!parent) {
            this.push(null);
            break;
          }
          this.parent = await parent;
          if (this.destroyed)
            return;
        }
      }
    } catch (error) {
      this.destroy(error);
    } finally {
      this.reading = false;
    }
  }
  async _exploreDir(path5, depth) {
    let files;
    try {
      files = await readdir(path5, this._rdOptions);
    } catch (error) {
      this._onError(error);
    }
    return { files, depth, path: path5 };
  }
  async _formatEntry(dirent, path5) {
    let entry;
    const basename8 = this._isDirent ? dirent.name : dirent;
    try {
      const fullPath = presolve(pjoin(path5, basename8));
      entry = { path: prelative(this._root, fullPath), fullPath, basename: basename8 };
      entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);
    } catch (err) {
      this._onError(err);
      return;
    }
    return entry;
  }
  _onError(err) {
    if (isNormalFlowError(err) && !this.destroyed) {
      this.emit("warn", err);
    } else {
      this.destroy(err);
    }
  }
  async _getEntryType(entry) {
    if (!entry && this._statsProp in entry) {
      return "";
    }
    const stats = entry[this._statsProp];
    if (stats.isFile())
      return "file";
    if (stats.isDirectory())
      return "directory";
    if (stats && stats.isSymbolicLink()) {
      const full = entry.fullPath;
      try {
        const entryRealPath = await realpath(full);
        const entryRealPathStats = await lstat(entryRealPath);
        if (entryRealPathStats.isFile()) {
          return "file";
        }
        if (entryRealPathStats.isDirectory()) {
          const len = entryRealPath.length;
          if (full.startsWith(entryRealPath) && full.substr(len, 1) === psep) {
            const recursiveError = new Error(`Circular symlink detected: "${full}" points to "${entryRealPath}"`);
            recursiveError.code = RECURSIVE_ERROR_CODE;
            return this._onError(recursiveError);
          }
          return "directory";
        }
      } catch (error) {
        this._onError(error);
        return "";
      }
    }
  }
  _includeAsFile(entry) {
    const stats = entry && entry[this._statsProp];
    return stats && this._wantsEverything && !stats.isDirectory();
  }
};
function readdirp(root, options = {}) {
  let type = options.entryType || options.type;
  if (type === "both")
    type = EntryTypes.FILE_DIR_TYPE;
  if (type)
    options.type = type;
  if (!root) {
    throw new Error("readdirp: root argument is required. Usage: readdirp(root, options)");
  } else if (typeof root !== "string") {
    throw new TypeError("readdirp: root argument must be a string. Usage: readdirp(root, options)");
  } else if (type && !ALL_TYPES.includes(type)) {
    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(", ")}`);
  }
  options.root = root;
  return new ReaddirpStream(options);
}

// node_modules/.deno/chokidar@4.0.3/node_modules/chokidar/esm/handler.js
import { watchFile, unwatchFile, watch as fs_watch } from "fs";
import { open as open2, stat as stat4, lstat as lstat2, realpath as fsrealpath } from "fs/promises";
import * as sysPath from "path";
import { type as osType } from "os";
var STR_DATA = "data";
var STR_END = "end";
var STR_CLOSE = "close";
var EMPTY_FN = () => {
};
var pl = process.platform;
var isWindows2 = pl === "win32";
var isMacos = pl === "darwin";
var isLinux = pl === "linux";
var isFreeBSD = pl === "freebsd";
var isIBMi = osType() === "OS400";
var EVENTS = {
  ALL: "all",
  READY: "ready",
  ADD: "add",
  CHANGE: "change",
  ADD_DIR: "addDir",
  UNLINK: "unlink",
  UNLINK_DIR: "unlinkDir",
  RAW: "raw",
  ERROR: "error"
};
var EV = EVENTS;
var THROTTLE_MODE_WATCH = "watch";
var statMethods = { lstat: lstat2, stat: stat4 };
var KEY_LISTENERS = "listeners";
var KEY_ERR = "errHandlers";
var KEY_RAW = "rawEmitters";
var HANDLER_KEYS = [KEY_LISTENERS, KEY_ERR, KEY_RAW];
var binaryExtensions = /* @__PURE__ */ new Set([
  "3dm",
  "3ds",
  "3g2",
  "3gp",
  "7z",
  "a",
  "aac",
  "adp",
  "afdesign",
  "afphoto",
  "afpub",
  "ai",
  "aif",
  "aiff",
  "alz",
  "ape",
  "apk",
  "appimage",
  "ar",
  "arj",
  "asf",
  "au",
  "avi",
  "bak",
  "baml",
  "bh",
  "bin",
  "bk",
  "bmp",
  "btif",
  "bz2",
  "bzip2",
  "cab",
  "caf",
  "cgm",
  "class",
  "cmx",
  "cpio",
  "cr2",
  "cur",
  "dat",
  "dcm",
  "deb",
  "dex",
  "djvu",
  "dll",
  "dmg",
  "dng",
  "doc",
  "docm",
  "docx",
  "dot",
  "dotm",
  "dra",
  "DS_Store",
  "dsk",
  "dts",
  "dtshd",
  "dvb",
  "dwg",
  "dxf",
  "ecelp4800",
  "ecelp7470",
  "ecelp9600",
  "egg",
  "eol",
  "eot",
  "epub",
  "exe",
  "f4v",
  "fbs",
  "fh",
  "fla",
  "flac",
  "flatpak",
  "fli",
  "flv",
  "fpx",
  "fst",
  "fvt",
  "g3",
  "gh",
  "gif",
  "graffle",
  "gz",
  "gzip",
  "h261",
  "h263",
  "h264",
  "icns",
  "ico",
  "ief",
  "img",
  "ipa",
  "iso",
  "jar",
  "jpeg",
  "jpg",
  "jpgv",
  "jpm",
  "jxr",
  "key",
  "ktx",
  "lha",
  "lib",
  "lvp",
  "lz",
  "lzh",
  "lzma",
  "lzo",
  "m3u",
  "m4a",
  "m4v",
  "mar",
  "mdi",
  "mht",
  "mid",
  "midi",
  "mj2",
  "mka",
  "mkv",
  "mmr",
  "mng",
  "mobi",
  "mov",
  "movie",
  "mp3",
  "mp4",
  "mp4a",
  "mpeg",
  "mpg",
  "mpga",
  "mxu",
  "nef",
  "npx",
  "numbers",
  "nupkg",
  "o",
  "odp",
  "ods",
  "odt",
  "oga",
  "ogg",
  "ogv",
  "otf",
  "ott",
  "pages",
  "pbm",
  "pcx",
  "pdb",
  "pdf",
  "pea",
  "pgm",
  "pic",
  "png",
  "pnm",
  "pot",
  "potm",
  "potx",
  "ppa",
  "ppam",
  "ppm",
  "pps",
  "ppsm",
  "ppsx",
  "ppt",
  "pptm",
  "pptx",
  "psd",
  "pya",
  "pyc",
  "pyo",
  "pyv",
  "qt",
  "rar",
  "ras",
  "raw",
  "resources",
  "rgb",
  "rip",
  "rlc",
  "rmf",
  "rmvb",
  "rpm",
  "rtf",
  "rz",
  "s3m",
  "s7z",
  "scpt",
  "sgi",
  "shar",
  "snap",
  "sil",
  "sketch",
  "slk",
  "smv",
  "snk",
  "so",
  "stl",
  "suo",
  "sub",
  "swf",
  "tar",
  "tbz",
  "tbz2",
  "tga",
  "tgz",
  "thmx",
  "tif",
  "tiff",
  "tlz",
  "ttc",
  "ttf",
  "txz",
  "udf",
  "uvh",
  "uvi",
  "uvm",
  "uvp",
  "uvs",
  "uvu",
  "viv",
  "vob",
  "war",
  "wav",
  "wax",
  "wbmp",
  "wdp",
  "weba",
  "webm",
  "webp",
  "whl",
  "wim",
  "wm",
  "wma",
  "wmv",
  "wmx",
  "woff",
  "woff2",
  "wrm",
  "wvx",
  "xbm",
  "xif",
  "xla",
  "xlam",
  "xls",
  "xlsb",
  "xlsm",
  "xlsx",
  "xlt",
  "xltm",
  "xltx",
  "xm",
  "xmind",
  "xpi",
  "xpm",
  "xwd",
  "xz",
  "z",
  "zip",
  "zipx"
]);
var isBinaryPath = (filePath) => binaryExtensions.has(sysPath.extname(filePath).slice(1).toLowerCase());
var foreach = (val, fn) => {
  if (val instanceof Set) {
    val.forEach(fn);
  } else {
    fn(val);
  }
};
var addAndConvert = (main, prop, item) => {
  let container = main[prop];
  if (!(container instanceof Set)) {
    main[prop] = container = /* @__PURE__ */ new Set([container]);
  }
  container.add(item);
};
var clearItem = (cont) => (key) => {
  const set = cont[key];
  if (set instanceof Set) {
    set.clear();
  } else {
    delete cont[key];
  }
};
var delFromSet = (main, prop, item) => {
  const container = main[prop];
  if (container instanceof Set) {
    container.delete(item);
  } else if (container === item) {
    delete main[prop];
  }
};
var isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;
var FsWatchInstances = /* @__PURE__ */ new Map();
function createFsWatchInstance(path5, options, listener, errHandler, emitRaw) {
  const handleEvent = (rawEvent, evPath) => {
    listener(path5);
    emitRaw(rawEvent, evPath, { watchedPath: path5 });
    if (evPath && path5 !== evPath) {
      fsWatchBroadcast(sysPath.resolve(path5, evPath), KEY_LISTENERS, sysPath.join(path5, evPath));
    }
  };
  try {
    return fs_watch(path5, {
      persistent: options.persistent
    }, handleEvent);
  } catch (error) {
    errHandler(error);
    return void 0;
  }
}
var fsWatchBroadcast = (fullPath, listenerType, val1, val2, val3) => {
  const cont = FsWatchInstances.get(fullPath);
  if (!cont)
    return;
  foreach(cont[listenerType], (listener) => {
    listener(val1, val2, val3);
  });
};
var setFsWatchListener = (path5, fullPath, options, handlers) => {
  const { listener, errHandler, rawEmitter } = handlers;
  let cont = FsWatchInstances.get(fullPath);
  let watcher;
  if (!options.persistent) {
    watcher = createFsWatchInstance(path5, options, listener, errHandler, rawEmitter);
    if (!watcher)
      return;
    return watcher.close.bind(watcher);
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_ERR, errHandler);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    watcher = createFsWatchInstance(
      path5,
      options,
      fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS),
      errHandler,
      // no need to use broadcast here
      fsWatchBroadcast.bind(null, fullPath, KEY_RAW)
    );
    if (!watcher)
      return;
    watcher.on(EV.ERROR, async (error) => {
      const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);
      if (cont)
        cont.watcherUnusable = true;
      if (isWindows2 && error.code === "EPERM") {
        try {
          const fd = await open2(path5, "r");
          await fd.close();
          broadcastErr(error);
        } catch (err) {
        }
      } else {
        broadcastErr(error);
      }
    });
    cont = {
      listeners: listener,
      errHandlers: errHandler,
      rawEmitters: rawEmitter,
      watcher
    };
    FsWatchInstances.set(fullPath, cont);
  }
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_ERR, errHandler);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      cont.watcher.close();
      FsWatchInstances.delete(fullPath);
      HANDLER_KEYS.forEach(clearItem(cont));
      cont.watcher = void 0;
      Object.freeze(cont);
    }
  };
};
var FsWatchFileInstances = /* @__PURE__ */ new Map();
var setFsWatchFileListener = (path5, fullPath, options, handlers) => {
  const { listener, rawEmitter } = handlers;
  let cont = FsWatchFileInstances.get(fullPath);
  const copts = cont && cont.options;
  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {
    unwatchFile(fullPath);
    cont = void 0;
  }
  if (cont) {
    addAndConvert(cont, KEY_LISTENERS, listener);
    addAndConvert(cont, KEY_RAW, rawEmitter);
  } else {
    cont = {
      listeners: listener,
      rawEmitters: rawEmitter,
      options,
      watcher: watchFile(fullPath, options, (curr, prev) => {
        foreach(cont.rawEmitters, (rawEmitter2) => {
          rawEmitter2(EV.CHANGE, fullPath, { curr, prev });
        });
        const currmtime = curr.mtimeMs;
        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {
          foreach(cont.listeners, (listener2) => listener2(path5, curr));
        }
      })
    };
    FsWatchFileInstances.set(fullPath, cont);
  }
  return () => {
    delFromSet(cont, KEY_LISTENERS, listener);
    delFromSet(cont, KEY_RAW, rawEmitter);
    if (isEmptySet(cont.listeners)) {
      FsWatchFileInstances.delete(fullPath);
      unwatchFile(fullPath);
      cont.options = cont.watcher = void 0;
      Object.freeze(cont);
    }
  };
};
var NodeFsHandler = class {
  constructor(fsW) {
    this.fsw = fsW;
    this._boundHandleError = (error) => fsW._handleError(error);
  }
  /**
   * Watch file for changes with fs_watchFile or fs_watch.
   * @param path to file or dir
   * @param listener on fs change
   * @returns closer for the watcher instance
   */
  _watchWithNodeFs(path5, listener) {
    const opts = this.fsw.options;
    const directory = sysPath.dirname(path5);
    const basename8 = sysPath.basename(path5);
    const parent = this.fsw._getWatchedDir(directory);
    parent.add(basename8);
    const absolutePath = sysPath.resolve(path5);
    const options = {
      persistent: opts.persistent
    };
    if (!listener)
      listener = EMPTY_FN;
    let closer;
    if (opts.usePolling) {
      const enableBin = opts.interval !== opts.binaryInterval;
      options.interval = enableBin && isBinaryPath(basename8) ? opts.binaryInterval : opts.interval;
      closer = setFsWatchFileListener(path5, absolutePath, options, {
        listener,
        rawEmitter: this.fsw._emitRaw
      });
    } else {
      closer = setFsWatchListener(path5, absolutePath, options, {
        listener,
        errHandler: this._boundHandleError,
        rawEmitter: this.fsw._emitRaw
      });
    }
    return closer;
  }
  /**
   * Watch a file and emit add event if warranted.
   * @returns closer for the watcher instance
   */
  _handleFile(file, stats, initialAdd) {
    if (this.fsw.closed) {
      return;
    }
    const dirname4 = sysPath.dirname(file);
    const basename8 = sysPath.basename(file);
    const parent = this.fsw._getWatchedDir(dirname4);
    let prevStats = stats;
    if (parent.has(basename8))
      return;
    const listener = async (path5, newStats) => {
      if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5))
        return;
      if (!newStats || newStats.mtimeMs === 0) {
        try {
          const newStats2 = await stat4(file);
          if (this.fsw.closed)
            return;
          const at3 = newStats2.atimeMs;
          const mt3 = newStats2.mtimeMs;
          if (!at3 || at3 <= mt3 || mt3 !== prevStats.mtimeMs) {
            this.fsw._emit(EV.CHANGE, file, newStats2);
          }
          if ((isMacos || isLinux || isFreeBSD) && prevStats.ino !== newStats2.ino) {
            this.fsw._closeFile(path5);
            prevStats = newStats2;
            const closer2 = this._watchWithNodeFs(file, listener);
            if (closer2)
              this.fsw._addPathCloser(path5, closer2);
          } else {
            prevStats = newStats2;
          }
        } catch (error) {
          this.fsw._remove(dirname4, basename8);
        }
      } else if (parent.has(basename8)) {
        const at3 = newStats.atimeMs;
        const mt3 = newStats.mtimeMs;
        if (!at3 || at3 <= mt3 || mt3 !== prevStats.mtimeMs) {
          this.fsw._emit(EV.CHANGE, file, newStats);
        }
        prevStats = newStats;
      }
    };
    const closer = this._watchWithNodeFs(file, listener);
    if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {
      if (!this.fsw._throttle(EV.ADD, file, 0))
        return;
      this.fsw._emit(EV.ADD, file, stats);
    }
    return closer;
  }
  /**
   * Handle symlinks encountered while reading a dir.
   * @param entry returned by readdirp
   * @param directory path of dir being read
   * @param path of this item
   * @param item basename of this item
   * @returns true if no more processing is needed for this entry.
   */
  async _handleSymlink(entry, directory, path5, item) {
    if (this.fsw.closed) {
      return;
    }
    const full = entry.fullPath;
    const dir = this.fsw._getWatchedDir(directory);
    if (!this.fsw.options.followSymlinks) {
      this.fsw._incrReadyCount();
      let linkPath;
      try {
        linkPath = await fsrealpath(path5);
      } catch (e3) {
        this.fsw._emitReady();
        return true;
      }
      if (this.fsw.closed)
        return;
      if (dir.has(item)) {
        if (this.fsw._symlinkPaths.get(full) !== linkPath) {
          this.fsw._symlinkPaths.set(full, linkPath);
          this.fsw._emit(EV.CHANGE, path5, entry.stats);
        }
      } else {
        dir.add(item);
        this.fsw._symlinkPaths.set(full, linkPath);
        this.fsw._emit(EV.ADD, path5, entry.stats);
      }
      this.fsw._emitReady();
      return true;
    }
    if (this.fsw._symlinkPaths.has(full)) {
      return true;
    }
    this.fsw._symlinkPaths.set(full, true);
  }
  _handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {
    directory = sysPath.join(directory, "");
    throttler = this.fsw._throttle("readdir", directory, 1e3);
    if (!throttler)
      return;
    const previous = this.fsw._getWatchedDir(wh.path);
    const current = /* @__PURE__ */ new Set();
    let stream = this.fsw._readdirp(directory, {
      fileFilter: (entry) => wh.filterPath(entry),
      directoryFilter: (entry) => wh.filterDir(entry)
    });
    if (!stream)
      return;
    stream.on(STR_DATA, async (entry) => {
      if (this.fsw.closed) {
        stream = void 0;
        return;
      }
      const item = entry.path;
      let path5 = sysPath.join(directory, item);
      current.add(item);
      if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path5, item)) {
        return;
      }
      if (this.fsw.closed) {
        stream = void 0;
        return;
      }
      if (item === target || !target && !previous.has(item)) {
        this.fsw._incrReadyCount();
        path5 = sysPath.join(dir, sysPath.relative(dir, path5));
        this._addToNodeFs(path5, initialAdd, wh, depth + 1);
      }
    }).on(EV.ERROR, this._boundHandleError);
    return new Promise((resolve4, reject) => {
      if (!stream)
        return reject();
      stream.once(STR_END, () => {
        if (this.fsw.closed) {
          stream = void 0;
          return;
        }
        const wasThrottled = throttler ? throttler.clear() : false;
        resolve4(void 0);
        previous.getChildren().filter((item) => {
          return item !== directory && !current.has(item);
        }).forEach((item) => {
          this.fsw._remove(directory, item);
        });
        stream = void 0;
        if (wasThrottled)
          this._handleRead(directory, false, wh, target, dir, depth, throttler);
      });
    });
  }
  /**
   * Read directory to add / remove files from `@watched` list and re-read it on change.
   * @param dir fs path
   * @param stats
   * @param initialAdd
   * @param depth relative to user-supplied path
   * @param target child path targeted for watch
   * @param wh Common watch helpers for this path
   * @param realpath
   * @returns closer for the watcher instance.
   */
  async _handleDir(dir, stats, initialAdd, depth, target, wh, realpath2) {
    const parentDir = this.fsw._getWatchedDir(sysPath.dirname(dir));
    const tracked = parentDir.has(sysPath.basename(dir));
    if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {
      this.fsw._emit(EV.ADD_DIR, dir, stats);
    }
    parentDir.add(sysPath.basename(dir));
    this.fsw._getWatchedDir(dir);
    let throttler;
    let closer;
    const oDepth = this.fsw.options.depth;
    if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath2)) {
      if (!target) {
        await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);
        if (this.fsw.closed)
          return;
      }
      closer = this._watchWithNodeFs(dir, (dirPath, stats2) => {
        if (stats2 && stats2.mtimeMs === 0)
          return;
        this._handleRead(dirPath, false, wh, target, dir, depth, throttler);
      });
    }
    return closer;
  }
  /**
   * Handle added file, directory, or glob pattern.
   * Delegates call to _handleFile / _handleDir after checks.
   * @param path to file or ir
   * @param initialAdd was the file added at watch instantiation?
   * @param priorWh depth relative to user-supplied path
   * @param depth Child path actually targeted for watch
   * @param target Child path actually targeted for watch
   */
  async _addToNodeFs(path5, initialAdd, priorWh, depth, target) {
    const ready = this.fsw._emitReady;
    if (this.fsw._isIgnored(path5) || this.fsw.closed) {
      ready();
      return false;
    }
    const wh = this.fsw._getWatchHelpers(path5);
    if (priorWh) {
      wh.filterPath = (entry) => priorWh.filterPath(entry);
      wh.filterDir = (entry) => priorWh.filterDir(entry);
    }
    try {
      const stats = await statMethods[wh.statMethod](wh.watchPath);
      if (this.fsw.closed)
        return;
      if (this.fsw._isIgnored(wh.watchPath, stats)) {
        ready();
        return false;
      }
      const follow = this.fsw.options.followSymlinks;
      let closer;
      if (stats.isDirectory()) {
        const absPath = sysPath.resolve(path5);
        const targetPath = follow ? await fsrealpath(path5) : path5;
        if (this.fsw.closed)
          return;
        closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);
        if (this.fsw.closed)
          return;
        if (absPath !== targetPath && targetPath !== void 0) {
          this.fsw._symlinkPaths.set(absPath, targetPath);
        }
      } else if (stats.isSymbolicLink()) {
        const targetPath = follow ? await fsrealpath(path5) : path5;
        if (this.fsw.closed)
          return;
        const parent = sysPath.dirname(wh.watchPath);
        this.fsw._getWatchedDir(parent).add(wh.watchPath);
        this.fsw._emit(EV.ADD, wh.watchPath, stats);
        closer = await this._handleDir(parent, stats, initialAdd, depth, path5, wh, targetPath);
        if (this.fsw.closed)
          return;
        if (targetPath !== void 0) {
          this.fsw._symlinkPaths.set(sysPath.resolve(path5), targetPath);
        }
      } else {
        closer = this._handleFile(wh.watchPath, stats, initialAdd);
      }
      ready();
      if (closer)
        this.fsw._addPathCloser(path5, closer);
      return false;
    } catch (error) {
      if (this.fsw._handleError(error)) {
        ready();
        return path5;
      }
    }
  }
};

// node_modules/.deno/chokidar@4.0.3/node_modules/chokidar/esm/index.js
var SLASH = "/";
var SLASH_SLASH = "//";
var ONE_DOT = ".";
var TWO_DOTS = "..";
var STRING_TYPE = "string";
var BACK_SLASH_RE = /\\/g;
var DOUBLE_SLASH_RE = /\/\//;
var DOT_RE = /\..*\.(sw[px])$|~$|\.subl.*\.tmp/;
var REPLACER_RE = /^\.[/\\]/;
function arrify(item) {
  return Array.isArray(item) ? item : [item];
}
var isMatcherObject = (matcher) => typeof matcher === "object" && matcher !== null && !(matcher instanceof RegExp);
function createPattern(matcher) {
  if (typeof matcher === "function")
    return matcher;
  if (typeof matcher === "string")
    return (string) => matcher === string;
  if (matcher instanceof RegExp)
    return (string) => matcher.test(string);
  if (typeof matcher === "object" && matcher !== null) {
    return (string) => {
      if (matcher.path === string)
        return true;
      if (matcher.recursive) {
        const relative3 = sysPath2.relative(matcher.path, string);
        if (!relative3) {
          return false;
        }
        return !relative3.startsWith("..") && !sysPath2.isAbsolute(relative3);
      }
      return false;
    };
  }
  return () => false;
}
function normalizePath(path5) {
  if (typeof path5 !== "string")
    throw new Error("string expected");
  path5 = sysPath2.normalize(path5);
  path5 = path5.replace(/\\/g, "/");
  let prepend = false;
  if (path5.startsWith("//"))
    prepend = true;
  const DOUBLE_SLASH_RE2 = /\/\//;
  while (path5.match(DOUBLE_SLASH_RE2))
    path5 = path5.replace(DOUBLE_SLASH_RE2, "/");
  if (prepend)
    path5 = "/" + path5;
  return path5;
}
function matchPatterns(patterns, testString, stats) {
  const path5 = normalizePath(testString);
  for (let index = 0; index < patterns.length; index++) {
    const pattern = patterns[index];
    if (pattern(path5, stats)) {
      return true;
    }
  }
  return false;
}
function anymatch(matchers, testString) {
  if (matchers == null) {
    throw new TypeError("anymatch: specify first argument");
  }
  const matchersArray = arrify(matchers);
  const patterns = matchersArray.map((matcher) => createPattern(matcher));
  if (testString == null) {
    return (testString2, stats) => {
      return matchPatterns(patterns, testString2, stats);
    };
  }
  return matchPatterns(patterns, testString);
}
var unifyPaths = (paths_) => {
  const paths = arrify(paths_).flat();
  if (!paths.every((p3) => typeof p3 === STRING_TYPE)) {
    throw new TypeError(`Non-string provided as watch path: ${paths}`);
  }
  return paths.map(normalizePathToUnix);
};
var toUnix = (string) => {
  let str = string.replace(BACK_SLASH_RE, SLASH);
  let prepend = false;
  if (str.startsWith(SLASH_SLASH)) {
    prepend = true;
  }
  while (str.match(DOUBLE_SLASH_RE)) {
    str = str.replace(DOUBLE_SLASH_RE, SLASH);
  }
  if (prepend) {
    str = SLASH + str;
  }
  return str;
};
var normalizePathToUnix = (path5) => toUnix(sysPath2.normalize(toUnix(path5)));
var normalizeIgnored = (cwd = "") => (path5) => {
  if (typeof path5 === "string") {
    return normalizePathToUnix(sysPath2.isAbsolute(path5) ? path5 : sysPath2.join(cwd, path5));
  } else {
    return path5;
  }
};
var getAbsolutePath = (path5, cwd) => {
  if (sysPath2.isAbsolute(path5)) {
    return path5;
  }
  return sysPath2.join(cwd, path5);
};
var EMPTY_SET = Object.freeze(/* @__PURE__ */ new Set());
var DirEntry = class {
  constructor(dir, removeWatcher) {
    this.path = dir;
    this._removeWatcher = removeWatcher;
    this.items = /* @__PURE__ */ new Set();
  }
  add(item) {
    const { items } = this;
    if (!items)
      return;
    if (item !== ONE_DOT && item !== TWO_DOTS)
      items.add(item);
  }
  async remove(item) {
    const { items } = this;
    if (!items)
      return;
    items.delete(item);
    if (items.size > 0)
      return;
    const dir = this.path;
    try {
      await readdir2(dir);
    } catch (err) {
      if (this._removeWatcher) {
        this._removeWatcher(sysPath2.dirname(dir), sysPath2.basename(dir));
      }
    }
  }
  has(item) {
    const { items } = this;
    if (!items)
      return;
    return items.has(item);
  }
  getChildren() {
    const { items } = this;
    if (!items)
      return [];
    return [...items.values()];
  }
  dispose() {
    this.items.clear();
    this.path = "";
    this._removeWatcher = EMPTY_FN;
    this.items = EMPTY_SET;
    Object.freeze(this);
  }
};
var STAT_METHOD_F = "stat";
var STAT_METHOD_L = "lstat";
var WatchHelper = class {
  constructor(path5, follow, fsw) {
    this.fsw = fsw;
    const watchPath = path5;
    this.path = path5 = path5.replace(REPLACER_RE, "");
    this.watchPath = watchPath;
    this.fullWatchPath = sysPath2.resolve(watchPath);
    this.dirParts = [];
    this.dirParts.forEach((parts) => {
      if (parts.length > 1)
        parts.pop();
    });
    this.followSymlinks = follow;
    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;
  }
  entryPath(entry) {
    return sysPath2.join(this.watchPath, sysPath2.relative(this.watchPath, entry.fullPath));
  }
  filterPath(entry) {
    const { stats } = entry;
    if (stats && stats.isSymbolicLink())
      return this.filterDir(entry);
    const resolvedPath = this.entryPath(entry);
    return this.fsw._isntIgnored(resolvedPath, stats) && this.fsw._hasReadPermissions(stats);
  }
  filterDir(entry) {
    return this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
  }
};
var FSWatcher = class extends EventEmitter {
  // Not indenting methods for history sake; for now.
  constructor(_opts = {}) {
    super();
    this.closed = false;
    this._closers = /* @__PURE__ */ new Map();
    this._ignoredPaths = /* @__PURE__ */ new Set();
    this._throttled = /* @__PURE__ */ new Map();
    this._streams = /* @__PURE__ */ new Set();
    this._symlinkPaths = /* @__PURE__ */ new Map();
    this._watched = /* @__PURE__ */ new Map();
    this._pendingWrites = /* @__PURE__ */ new Map();
    this._pendingUnlinks = /* @__PURE__ */ new Map();
    this._readyCount = 0;
    this._readyEmitted = false;
    const awf = _opts.awaitWriteFinish;
    const DEF_AWF = { stabilityThreshold: 2e3, pollInterval: 100 };
    const opts = {
      // Defaults
      persistent: true,
      ignoreInitial: false,
      ignorePermissionErrors: false,
      interval: 100,
      binaryInterval: 300,
      followSymlinks: true,
      usePolling: false,
      // useAsync: false,
      atomic: true,
      // NOTE: overwritten later (depends on usePolling)
      ..._opts,
      // Change format
      ignored: _opts.ignored ? arrify(_opts.ignored) : arrify([]),
      awaitWriteFinish: awf === true ? DEF_AWF : typeof awf === "object" ? { ...DEF_AWF, ...awf } : false
    };
    if (isIBMi)
      opts.usePolling = true;
    if (opts.atomic === void 0)
      opts.atomic = !opts.usePolling;
    const envPoll = process.env.CHOKIDAR_USEPOLLING;
    if (envPoll !== void 0) {
      const envLower = envPoll.toLowerCase();
      if (envLower === "false" || envLower === "0")
        opts.usePolling = false;
      else if (envLower === "true" || envLower === "1")
        opts.usePolling = true;
      else
        opts.usePolling = !!envLower;
    }
    const envInterval = process.env.CHOKIDAR_INTERVAL;
    if (envInterval)
      opts.interval = Number.parseInt(envInterval, 10);
    let readyCalls = 0;
    this._emitReady = () => {
      readyCalls++;
      if (readyCalls >= this._readyCount) {
        this._emitReady = EMPTY_FN;
        this._readyEmitted = true;
        process.nextTick(() => this.emit(EVENTS.READY));
      }
    };
    this._emitRaw = (...args) => this.emit(EVENTS.RAW, ...args);
    this._boundRemove = this._remove.bind(this);
    this.options = opts;
    this._nodeFsHandler = new NodeFsHandler(this);
    Object.freeze(opts);
  }
  _addIgnoredPath(matcher) {
    if (isMatcherObject(matcher)) {
      for (const ignored of this._ignoredPaths) {
        if (isMatcherObject(ignored) && ignored.path === matcher.path && ignored.recursive === matcher.recursive) {
          return;
        }
      }
    }
    this._ignoredPaths.add(matcher);
  }
  _removeIgnoredPath(matcher) {
    this._ignoredPaths.delete(matcher);
    if (typeof matcher === "string") {
      for (const ignored of this._ignoredPaths) {
        if (isMatcherObject(ignored) && ignored.path === matcher) {
          this._ignoredPaths.delete(ignored);
        }
      }
    }
  }
  // Public methods
  /**
   * Adds paths to be watched on an existing FSWatcher instance.
   * @param paths_ file or file list. Other arguments are unused
   */
  add(paths_, _origAdd, _internal) {
    const { cwd } = this.options;
    this.closed = false;
    this._closePromise = void 0;
    let paths = unifyPaths(paths_);
    if (cwd) {
      paths = paths.map((path5) => {
        const absPath = getAbsolutePath(path5, cwd);
        return absPath;
      });
    }
    paths.forEach((path5) => {
      this._removeIgnoredPath(path5);
    });
    this._userIgnored = void 0;
    if (!this._readyCount)
      this._readyCount = 0;
    this._readyCount += paths.length;
    Promise.all(paths.map(async (path5) => {
      const res = await this._nodeFsHandler._addToNodeFs(path5, !_internal, void 0, 0, _origAdd);
      if (res)
        this._emitReady();
      return res;
    })).then((results) => {
      if (this.closed)
        return;
      results.forEach((item) => {
        if (item)
          this.add(sysPath2.dirname(item), sysPath2.basename(_origAdd || item));
      });
    });
    return this;
  }
  /**
   * Close watchers or start ignoring events from specified paths.
   */
  unwatch(paths_) {
    if (this.closed)
      return this;
    const paths = unifyPaths(paths_);
    const { cwd } = this.options;
    paths.forEach((path5) => {
      if (!sysPath2.isAbsolute(path5) && !this._closers.has(path5)) {
        if (cwd)
          path5 = sysPath2.join(cwd, path5);
        path5 = sysPath2.resolve(path5);
      }
      this._closePath(path5);
      this._addIgnoredPath(path5);
      if (this._watched.has(path5)) {
        this._addIgnoredPath({
          path: path5,
          recursive: true
        });
      }
      this._userIgnored = void 0;
    });
    return this;
  }
  /**
   * Close watchers and remove all listeners from watched paths.
   */
  close() {
    if (this._closePromise) {
      return this._closePromise;
    }
    this.closed = true;
    this.removeAllListeners();
    const closers = [];
    this._closers.forEach((closerList) => closerList.forEach((closer) => {
      const promise = closer();
      if (promise instanceof Promise)
        closers.push(promise);
    }));
    this._streams.forEach((stream) => stream.destroy());
    this._userIgnored = void 0;
    this._readyCount = 0;
    this._readyEmitted = false;
    this._watched.forEach((dirent) => dirent.dispose());
    this._closers.clear();
    this._watched.clear();
    this._streams.clear();
    this._symlinkPaths.clear();
    this._throttled.clear();
    this._closePromise = closers.length ? Promise.all(closers).then(() => void 0) : Promise.resolve();
    return this._closePromise;
  }
  /**
   * Expose list of watched paths
   * @returns for chaining
   */
  getWatched() {
    const watchList = {};
    this._watched.forEach((entry, dir) => {
      const key = this.options.cwd ? sysPath2.relative(this.options.cwd, dir) : dir;
      const index = key || ONE_DOT;
      watchList[index] = entry.getChildren().sort();
    });
    return watchList;
  }
  emitWithAll(event, args) {
    this.emit(event, ...args);
    if (event !== EVENTS.ERROR)
      this.emit(EVENTS.ALL, event, ...args);
  }
  // Common helpers
  // --------------
  /**
   * Normalize and emit events.
   * Calling _emit DOES NOT MEAN emit() would be called!
   * @param event Type of event
   * @param path File or directory path
   * @param stats arguments to be passed with event
   * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
   */
  async _emit(event, path5, stats) {
    if (this.closed)
      return;
    const opts = this.options;
    if (isWindows2)
      path5 = sysPath2.normalize(path5);
    if (opts.cwd)
      path5 = sysPath2.relative(opts.cwd, path5);
    const args = [path5];
    if (stats != null)
      args.push(stats);
    const awf = opts.awaitWriteFinish;
    let pw;
    if (awf && (pw = this._pendingWrites.get(path5))) {
      pw.lastChange = /* @__PURE__ */ new Date();
      return this;
    }
    if (opts.atomic) {
      if (event === EVENTS.UNLINK) {
        this._pendingUnlinks.set(path5, [event, ...args]);
        setTimeout(() => {
          this._pendingUnlinks.forEach((entry, path6) => {
            this.emit(...entry);
            this.emit(EVENTS.ALL, ...entry);
            this._pendingUnlinks.delete(path6);
          });
        }, typeof opts.atomic === "number" ? opts.atomic : 100);
        return this;
      }
      if (event === EVENTS.ADD && this._pendingUnlinks.has(path5)) {
        event = EVENTS.CHANGE;
        this._pendingUnlinks.delete(path5);
      }
    }
    if (awf && (event === EVENTS.ADD || event === EVENTS.CHANGE) && this._readyEmitted) {
      const awfEmit = (err, stats2) => {
        if (err) {
          event = EVENTS.ERROR;
          args[0] = err;
          this.emitWithAll(event, args);
        } else if (stats2) {
          if (args.length > 1) {
            args[1] = stats2;
          } else {
            args.push(stats2);
          }
          this.emitWithAll(event, args);
        }
      };
      this._awaitWriteFinish(path5, awf.stabilityThreshold, event, awfEmit);
      return this;
    }
    if (event === EVENTS.CHANGE) {
      const isThrottled = !this._throttle(EVENTS.CHANGE, path5, 50);
      if (isThrottled)
        return this;
    }
    if (opts.alwaysStat && stats === void 0 && (event === EVENTS.ADD || event === EVENTS.ADD_DIR || event === EVENTS.CHANGE)) {
      const fullPath = opts.cwd ? sysPath2.join(opts.cwd, path5) : path5;
      let stats2;
      try {
        stats2 = await stat5(fullPath);
      } catch (err) {
      }
      if (!stats2 || this.closed)
        return;
      args.push(stats2);
    }
    this.emitWithAll(event, args);
    return this;
  }
  /**
   * Common handler for errors
   * @returns The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
   */
  _handleError(error) {
    const code2 = error && error.code;
    if (error && code2 !== "ENOENT" && code2 !== "ENOTDIR" && (!this.options.ignorePermissionErrors || code2 !== "EPERM" && code2 !== "EACCES")) {
      this.emit(EVENTS.ERROR, error);
    }
    return error || this.closed;
  }
  /**
   * Helper utility for throttling
   * @param actionType type being throttled
   * @param path being acted upon
   * @param timeout duration of time to suppress duplicate actions
   * @returns tracking object or false if action should be suppressed
   */
  _throttle(actionType, path5, timeout) {
    if (!this._throttled.has(actionType)) {
      this._throttled.set(actionType, /* @__PURE__ */ new Map());
    }
    const action = this._throttled.get(actionType);
    if (!action)
      throw new Error("invalid throttle");
    const actionPath = action.get(path5);
    if (actionPath) {
      actionPath.count++;
      return false;
    }
    let timeoutObject;
    const clear = () => {
      const item = action.get(path5);
      const count = item ? item.count : 0;
      action.delete(path5);
      clearTimeout(timeoutObject);
      if (item)
        clearTimeout(item.timeoutObject);
      return count;
    };
    timeoutObject = setTimeout(clear, timeout);
    const thr = { timeoutObject, clear, count: 0 };
    action.set(path5, thr);
    return thr;
  }
  _incrReadyCount() {
    return this._readyCount++;
  }
  /**
   * Awaits write operation to finish.
   * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
   * @param path being acted upon
   * @param threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
   * @param event
   * @param awfEmit Callback to be called when ready for event to be emitted.
   */
  _awaitWriteFinish(path5, threshold, event, awfEmit) {
    const awf = this.options.awaitWriteFinish;
    if (typeof awf !== "object")
      return;
    const pollInterval = awf.pollInterval;
    let timeoutHandler;
    let fullPath = path5;
    if (this.options.cwd && !sysPath2.isAbsolute(path5)) {
      fullPath = sysPath2.join(this.options.cwd, path5);
    }
    const now = /* @__PURE__ */ new Date();
    const writes = this._pendingWrites;
    function awaitWriteFinishFn(prevStat) {
      statcb(fullPath, (err, curStat) => {
        if (err || !writes.has(path5)) {
          if (err && err.code !== "ENOENT")
            awfEmit(err);
          return;
        }
        const now2 = Number(/* @__PURE__ */ new Date());
        if (prevStat && curStat.size !== prevStat.size) {
          writes.get(path5).lastChange = now2;
        }
        const pw = writes.get(path5);
        const df = now2 - pw.lastChange;
        if (df >= threshold) {
          writes.delete(path5);
          awfEmit(void 0, curStat);
        } else {
          timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval, curStat);
        }
      });
    }
    if (!writes.has(path5)) {
      writes.set(path5, {
        lastChange: now,
        cancelWait: () => {
          writes.delete(path5);
          clearTimeout(timeoutHandler);
          return event;
        }
      });
      timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval);
    }
  }
  /**
   * Determines whether user has asked to ignore this path.
   */
  _isIgnored(path5, stats) {
    if (this.options.atomic && DOT_RE.test(path5))
      return true;
    if (!this._userIgnored) {
      const { cwd } = this.options;
      const ign = this.options.ignored;
      const ignored = (ign || []).map(normalizeIgnored(cwd));
      const ignoredPaths = [...this._ignoredPaths];
      const list = [...ignoredPaths.map(normalizeIgnored(cwd)), ...ignored];
      this._userIgnored = anymatch(list, void 0);
    }
    return this._userIgnored(path5, stats);
  }
  _isntIgnored(path5, stat6) {
    return !this._isIgnored(path5, stat6);
  }
  /**
   * Provides a set of common helpers and properties relating to symlink handling.
   * @param path file or directory pattern being watched
   */
  _getWatchHelpers(path5) {
    return new WatchHelper(path5, this.options.followSymlinks, this);
  }
  // Directory helpers
  // -----------------
  /**
   * Provides directory tracking objects
   * @param directory path of the directory
   */
  _getWatchedDir(directory) {
    const dir = sysPath2.resolve(directory);
    if (!this._watched.has(dir))
      this._watched.set(dir, new DirEntry(dir, this._boundRemove));
    return this._watched.get(dir);
  }
  // File helpers
  // ------------
  /**
   * Check for read permissions: https://stackoverflow.com/a/11781404/1358405
   */
  _hasReadPermissions(stats) {
    if (this.options.ignorePermissionErrors)
      return true;
    return Boolean(Number(stats.mode) & 256);
  }
  /**
   * Handles emitting unlink events for
   * files and directories, and via recursion, for
   * files and directories within directories that are unlinked
   * @param directory within which the following item is located
   * @param item      base path of item/directory
   */
  _remove(directory, item, isDirectory) {
    const path5 = sysPath2.join(directory, item);
    const fullPath = sysPath2.resolve(path5);
    isDirectory = isDirectory != null ? isDirectory : this._watched.has(path5) || this._watched.has(fullPath);
    if (!this._throttle("remove", path5, 100))
      return;
    if (!isDirectory && this._watched.size === 1) {
      this.add(directory, item, true);
    }
    const wp = this._getWatchedDir(path5);
    const nestedDirectoryChildren = wp.getChildren();
    nestedDirectoryChildren.forEach((nested) => this._remove(path5, nested));
    const parent = this._getWatchedDir(directory);
    const wasTracked = parent.has(item);
    parent.remove(item);
    if (this._symlinkPaths.has(fullPath)) {
      this._symlinkPaths.delete(fullPath);
    }
    let relPath = path5;
    if (this.options.cwd)
      relPath = sysPath2.relative(this.options.cwd, path5);
    if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {
      const event = this._pendingWrites.get(relPath).cancelWait();
      if (event === EVENTS.ADD)
        return;
    }
    this._watched.delete(path5);
    this._watched.delete(fullPath);
    const eventName = isDirectory ? EVENTS.UNLINK_DIR : EVENTS.UNLINK;
    if (wasTracked && !this._isIgnored(path5))
      this._emit(eventName, path5);
    this._closePath(path5);
  }
  /**
   * Closes all watchers for a path
   */
  _closePath(path5) {
    this._closeFile(path5);
    const dir = sysPath2.dirname(path5);
    this._getWatchedDir(dir).remove(sysPath2.basename(path5));
  }
  /**
   * Closes only file-specific watchers
   */
  _closeFile(path5) {
    const closers = this._closers.get(path5);
    if (!closers)
      return;
    closers.forEach((closer) => closer());
    this._closers.delete(path5);
  }
  _addPathCloser(path5, closer) {
    if (!closer)
      return;
    let list = this._closers.get(path5);
    if (!list) {
      list = [];
      this._closers.set(path5, list);
    }
    list.push(closer);
  }
  _readdirp(root, opts) {
    if (this.closed)
      return;
    const options = { type: EVENTS.ALL, alwaysStat: true, lstat: true, ...opts, depth: 0 };
    let stream = readdirp(root, options);
    this._streams.add(stream);
    stream.once(STR_CLOSE, () => {
      stream = void 0;
    });
    stream.once(STR_END, () => {
      if (stream) {
        this._streams.delete(stream);
        stream = void 0;
      }
    });
    return stream;
  }
};
function watch(paths, options = {}) {
  const watcher = new FSWatcher(options);
  watcher.add(paths);
  return watcher;
}
var esm_default = { watch, FSWatcher };

// server/sse/files.ts
async function getFiles(init) {
  init.origin = new URL(init.origin).origin;
  console.log(`[files][get]`, [init.path, init.origin + init.base]);
  return await readDir(init.path).catch(() => []).then(
    (files) => files.filter(init.filter).map((path5) => {
      const base = init.base;
      const file = pathToFileURL(join8(init.path, path5)).href;
      const http = new URL(base + path5, init.origin).href;
      const version = versions[http] || null;
      const dependents2 = dependents[http] || null;
      const dependencies2 = dependencies[http] || null;
      return {
        base,
        path: path5,
        file,
        http,
        version,
        dependents: dependents2,
        dependencies: dependencies2
      };
    })
  );
}
function watchFiles(init, listener) {
  init.origin = new URL(init.origin).origin;
  const { path: path5, target, filter } = init;
  console.log(`[files][watch]`, path5);
  const emit = (type) => (path6) => listener(target, createFileEvent({ type, path: path6 }, { path: init.path, base: init.base, origin: String(init.origin) }));
  const watcher = esm_default.watch(path5, {
    ignored: (path6, stats) => stats?.isFile() && !filter(path6),
    persistent: true,
    ignoreInitial: true
  });
  return watcher.on("unlink", emit("removed")).on("add", emit("added")).on("change", emit("changed"));
}
function createFileEvent(event, init) {
  const type = event.type;
  const base = init.base;
  const path5 = event.path.replace(init.path + "/", init.base);
  const file = new URL(event.path, "file://").href;
  const http = new URL(path5, init.origin).href;
  const version = 0;
  const timestamp = Date.now();
  return { type, base, path: path5, file, http, version, timestamp, dependents: null, dependencies: null };
}

// server/sse/endpoints.ts
import { pathToFileURL as pathToFileURL2 } from "node:url";

// utils/json.ts
import * as fs2 from "node:fs";
import * as path4 from "node:path";
async function atomicWriteJSON(filePath, data) {
  const jsonData = JSON.stringify(data, null, 2);
  const tempFilePath = path4.join(
    path4.dirname(filePath),
    `${path4.basename(filePath)}.${performance.now()}.tmp`
  );
  try {
    await fs2.promises.writeFile(tempFilePath, jsonData, "utf8");
    await fs2.promises.rename(tempFilePath, filePath);
  } catch (error) {
    try {
      await fs2.promises.unlink(tempFilePath);
    } catch {
    }
    throw error;
  }
}
async function readJSON(filePath) {
  const fileContent = await fs2.promises.readFile(filePath, "utf8");
  return JSON.parse(fileContent);
}

// server/sse/endpoints.ts
var ENDPOINTS_CONFIG_PATH = RPC_DIR + "/endpoints.json";
var MAX_FAILED = 2;
var __endpoints__ = await readEndpoints();
var oid = (o2) => md5([o2.http, o2.base, o2.file].join("|"));
async function emitEvent(target) {
  const newOrigins = await readEndpoints();
  const newIds = newOrigins.map((o2) => o2.$oid);
  const oldIds = __endpoints__.map((o2) => o2.$oid);
  const changes = getChanges(oldIds, newIds);
  if (changes.added.length) {
    for (const $oid of changes.added) {
      target.emit("endpoint", {
        kind: "added",
        ...newOrigins.find((o2) => o2.$oid === $oid)
      });
    }
  }
  if (changes.removed.length) {
    for (const $oid of changes.removed) {
      target.emit("endpoint", {
        kind: "removed",
        ...__endpoints__.find((o2) => o2.$oid === $oid)
      });
    }
  }
  if (changes.added.length || changes.removed.length) {
    target.emit("endpoints", newOrigins);
  }
  __endpoints__ = newOrigins;
}
function watchEndpointsConfig(target) {
  console.log(`[endpoints][watch]`, ENDPOINTS_CONFIG_PATH);
  const watcher = esm_default.watch(ENDPOINTS_CONFIG_PATH, {
    persistent: true,
    ignoreInitial: true
  });
  return watcher.on("add", () => emitEvent(target)).on("change", () => emitEvent(target)).on("unlink", () => emitEvent(target));
}
async function removeEndpoint(config, origin, listener) {
  const { path: path5, base } = config.server;
  const origins = await readEndpoints();
  const o2 = {
    $oid: "",
    file: String(path5.startsWith("file:") ? path5 : pathToFileURL2(path5)),
    http: origin,
    base,
    status: 200,
    checks: 0,
    failed: 0
  };
  o2.$oid = oid(o2);
  const index = origins.findIndex((origin2) => origin2.$oid === o2.$oid);
  if (index !== -1) {
    origins.splice(index, 1);
    await atomicWriteJSON(ENDPOINTS_CONFIG_PATH, origins);
    if (listener)
      listener({ ...o2, type: "removed" });
  }
  return __endpoints__ = origins;
}
async function addEndpoint(config, origin, listener) {
  const { path: path5, base } = config.server;
  const res = await syncEndpoints();
  const origins = res.newEndpoints;
  const o2 = {
    $oid: "",
    file: String(path5.startsWith("file:") ? path5 : pathToFileURL2(path5)),
    http: origin,
    base,
    endpoint: "",
    status: 200,
    checks: 0,
    failed: 0
  };
  o2.endpoint = o2.http + o2.base;
  o2.$oid = oid(o2);
  const exists = origins.find((origin2) => origin2.$oid === o2.$oid);
  if (!exists) {
    const no = __endpoints__ = [...origins, o2];
    await atomicWriteJSON(ENDPOINTS_CONFIG_PATH, no);
    if (listener)
      await listener({ ...o2, type: "added" });
  } else {
    __endpoints__ = origins;
  }
  return __endpoints__;
}
async function readEndpoints() {
  try {
    return await readJSON(ENDPOINTS_CONFIG_PATH);
  } catch {
    return [];
  }
}
async function checkEndpoints() {
  const entries = await readEndpoints();
  return await Promise.all(entries.map(async (entry) => {
    entry.endpoint = entry.endpoint || entry.http + entry.base;
    entry.failed = entry.failed || 0;
    entry.checks = entry.checks || 0;
    entry.status = entry.status || 0;
    try {
      const response = await fetch(entry.endpoint, { method: "HEAD" });
      return {
        ...entry,
        status: response.status,
        checks: entry.checks + 1,
        failed: response.status !== 200 ? entry.failed + 1 : 0
      };
    } catch (e3) {
      return {
        ...entry,
        status: 0,
        checks: entry.checks + 1,
        failed: entry.failed + 1
      };
    }
  }));
}
async function syncEndpoints() {
  const allEndpoints = await checkEndpoints();
  const validEndpoints = allEndpoints.filter((endpoint) => endpoint.status === 200);
  const failedEndpoints = allEndpoints.filter((endpoint) => endpoint.status !== 200);
  const newEndpoints = allEndpoints.filter((endpoint) => endpoint.status === 200 || endpoint.failed <= MAX_FAILED);
  const allIds = allEndpoints.map((o2) => o2.$oid);
  const newIds = newEndpoints.map((o2) => o2.$oid);
  const validIds = validEndpoints.map((o2) => o2.$oid);
  const changes = getChanges(allIds, newIds);
  console.log("[endpoints][sync]", changes);
  await writeEndpoints(newEndpoints);
  return {
    allEndpoints,
    newEndpoints,
    validEndpoints,
    failedEndpoints,
    allIds,
    newIds,
    validIds,
    changes
  };
}
async function writeEndpoints(endpoints) {
  await atomicWriteJSON(ENDPOINTS_CONFIG_PATH, endpoints);
}
async function getEndpoints(sync = false) {
  return sync ? await syncEndpoints() : await readEndpoints();
}

// server/sse/route.ts
var emitEndpoints = (target, data) => target.emit("endpoints", data);
var emitFiles = (target, data) => target.emit("files", data);
var route_default3 = createRoute((config, context) => {
  return {
    match(request, url) {
      return request.method === "GET" && url.pathname === config.server.base && !!request.headers.get("accept")?.includes("text/event-stream");
    },
    async fetch(_3, url) {
      const target = context.sse.createTarget();
      await getAndEmitEndpoints(target);
      await getAndEmitFiles(target, url.origin, config);
      return target.asResponse();
    }
  };
});
async function getAndEmitFiles(sse, origin, cfg) {
  emitFiles(sse, await getFiles({
    path: cfg.server.path,
    base: cfg.server.base,
    filter: cfg.filter,
    origin
  }));
}
async function getAndEmitEndpoints(target) {
  emitEndpoints(target, await readEndpoints());
}

// server/appRouter.ts
function createAppRouter(config, context, options) {
  return createRouter([
    /** [OPTIONS] */
    route(
      (req) => req.method === "OPTIONS",
      () => new Response(null, {
        status: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Headers": "*",
          "Access-Control-Allow-Methods": "*",
          "Access-Control-Expose-Headers": "*",
          "Access-Control-Allow-Private-Network": "true"
        }
      })
    ),
    /** [HEAD] */
    route(
      (req, _url) => req.method === "HEAD",
      (_req, url) => new Response(null, {
        headers: {
          "x-path": config.server.path,
          "x-port": config.server.port,
          "x-base": config.server.base,
          "x-endpoint": `${url.origin}${config.server.base}`
        }
      })
    ),
    /** favicon.ico */
    route(
      (req, url) => req.method === "GET" && url.pathname === "/favicon.ico",
      () => new Response(null, { status: 204 })
    ),
    /** ?base - Redirects to base url */
    route(
      (req, url) => url.searchParams.has("base"),
      (_req, url) => Response.redirect(`${url.origin}${config.server.base}`)
    ),
    /** 
     * Opens url in rpc.dash app 
     * @query ?dash
     * @query ?dash=dev - append dev to protocol (ex: web+rpcdev://) 
     */
    route(
      (req, url) => url.searchParams.has("dash"),
      async (_req, url) => {
        const protocol = config.protocol + url.searchParams.get("dash");
        url.searchParams.delete("dash");
        const protoUrl = `${protocol}://${url.host}${url.pathname}${url.searchParams.size ? `?${url.searchParams}` : ``}`;
        console.log(`[dash] ${protoUrl}`);
        try {
          await open(protoUrl);
          return new Response(JSON.stringify({ protocol, url: protoUrl }, null, 2));
        } catch (e3) {
          const msg = `No application knows how to open URL`;
          if (e3.message.includes(msg)) {
            throw new TypeError(`${msg}: ${protoUrl}`, { cause: e3 });
          }
          throw e3;
        }
      }
    ),
    /** 
     * Redirect to base url for event source request
     * @query ?event
     * @header accept: 'text/event-stream'
     * @redirect endpoint 
     */
    route(
      (req, url) => url.pathname !== config.server.base && (url.searchParams.has("event") || req.headers.get("accept") === "text/event-stream"),
      (_req, url) => Response.redirect(`${url.origin}${config.server.base}${url.search}`, 303)
    ),
    /** ?files - Returns files */
    route(
      (req, url) => url.searchParams.has("files"),
      async (_req, url) => new Response(JSON.stringify(await getFiles({
        path: config.server.path,
        base: config.server.base,
        filter: config.filter,
        origin: url.origin
      }), null, 4), {
        headers: {
          "content-type": "application/json"
        }
      })
    ),
    /** ?endpoints[=check] - Returns endpoints ( =check - Check status ) */
    route(
      (req, url) => url.searchParams.has("endpoints"),
      async (_req, url) => new Response(JSON.stringify(await getEndpoints(url.searchParams.get("endpoints") === "check"), null, 4), {
        headers: {
          "content-type": "application/json"
        }
      })
    ),
    /** ?meta */
    route(
      (req, url) => url.searchParams.has("meta"),
      (req, url) => new Response(JSON.stringify(url.pathname !== config.server.base ? mod_default.get(url.origin + url.pathname) : mod_default.get(), null, 4), {
        headers: {
          "content-type": "application/json"
        }
      })
    ),
    /** ?json */
    route(
      (req, url) => url.searchParams.has("json") || url.pathname === config.server.base && req.headers.get("x-dest") === "document",
      async (req, url) => new Response(JSON.stringify({
        files: await getFiles({
          path: config.server.path,
          base: config.server.base,
          filter: config.filter,
          origin: url.origin
        }),
        origins: await readEndpoints(),
        meta: mod_default
      }, null, 4), {
        headers: {
          "content-type": "application/json"
        }
      })
    ),
    /** client.envImportUrl */
    route(
      (_req, url) => url.pathname === config.client.envImportUrl,
      (_req, url) => new Response(`export const create = (meta) => (${JSON.stringify(config.getEnv(url), null, 4)})`, {
        headers: {
          "content-type": "application/javascript"
        }
      })
    ),
    route_default(config, context),
    route_default3(config, context),
    route_default2(config, context)
  ], {
    onError(request, error) {
      return new Response(JSON.stringify({
        ...error,
        url: request.url,
        env: context.env.version
      }, null, 2), { status: error.status });
    },
    onResponse(request, response) {
      try {
        const url = new URL(request.url);
        response.headers.set("Server", `${context.env.version}`);
        response.headers.set("X-RPC", context.env.version[0]);
        response.headers.set("X-URL", url.href);
        response.headers.set("X-Runtime", context.env.version[1]);
        response.headers.set("X-Base", config.server.base);
        response.headers.set("X-Base-Url", `${url.origin}${config.server.base}`);
        response.headers.set("Access-Control-Allow-Origin", "*");
        response.headers.set("Access-Control-Allow-Headers", "*");
        response.headers.set("Access-Control-Allow-Methods", "*");
        response.headers.set("Access-Control-Expose-Headers", "*");
      } catch {
      }
      return response;
    }
  }, options);
}

// https://deno.land/std@0.204.0/assert/assertion_error.ts
var AssertionError = class extends Error {
  name = "AssertionError";
  constructor(message) {
    super(message);
  }
};

// https://deno.land/std@0.204.0/assert/assert.ts
function assert(expr, msg = "") {
  if (!expr) {
    throw new AssertionError(msg);
  }
}

// https://deno.land/std@0.204.0/http/server_sent_event.ts
var encoder = new TextEncoder();
var DEFAULT_KEEP_ALIVE_INTERVAL = 3e4;
var CloseEvent = class extends Event {
  constructor(eventInit) {
    super("close", eventInit);
  }
};
var ServerSentEvent = class extends Event {
  #data;
  #id;
  #type;
  /**
   * @param type the event type that will be available on the client. The type
   *             of `"message"` will be handled specifically as a message
   *             server-side event.
   * @param eventInit initialization options for the event
   */
  constructor(type, eventInit = {}) {
    super(type, eventInit);
    const { data, replacer, space } = eventInit;
    this.#type = type;
    try {
      this.#data = typeof data === "string" ? data : data !== void 0 ? JSON.stringify(data, replacer, space) : "";
    } catch (e3) {
      assert(e3 instanceof Error);
      throw new TypeError(
        `data could not be coerced into a serialized string.
  ${e3.message}`
      );
    }
    const { id } = eventInit;
    this.#id = id;
  }
  /** The data associated with the event, which will be sent to the client and
   * be made available in the `EventSource`. */
  get data() {
    return this.#data;
  }
  /** The optional ID associated with the event that will be sent to the client
   * and be made available in the `EventSource`. */
  get id() {
    return this.#id;
  }
  toString() {
    const data = `data: ${this.#data.split("\n").join("\ndata: ")}
`;
    return `${this.#type === "__message" ? "" : `event: ${this.#type}
`}${this.#id ? `id: ${String(this.#id)}
` : ""}${data}
`;
  }
};
var RESPONSE_HEADERS = [
  ["Connection", "Keep-Alive"],
  ["Content-Type", "text/event-stream"],
  ["Cache-Control", "no-cache"],
  ["Keep-Alive", `timeout=${Number.MAX_SAFE_INTEGER}`]
];
var ServerSentEventStreamTarget = class extends EventTarget {
  #bodyInit;
  #closed = false;
  #controller;
  // we are ignoring any here, because when exporting to npm/Node.js, the timer
  // handle isn't a number.
  // deno-lint-ignore no-explicit-any
  #keepAliveId;
  // deno-lint-ignore no-explicit-any
  #error(error) {
    this.dispatchEvent(new CloseEvent({ cancelable: false }));
    const errorEvent = new ErrorEvent("error", { error });
    this.dispatchEvent(errorEvent);
  }
  #push(payload) {
    if (!this.#controller) {
      this.#error(new Error("The controller has not been set."));
      return;
    }
    if (this.#closed) {
      return;
    }
    this.#controller.enqueue(encoder.encode(payload));
  }
  get closed() {
    return this.#closed;
  }
  constructor({ keepAlive = false } = {}) {
    super();
    this.#bodyInit = new ReadableStream({
      start: (controller) => {
        this.#controller = controller;
      },
      cancel: (error) => {
        if (error instanceof Error && error.message.includes("connection closed")) {
          this.close();
        } else {
          this.#error(error);
        }
      }
    });
    this.addEventListener("close", () => {
      this.#closed = true;
      if (this.#keepAliveId !== null && this.#keepAliveId !== void 0) {
        clearInterval(this.#keepAliveId);
        this.#keepAliveId = void 0;
      }
      if (this.#controller) {
        try {
          this.#controller.close();
        } catch {
        }
      }
    });
    if (keepAlive) {
      const interval = typeof keepAlive === "number" ? keepAlive : DEFAULT_KEEP_ALIVE_INTERVAL;
      this.#keepAliveId = setInterval(() => {
        this.dispatchComment("keep-alive comment");
      }, interval);
    }
  }
  /** Returns a {@linkcode Response} which contains the body and headers needed
   * to initiate a SSE connection with the client. */
  asResponse(responseInit) {
    return new Response(...this.asResponseInit(responseInit));
  }
  /** Returns a tuple which contains the {@linkcode BodyInit} and
   * {@linkcode ResponseInit} needed to create a response that will establish
   * a SSE connection with the client. */
  asResponseInit(responseInit = {}) {
    const headers = new Headers(responseInit.headers);
    for (const [key, value] of RESPONSE_HEADERS) {
      headers.set(key, value);
    }
    responseInit.headers = headers;
    return [this.#bodyInit, responseInit];
  }
  close() {
    this.dispatchEvent(new CloseEvent({ cancelable: false }));
    return Promise.resolve();
  }
  dispatchComment(comment) {
    this.#push(`: ${comment.split("\n").join("\n: ")}

`);
    return true;
  }
  // deno-lint-ignore no-explicit-any
  dispatchMessage(data) {
    const event = new ServerSentEvent("__message", { data });
    return this.dispatchEvent(event);
  }
  dispatchEvent(event) {
    const dispatched = super.dispatchEvent(event);
    if (dispatched && event instanceof ServerSentEvent) {
      this.#push(String(event));
    }
    return dispatched;
  }
  [Symbol.for("Deno.customInspect")](inspect) {
    return `${this.constructor.name} ${inspect({ "#bodyInit": this.#bodyInit, "#closed": this.#closed })}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")](depth, options, inspect) {
    if (depth < 0) {
      return options.stylize(`[${this.constructor.name}]`, "special");
    }
    const newOptions = Object.assign({}, options, {
      depth: options.depth === null ? null : options.depth - 1
    });
    return `${options.stylize(this.constructor.name, "special")} ${inspect(
      { "#bodyInit": this.#bodyInit, "#closed": this.#closed },
      newOptions
    )}`;
  }
};

// server/sse/create.ts
function createSSE(opts) {
  opts = opts || {};
  const targets = /* @__PURE__ */ new Set();
  let eventId = 1;
  const console2 = createConsole(opts?.consoleName || "[sse]", {
    levels: opts?.consoleLevels
  });
  const send = (data) => emit("message", data);
  function emit(event, data) {
    const id = eventId++;
    const sse = new ServerSentEvent(event, { id, data, space: opts?.space });
    console2.log(`emit(${event})`, id, data);
    for (const target of targets) {
      target.dispatchEvent(sse);
    }
  }
  function comment(comment2) {
    for (const target of targets) {
      target.dispatchComment(comment2);
    }
  }
  function createTarget() {
    const target = new ServerSentEventStreamTarget({ keepAlive: opts?.keepAlive });
    target.id = targets.size + 1;
    target.emit = (event, data) => target.dispatchEvent(new ServerSentEvent(event, { id: eventId++, data, space: opts?.space }));
    target.comment = (comment2) => target.dispatchComment(comment2);
    target.addEventListener("close", (e3) => {
      const target2 = e3.target;
      targets.delete(target2);
      comment(`target #${target2.id} closed (${targets.size})`);
      console2.log(`[sse][close]`, target2.id);
    });
    target.comment(`welcome #${target.id}`);
    comment(`target #${target.id} joined (${targets.size + 1})`);
    targets.add(target);
    console2.log(`[sse][open]`, target.id);
    return target;
  }
  return {
    targets,
    eventId,
    emit,
    send,
    comment,
    createTarget
  };
}

// package.json
var package_default = {
  name: "@debuno/rpc",
  displayName: "DebunoRPC",
  version: "0.0.5",
  description: "Debuno RPC",
  keywords: [
    "debuno",
    "rpc",
    "debuno/rpc",
    "deno",
    "bun",
    "node",
    "web"
  ],
  type: "module",
  repository: {
    type: "git",
    url: "git+https://github.com/serebano/debuno-rpc.git"
  },
  homepage: "https://github.com/serebano/debuno-rpc",
  scripts: {
    build: "deno run build",
    prepublishOnly: "deno run build"
  },
  bin: {
    rpc: "./cli.ts"
  },
  exports: {
    ".": {
      types: "./server/index.ts",
      import: "./dist/server/index.js"
    },
    "./client": {
      types: "./client/index.d.ts"
    },
    "./client/rpc": {
      types: "./client/rpc.ts",
      import: "./dist/client/rpc.js"
    },
    "./client/hot": {
      types: "./client/hot.ts",
      import: "./dist/client/hot.js"
    }
  },
  dependencies: {
    "oxc-transform": "0.60.0",
    "oxc-parser": "0.60.0"
  },
  publishConfig: {
    access: "public"
  },
  files: [
    "dist",
    "client",
    "server",
    "types",
    "utils"
  ]
};

// server/env.ts
import process3 from "node:process";
function createEnv() {
  const env = {
    version: [
      [package_default.displayName, package_default.version].join("/"),
      navigator.userAgent
    ],
    get(key) {
      return key ? process3.env[key.toUpperCase()] : process3.env;
    },
    set(key, value) {
      process3.env[key.toUpperCase()] = value;
    }
  };
  env.version.toString = () => env.version[0] + ` (${env.version[1]})`;
  return env;
}

// server/app.ts
function createContext(config, opts) {
  return {
    env: createEnv(),
    sse: createSSE({
      space: 2,
      keepAlive: true,
      consoleLevels: opts?.consoleLevels,
      consoleName: `[sse][${config.server.url}]`
    })
  };
}
function createApp(init, opts) {
  const console2 = createConsole(`[app][${init.server.url}]`, { levels: opts?.consoleLevels });
  const config = defineConfig(init);
  const context = createContext(config, opts);
  const router = createAppRouter(config, context, {
    consoleLevels: opts?.consoleLevels,
    consoleName: `[router][${init.server.url}]`
  });
  return {
    config,
    context,
    router,
    async onStart(addr) {
      const { url } = context.addr = addr;
      await addEndpoint(config, url.origin);
      watchEndpointsConfig(context.sse);
      watchFiles(
        {
          path: config.server.path,
          base: config.server.base,
          origin: url.origin,
          filter: config.filter,
          target: context.sse
        },
        (target, event) => {
          if (event.type === "changed") {
            const url2 = event.http;
            mod_default.incVersion(url2);
            Object.assign(event, mod_default.get(url2));
            if (url2.endsWith(".html")) {
              target.emit("reload", url2);
            } else {
              target.emit("change", mod_default.getDependents(url2, true));
            }
          }
          target.emit("file", event);
        }
      );
      console2.log();
      console2.group(`${gray("[")}${cyan("rpc.serve")}${gray("]")} ${yellow("{ ")} ${red('"' + config.server.port + config.server.base + '"')}${": "}${gray('"' + config.server.path + '"')}${gray(" }")}`);
      console2.log([
        url.origin + config.server.base,
        url.origin + config.server.base + "?event",
        url.origin + config.server.base + "?json",
        url.origin + config.server.base + "?dash",
        url.origin + config.server.base + "?dash=dev"
      ]);
      console2.groupEnd();
      console2.log();
    },
    async onStop() {
      if (!context.addr) return;
      const endpoints = await removeEndpoint(config, context.addr.url.origin, (e3) => context.sse.emit("endpoint", e3));
      context.sse.emit("endpoints", endpoints);
    },
    async onError(error) {
      console2.error(red("[rpc.serve]"), error);
      context.sse.emit("error", {
        message: error.message,
        stack: error.stack,
        name: error.name,
        type: error.type,
        code: error.code,
        errno: error.errno,
        syscall: error.syscall
      });
    }
  };
}

// ../debuno-serve/mod.ts
import process4 from "node:process";

// import("./src/**/*.ts") in ../debuno-serve/mod.ts
var globImport_src_ts = __glob({
  "./src/bun.ts": () => Promise.resolve().then(() => (init_bun(), bun_exports)),
  "./src/deno.ts": () => Promise.resolve().then(() => (init_deno(), deno_exports)),
  "./src/node.ts": () => Promise.resolve().then(() => (init_node(), node_exports)),
  "./src/types.ts": () => Promise.resolve().then(() => (init_types(), types_exports)),
  "./src/utils.ts": () => Promise.resolve().then(() => (init_utils(), utils_exports))
});

// ../debuno-serve/mod.ts
var IS_DENO = navigator.userAgent.includes("Deno");
var IS_BUN = navigator.userAgent.includes("Bun");
var IS_NODE = navigator.userAgent.includes("Node");
var Env = (() => {
  if (IS_DENO) return "deno";
  if (IS_BUN) return "bun";
  if (IS_NODE) return "node";
  throw new Error("Unknown environment");
})();
async function serve4(options) {
  const start2 = performance.now();
  const serveModule = await globImport_src_ts(`./src/${Env}.ts`);
  const controller = new AbortController();
  options.signal = controller.signal;
  const close = (reason) => controller.abort(reason);
  const server = await serveModule.serve({
    ...options,
    onListen: async (addr) => {
      if (options.debug)
        console.log(`[serve][on:listen] (${navigator.userAgent}) ${addr.url}`, performance.now() - start2, "ms");
      await options.onListen?.(addr);
    },
    onError: async (error) => {
      if (options.debug)
        console.error(`[serve][on:error] (${navigator.userAgent}) error`, error.message);
      await options.onError?.(error);
    },
    onClose: async (error) => {
      if (options.debug)
        console.log(`[serve][on:close] (${navigator.userAgent}) closed`, performance.now() - start2, "ms");
      await options.onClose?.(error);
    }
  });
  process4.on("SIGINT", async () => {
    console.log();
    console.group("[server] shutting down...");
    console.log();
    try {
      await options?.onClose?.();
      controller.abort("SIGINT");
      console.groupEnd();
      console.log();
      console.log(`[server] closed [SIGINT]`);
    } catch (e3) {
      console.groupEnd();
      console.log();
      console.log(`[server] ${e3.message}`);
    } finally {
      process4.exit(0);
    }
  });
  return Object.assign(server, {
    close
  });
}

// server/serve.ts
async function serve5(input, options) {
  if (!input || typeof input === "string")
    input = await loadRC(input);
  if (!Array.isArray(input)) {
    input = parseRC(input);
  }
  if (!input.length) {
    throw new Error("No configs provided");
  }
  options = options || {};
  const grouped = groupByDeep(input, "server.$id");
  const servers = [];
  for (const $id in grouped) {
    const config = grouped[$id].at(0)?.server;
    let serverState = "idle";
    const server = {
      $id,
      apps: [],
      config,
      get state() {
        return serverState;
      },
      set state(state) {
        serverState = state;
        console2.log(state);
        if (options?.onStateChange) {
          options.onStateChange(server);
        }
        if (state === "starting" && options?.onStarting) {
          options.onStarting(server);
        }
        if (state === "listening" && options?.onListening) {
          options.onListening(server);
        }
        if (state === "closed" && options?.onClosed) {
          options.onClosed(server);
        }
        if (state === "errored" && options?.onErrored) {
          options.onErrored(server);
        }
      },
      _state: "idle"
    };
    if (options?.onInit) {
      options.onInit(server);
    }
    const console2 = createConsole(`[server][${$id}]`, {
      levels: options?.consoleLevels
    });
    const inits = grouped[$id];
    const apps = inits.map((init) => createApp(init, {
      consoleLevels: options?.consoleLevels
    }));
    server.apps = apps;
    const router = createRouter(apps.map((app) => ({
      fetch: app.router.fetch,
      match(_3, url) {
        return url.pathname.startsWith(app.config.server.base);
      }
    })));
    const onListen = async (addr) => {
      server.addr = addr;
      server.error = void 0;
      server.state = "listening";
      for (const app of apps) {
        await app.onStart(addr);
      }
    };
    const onClose = async (error) => {
      server.error = error;
      server.addr = void 0;
      server.apps = [];
      server.server = void 0;
      server.state = "closed";
      for (const app of apps) {
        await app.onStop(error);
      }
    };
    const onError = async (error) => {
      server.error = error;
      server.state = "errored";
      for (const app of apps) {
        app.onError(error);
      }
      await onClose(error);
      if (options?.throwIfError) {
        throw error;
      }
    };
    try {
      server.state = "starting";
      server.server = await serve4({
        port: config.port,
        hostname: config.hostname,
        fetch: router.fetch,
        onListen,
        onClose,
        onError
      });
    } catch (e3) {
      await onError(e3);
    }
    servers.push(server);
  }
  return servers;
}

// server/start.ts
function start(rcFilePath) {
  return serve5(rcFilePath, {
    onInit(server) {
      console.time(server.$id);
      console.groupEnd();
      console.log();
      console.group(`${cyan(server.$id)}`);
    },
    onListening(server) {
      console.group();
      server.apps.forEach((app) => {
        console.log("app(", app.config.server.base, green(app.config.server.url + "?dash"), yellow(app.config.server.url + "?dash=dev"), ")");
      });
      console.groupEnd();
    },
    onErrored(server) {
      console.group();
      console.log(red(String(server.error)));
      console.groupEnd();
    },
    onClosed() {
      console.groupEnd();
      console.log();
    },
    onStateChange(server) {
      console.log(`${gray(server.$id)} (${magenta(server.state)})`);
    }
  });
}

// server/index.ts
var index_default = start;
export {
  createApp,
  createRouter,
  index_default as default,
  defineConfig,
  loadRC,
  parseRC,
  serve5 as serve,
  start
};
/*! Bundled license information:

chokidar/esm/index.js:
  (*! chokidar - MIT License (c) 2012 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=data:application/json;base64,
