// client/hot/HMRClient.ts
var HMRClient = class {
  constructor(logger, importUpdatedModule2) {
    this.logger = logger;
    this.importUpdatedModule = importUpdatedModule2;
    Object.assign(globalThis, { hmrClient: this });
  }
  hotModulesMap = /* @__PURE__ */ new Map();
  disposeMap = /* @__PURE__ */ new Map();
  pruneMap = /* @__PURE__ */ new Map();
  dataMap = /* @__PURE__ */ new Map();
  customListenersMap = /* @__PURE__ */ new Map();
  ctxToListenersMap = /* @__PURE__ */ new Map();
  async notifyListeners(event, data) {
    const cbs = this.customListenersMap.get(event);
    if (cbs) {
      await Promise.allSettled(cbs.map((cb) => cb(data)));
    }
  }
  clear() {
    this.hotModulesMap.clear();
    this.disposeMap.clear();
    this.pruneMap.clear();
    this.dataMap.clear();
    this.customListenersMap.clear();
    this.ctxToListenersMap.clear();
  }
  // After an HMR update, some modules are no longer imported on the page
  // but they may have left behind side effects that need to be cleaned up
  // (e.g. style injections)
  async prunePaths(paths) {
    await Promise.all(
      paths.map((path) => {
        const disposer = this.disposeMap.get(path);
        if (disposer) return disposer(this.dataMap.get(path));
      })
    );
    paths.forEach((path) => {
      const fn = this.pruneMap.get(path);
      if (fn) {
        fn(this.dataMap.get(path));
      }
    });
  }
  warnFailedUpdate(err, path) {
    if (!err.message.includes("fetch")) {
      this.logger.error(err);
    }
    this.logger.error(
      `Failed to reload ${path}. This could be due to syntax errors or importing non-existent modules. (see errors above)`
    );
  }
  updateQueue = [];
  pendingUpdateQueue = false;
  /**
   * buffer multiple hot updates triggered by the same src change
   * so that they are invoked in the same order they were sent.
   * (otherwise the order may be inconsistent because of the http request round trip)
   */
  async queueUpdate(payload) {
    this.updateQueue.push(this.fetchUpdate(payload));
    if (!this.pendingUpdateQueue) {
      this.pendingUpdateQueue = true;
      await Promise.resolve();
      this.pendingUpdateQueue = false;
      const loading = [...this.updateQueue];
      this.updateQueue = [];
      (await Promise.all(loading)).forEach((fn) => fn && fn());
    }
  }
  async fetchUpdate(update) {
    const { path, acceptedPath } = update;
    const mod = this.hotModulesMap.get(path);
    if (!mod) {
      return;
    }
    let fetchedModule;
    const isSelfUpdate = path === acceptedPath;
    const qualifiedCallbacks = mod.callbacks.filter(
      ({ deps }) => deps.includes(acceptedPath)
    );
    console.log(`fetchUpdate`, update, { isSelfUpdate, qualifiedCallbacks, cbs: mod.callbacks });
    if (isSelfUpdate || qualifiedCallbacks.length > 0) {
      const disposer = this.disposeMap.get(acceptedPath);
      if (disposer) await disposer(this.dataMap.get(acceptedPath));
      try {
        fetchedModule = await this.importUpdatedModule(update);
      } catch (e) {
        this.warnFailedUpdate(e, acceptedPath);
      }
    }
    return () => {
      for (const { deps, fn } of qualifiedCallbacks) {
        fn(
          deps.map((dep) => dep === acceptedPath ? fetchedModule : void 0)
        );
      }
      const loggedPath = isSelfUpdate ? path : `${acceptedPath} via ${path}`;
      this.logger.debug(`hot updated: ${loggedPath}`);
    };
  }
  async update(e) {
    const result = this.testEvent(e);
    if (result) {
      await this.queueUpdate(result);
    }
    return result;
  }
  testEvent(e) {
    const updates = e.map((e2) => ({ path: e2.importer, acceptedPath: e2.url, version: e2.version, timestamp: e2.timestamp }));
    for (const update of updates) {
      const res = this.testUpdate(update);
      if (res?.qualifiedCallbacks.length) {
        return res;
      }
      const res2 = this.testUpdate({
        path: update.acceptedPath,
        acceptedPath: update.acceptedPath,
        version: update.version,
        timestamp: update.timestamp
      });
      if (res2?.qualifiedCallbacks.length) {
        return res2;
      }
    }
  }
  testUpdate(update) {
    const { path, acceptedPath, version, timestamp } = update;
    const mod = this.hotModulesMap.get(path);
    if (!mod) {
      return;
    }
    const isSelfUpdate = path === acceptedPath;
    const qualifiedCallbacks = mod.callbacks.filter(({ deps }) => deps.includes(acceptedPath));
    const result = {
      path,
      version,
      timestamp,
      acceptedPath,
      isSelfUpdate,
      qualifiedCallbacks
    };
    return result;
  }
};

// client/hot/HMRContext.ts
var HMRContext = class {
  constructor(hmrClient2, ownerPath) {
    this.hmrClient = hmrClient2;
    this.ownerPath = ownerPath;
    const url = new URL(ownerPath, String(location));
    url.searchParams.delete("version");
    this.ownerPath = ownerPath = String(url);
    console.log(`new HMRContext`, { ownerPath });
    if (!hmrClient2.dataMap.has(ownerPath)) {
      hmrClient2.dataMap.set(ownerPath, {});
    }
    const mod = hmrClient2.hotModulesMap.get(ownerPath);
    if (mod) {
      mod.callbacks = [];
    }
    const staleListeners = hmrClient2.ctxToListenersMap.get(ownerPath);
    if (staleListeners) {
      for (const [event, staleFns] of staleListeners) {
        const listeners = hmrClient2.customListenersMap.get(event);
        if (listeners) {
          hmrClient2.customListenersMap.set(
            event,
            listeners.filter((l) => !staleFns.includes(l))
          );
        }
      }
    }
    this.newListeners = /* @__PURE__ */ new Map();
    hmrClient2.ctxToListenersMap.set(ownerPath, this.newListeners);
  }
  newListeners;
  get data() {
    return this.hmrClient.dataMap.get(this.ownerPath);
  }
  accept(deps, callback) {
    if (typeof deps === "function" || !deps) {
      this.acceptDeps([this.ownerPath], ([mod]) => deps?.(mod));
    } else if (typeof deps === "string") {
      this.acceptDeps([deps], ([mod]) => callback?.(mod));
    } else if (Array.isArray(deps)) {
      this.acceptDeps(deps, callback);
    } else {
      throw new Error(`invalid hot.accept() usage.`);
    }
  }
  // export names (first arg) are irrelevant on the client side, they're
  // extracted in the server for propagation
  acceptExports(_, callback) {
    this.acceptDeps([this.ownerPath], ([mod]) => callback?.(mod));
  }
  dispose(cb) {
    this.hmrClient.disposeMap.set(this.ownerPath, cb);
  }
  prune(cb) {
    this.hmrClient.pruneMap.set(this.ownerPath, cb);
  }
  // Kept for backward compatibility (#11036)
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  decline() {
  }
  invalidate(message) {
    this.hmrClient.notifyListeners("hmr:invalidate", {
      path: this.ownerPath,
      message
    });
    this.hmrClient.logger.debug(
      `invalidate ${this.ownerPath}${message ? `: ${message}` : ""}`
    );
  }
  on(event, cb) {
    const addToMap = (map) => {
      const existing = map.get(event) || [];
      existing.push(cb);
      map.set(event, existing);
    };
    addToMap(this.hmrClient.customListenersMap);
    addToMap(this.newListeners);
  }
  off(event, cb) {
    const removeFromMap = (map) => {
      const existing = map.get(event);
      if (existing === void 0) {
        return;
      }
      const pruned = existing.filter((l) => l !== cb);
      if (pruned.length === 0) {
        map.delete(event);
        return;
      }
      map.set(event, pruned);
    };
    removeFromMap(this.hmrClient.customListenersMap);
    removeFromMap(this.newListeners);
  }
  acceptDeps(deps, callback = () => {
  }) {
    deps = deps.map((dep) => {
      const url = new URL(dep, this.ownerPath);
      url.searchParams.delete("version");
      url.searchParams.delete("t");
      return String(url);
    });
    const mod = this.hmrClient.hotModulesMap.get(this.ownerPath) || {
      id: this.ownerPath,
      callbacks: []
    };
    mod.callbacks.push({
      deps,
      fn: callback
    });
    this.hmrClient.hotModulesMap.set(this.ownerPath, mod);
  }
};

// client/hot/client.ts
var eventSource = new EventSource(import.meta.env.BASE_URL);
eventSource.addEventListener("open", (e) => console.log(`[rpc:sse] connected`, e.target.url));
eventSource.addEventListener("error", (e) => console.log(`[rpc:sse] errored, reloading...`, e.target.url, setTimeout(() => location.reload(), 10)));
eventSource.addEventListener("reload", (e) => e.data === currentUrl() && setTimeout(() => location.reload(), 10));
eventSource.addEventListener("change", (e) => hmrClient.update(JSON.parse(e.data)));
function currentUrl() {
  return location.origin + (location.pathname.endsWith("/") ? location.pathname + "index.html" : location.pathname);
}
function create(meta) {
  return new HMRContext(hmrClient, meta.url);
}
var hmrClient = new HMRClient(
  {
    error: (err) => console.error("[rpc]", err),
    debug: (...msg) => console.debug("[rpc]", ...msg)
  },
  async function importUpdatedModule({
    acceptedPath,
    version,
    explicitImportRequired,
    isWithinCircularImport
  }) {
    const [acceptedPathWithoutQuery, query] = acceptedPath.split(`?`);
    const importUrl = acceptedPathWithoutQuery + `?${explicitImportRequired ? "import&" : ""}version=${version}${query ? `&${query}` : ""}`;
    const importPromise = import(importUrl);
    if (isWithinCircularImport) {
      importPromise.catch(() => {
        console.info(`[hmr] ${acceptedPath} failed to apply HMR as it's within a circular import. Reloading page to reset the execution order.`);
        setTimeout(() => location.reload(), 50);
      });
    }
    return await importPromise;
  }
);
export {
  create,
  eventSource,
  hmrClient
};
//# sourceMappingURL=data:application/json;base64,
